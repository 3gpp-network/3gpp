{
	// Place your 3gpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Class": {
		"scope": "typescript",
		"prefix": "class",
		"body": [
			"import { IFormatConfig, IIe } from '../format/xlsx';",
			"import { ConstraintSpec } from '../visitors/constraintSpec';",
			"import { IModules } from '../visitors/modules';",
			"import { IParameter } from '../visitors/parameter';",
			"import { Base, IConstantAndModule } from './base';",
			"import { Constraint } from './constraint';",
			"import { IParameterMapping } from './definedType';",
			"",
			"export class ${0:CLASS} extends Base {",
			"\t// TODO",
			"",
			"\tconstructor() {",
			"\t\tsuper();",
			"",
			"\t\t// TODO",
			"\t}",
			"",
			"\tpublic depthMax(): number {",
			"\t\t// TODO",
			"\t}",
			"",
			"\tpublic expand(asn1Pool: IModules, moduleName?: string, parameterList?: IParameter[]): ${0:CLASS} {",
			"\t\t// TODO",
			"\t\treturn this;",
			"\t}",
			"",
			"\tpublic fillWorksheet(ieElem: IIe, ws: any, row: number, col: number, depthMax: number,",
			"\t\t\t\t\t\t\t\t\t\t\t constants: IConstantAndModule[], formatConfig: IFormatConfig,",
			"\t\t\t\t\t\t\t\t\t\t\t depth?: number): [number, number] {",
			"\t\t// TODO",
			"\t\treturn [row, col];",
			"\t}",
			"",
			"\tpublic replaceParameters(parameterMapping: IParameterMapping[]): void {",
			"\t\t// TODO",
			"\t}",
			"",
			"\tpublic setConstraint(constraints: Array<Constraint | ConstraintSpec>): ${0:CLASS} {",
			"\t\t// TODO",
			"\t\treturn this;",
			"\t}",
			"",
			"\tpublic toString(): string {",
			"\t\t// TODO",
			"\t}",
			"}",
		],
		"description": "Class skeleton"
	}
}
