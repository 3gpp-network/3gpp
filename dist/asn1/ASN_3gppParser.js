// Generated from src/asn1/ASN_3gpp.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ASN_3gppVisitor = require('./ASN_3gppVisitor').ASN_3gppVisitor;

var grammarFileName = "ASN_3gpp.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003m\u0510\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004",
    "y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004\u007f\t",
    "\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t\u0082\u0004",
    "\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004\u0086\t",
    "\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t\u0089\u0004",
    "\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004\u008d\t",
    "\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t\u0090\u0004",
    "\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004\u0094\t",
    "\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t\u0097\u0003",
    "\u0002\u0006\u0002\u0130\n\u0002\r\u0002\u000e\u0002\u0131\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0007\u0003",
    "\u013a\n\u0003\f\u0003\u000e\u0003\u013d\u000b\u0003\u0003\u0003\u0005",
    "\u0003\u0140\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u014c\n\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u0150",
    "\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
    "\u0156\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u015f\n\u0007\u0003\b\u0005",
    "\b\u0162\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0168\n\t\u0003",
    "\n\u0005\n\u016b\n\n\u0003\u000b\u0003\u000b\u0007\u000b\u016f\n\u000b",
    "\f\u000b\u000e\u000b\u0172\u000b\u000b\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0007\u000f\u0180\n\u000f\f\u000f\u000e\u000f\u0183",
    "\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0188\n",
    "\u0010\u0003\u0011\u0003\u0011\u0007\u0011\u018c\n\u0011\f\u0011\u000e",
    "\u0011\u018f\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u0196\n\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u019e\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0005\u0014\u01a4\n",
    "\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u01a8\n\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01ae\n\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u01b7\n\u0016\u0005\u0016\u01b9\n\u0016\u0005\u0016",
    "\u01bb\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01c4\n\u0016\u0005\u0016",
    "\u01c6\n\u0016\u0005\u0016\u01c8\n\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01cf\n\u0018\u0003\u0018",
    "\u0007\u0018\u01d2\n\u0018\f\u0018\u000e\u0018\u01d5\u000b\u0018\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01db\n\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01e0\n\u0019\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01e5\n\u001a\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u01ef\n\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0007\u001e\u01f4\n\u001e\f\u001e\u000e\u001e\u01f7\u000b\u001e",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u01fb\n\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0005 \u0201\n \u0003 \u0003 \u0003!\u0003!\u0005!\u0207\n",
    "!\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u020d\n\"\u0003\"\u0003\"",
    "\u0005\"\u0211\n\"\u0003\"\u0003\"\u0003\"\u0005\"\u0216\n\"\u0003#",
    "\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u0220\n$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0005$\u0227\n$\u0005$\u0229\n$\u0003",
    "%\u0003%\u0003%\u0003%\u0007%\u022f\n%\f%\u000e%\u0232\u000b%\u0003",
    "%\u0003%\u0003&\u0003&\u0003&\u0005&\u0239\n&\u0003&\u0003&\u0003\'",
    "\u0003\'\u0005\'\u023f\n\'\u0003(\u0003(\u0005(\u0243\n(\u0003)\u0003",
    ")\u0003)\u0003*\u0003*\u0005*\u024a\n*\u0003+\u0003+\u0005+\u024e\n",
    "+\u0003+\u0003+\u0003+\u0005+\u0253\n+\u0003,\u0003,\u0003-\u0003-\u0003",
    "-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0007.\u0260\n.\f.\u000e",
    ".\u0263\u000b.\u0003.\u0003.\u0005.\u0267\n.\u0003/\u0003/\u0003/\u0003",
    "/\u00030\u00030\u00060\u026f\n0\r0\u000e0\u0270\u00030\u00030\u0003",
    "1\u00031\u00051\u0277\n1\u00032\u00032\u00062\u027b\n2\r2\u000e2\u027c",
    "\u00032\u00032\u00033\u00033\u00053\u0283\n3\u00034\u00034\u00035\u0003",
    "5\u00035\u00036\u00036\u00036\u00056\u028d\n6\u00036\u00036\u00056\u0291",
    "\n6\u00036\u00056\u0294\n6\u00036\u00056\u0297\n6\u00056\u0299\n6\u0003",
    "6\u00036\u00036\u00036\u00036\u00056\u02a0\n6\u00056\u02a2\n6\u0003",
    "6\u00036\u00036\u00036\u00036\u00056\u02a9\n6\u00056\u02ab\n6\u0005",
    "6\u02ad\n6\u00037\u00037\u00037\u00057\u02b2\n7\u00038\u00038\u0003",
    "8\u00058\u02b7\n8\u00039\u00039\u00039\u00039\u00059\u02bd\n9\u0003",
    "9\u00059\u02c0\n9\u0003:\u0003:\u0003:\u0005:\u02c5\n:\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u02cb\n;\u0003<\u0003<\u0003<\u0003<\u0005<\u02d1",
    "\n<\u0003=\u0003=\u0003=\u0005=\u02d6\n=\u0003>\u0003>\u0005>\u02da",
    "\n>\u0003?\u0003?\u0003?\u0003@\u0003@\u0005@\u02e1\n@\u0003A\u0003",
    "A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u02ec\nB\u0005",
    "B\u02ee\nB\u0003B\u0003B\u0003B\u0005B\u02f3\nB\u0005B\u02f5\nB\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0007C\u02fd\nC\fC\u000eC\u0300",
    "\u000bC\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0005E\u030b\nE\u0005E\u030d\nE\u0003F\u0003F\u0003G\u0003G\u0003",
    "H\u0003H\u0003H\u0005H\u0316\nH\u0003I\u0003I\u0003I\u0003I\u0007I\u031c",
    "\nI\fI\u000eI\u031f\u000bI\u0003J\u0003J\u0003J\u0003K\u0003K\u0003",
    "K\u0003K\u0007K\u0328\nK\fK\u000eK\u032b\u000bK\u0003L\u0003L\u0003",
    "M\u0003M\u0003N\u0003N\u0003O\u0003O\u0005O\u0335\nO\u0003P\u0003P\u0005",
    "P\u0339\nP\u0003Q\u0003Q\u0005Q\u033d\nQ\u0003Q\u0005Q\u0340\nQ\u0003",
    "Q\u0003Q\u0005Q\u0344\nQ\u0003Q\u0003Q\u0005Q\u0348\nQ\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0005Q\u034e\nQ\u0003R\u0003R\u0003R\u0003R\u0005R\u0354",
    "\nR\u0003S\u0003S\u0003S\u0003S\u0005S\u035a\nS\u0003T\u0003T\u0003",
    "T\u0005T\u035f\nT\u0003U\u0003U\u0003U\u0003U\u0005U\u0365\nU\u0003",
    "V\u0003V\u0003V\u0005V\u036a\nV\u0003W\u0003W\u0003W\u0003X\u0003X\u0003",
    "X\u0003X\u0003Y\u0003Y\u0005Y\u0375\nY\u0003Y\u0007Y\u0378\nY\fY\u000e",
    "Y\u037b\u000bY\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u038a\nZ\u0003[\u0003[\u0003",
    "[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u0396",
    "\n\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0005]\u039d\n]\u0003]\u0003",
    "]\u0003]\u0005]\u03a2\n]\u0003^\u0003^\u0003_\u0003_\u0003_\u0005_\u03a9",
    "\n_\u0003_\u0005_\u03ac\n_\u0003`\u0003`\u0003`\u0005`\u03b1\n`\u0003",
    "`\u0003`\u0003a\u0003a\u0005a\u03b7\na\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0007b\u03bf\nb\fb\u000eb\u03c2\u000bb\u0003b\u0003b\u0003",
    "c\u0003c\u0003c\u0005c\u03c9\nc\u0003d\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0005d\u03d1\nd\u0003e\u0003e\u0003f\u0003f\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0005g\u03e8\ng\u0003h\u0005h\u03eb\nh\u0003",
    "h\u0003h\u0003h\u0003h\u0005h\u03f1\nh\u0005h\u03f3\nh\u0003h\u0003",
    "h\u0003h\u0005h\u03f8\nh\u0005h\u03fa\nh\u0003i\u0003i\u0003i\u0007",
    "i\u03ff\ni\fi\u000ei\u0402\u000bi\u0003j\u0003j\u0003j\u0003k\u0003",
    "k\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005",
    "m\u0412\nm\u0003n\u0003n\u0003n\u0003n\u0003o\u0003o\u0007o\u041a\n",
    "o\fo\u000eo\u041d\u000bo\u0003p\u0003p\u0003p\u0003p\u0003p\u0005p\u0424",
    "\np\u0003p\u0005p\u0427\np\u0003p\u0005p\u042a\np\u0003q\u0003q\u0005",
    "q\u042e\nq\u0003r\u0003r\u0003r\u0003r\u0003s\u0003s\u0003t\u0005t\u0437",
    "\nt\u0003t\u0003t\u0003u\u0003u\u0003u\u0003u\u0003u\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0005v\u0446\nv\u0003w\u0003w\u0005w\u044a\n",
    "w\u0003x\u0003x\u0003x\u0007x\u044f\nx\fx\u000ex\u0452\u000bx\u0003",
    "y\u0003y\u0005y\u0456\ny\u0003z\u0003z\u0003z\u0003z\u0003z\u0003{\u0003",
    "{\u0003|\u0003|\u0003|\u0007|\u0462\n|\f|\u000e|\u0465\u000b|\u0003",
    "}\u0003}\u0003}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u0473\n\u007f\u0003\u007f",
    "\u0003\u007f\u0005\u007f\u0477\n\u007f\u0005\u007f\u0479\n\u007f\u0003",
    "\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0007\u0081\u0480",
    "\n\u0081\f\u0081\u000e\u0081\u0483\u000b\u0081\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0005\u0082\u0488\n\u0082\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0005\u0083\u048e\n\u0083\u0003\u0083\u0003\u0083",
    "\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0005\u0085\u0496\n",
    "\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u049b\n\u0086",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0007\u0087\u04a1\n",
    "\u0087\f\u0087\u000e\u0087\u04a4\u000b\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0088\u0003\u0088\u0005\u0088\u04aa\n\u0088\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0005\u008a\u04b5\n\u008a\u0003\u008b\u0003\u008b",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005\u008c",
    "\u04be\n\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0007\u008d\u04c3",
    "\n\u008d\f\u008d\u000e\u008d\u04c6\u000b\u008d\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f",
    "\u04cf\n\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0007\u008f\u04d6\n\u008f\f\u008f\u000e\u008f\u04d9\u000b\u008f",
    "\u0003\u008f\u0003\u008f\u0005\u008f\u04dd\n\u008f\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0005\u0090\u04e2\n\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0091\u0003\u0091\u0005\u0091\u04e8\n\u0091\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0007\u0092\u04ed\n\u0092\f\u0092\u000e\u0092\u04f0",
    "\u000b\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094",
    "\u04fc\n\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0007\u0095\u0501",
    "\n\u0095\f\u0095\u000e\u0095\u0504\u000b\u0095\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0005\u0096\u050a\n\u0096\u0003\u0096\u0003",
    "\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0002\u0002\u0098\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
    "\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc",
    "\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114",
    "\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c",
    "\u0002\t\u0004\u0002KKMN\u0003\u0002>?\u0004\u0002\u001a\u001amm\u0003",
    "\u000212\u0004\u00020033\u0003\u0002;<\u0004\u0002\n\u000b\u0015\u0016",
    "\u0002\u053a\u0002\u012f\u0003\u0002\u0002\u0002\u0004\u0133\u0003\u0002",
    "\u0002\u0002\u0006\u014b\u0003\u0002\u0002\u0002\b\u014f\u0003\u0002",
    "\u0002\u0002\n\u0155\u0003\u0002\u0002\u0002\f\u015e\u0003\u0002\u0002",
    "\u0002\u000e\u0161\u0003\u0002\u0002\u0002\u0010\u0167\u0003\u0002\u0002",
    "\u0002\u0012\u016a\u0003\u0002\u0002\u0002\u0014\u016c\u0003\u0002\u0002",
    "\u0002\u0016\u0173\u0003\u0002\u0002\u0002\u0018\u0177\u0003\u0002\u0002",
    "\u0002\u001a\u017a\u0003\u0002\u0002\u0002\u001c\u017c\u0003\u0002\u0002",
    "\u0002\u001e\u0184\u0003\u0002\u0002\u0002 \u0189\u0003\u0002\u0002",
    "\u0002\"\u0190\u0003\u0002\u0002\u0002$\u0197\u0003\u0002\u0002\u0002",
    "&\u01a1\u0003\u0002\u0002\u0002(\u01a7\u0003\u0002\u0002\u0002*\u01c7",
    "\u0003\u0002\u0002\u0002,\u01c9\u0003\u0002\u0002\u0002.\u01cb\u0003",
    "\u0002\u0002\u00020\u01df\u0003\u0002\u0002\u00022\u01e4\u0003\u0002",
    "\u0002\u00024\u01e6\u0003\u0002\u0002\u00026\u01e9\u0003\u0002\u0002",
    "\u00028\u01ee\u0003\u0002\u0002\u0002:\u01f0\u0003\u0002\u0002\u0002",
    "<\u01fa\u0003\u0002\u0002\u0002>\u01fc\u0003\u0002\u0002\u0002@\u0206",
    "\u0003\u0002\u0002\u0002B\u0208\u0003\u0002\u0002\u0002D\u0217\u0003",
    "\u0002\u0002\u0002F\u0228\u0003\u0002\u0002\u0002H\u022a\u0003\u0002",
    "\u0002\u0002J\u0238\u0003\u0002\u0002\u0002L\u023e\u0003\u0002\u0002",
    "\u0002N\u0242\u0003\u0002\u0002\u0002P\u0244\u0003\u0002\u0002\u0002",
    "R\u0249\u0003\u0002\u0002\u0002T\u0252\u0003\u0002\u0002\u0002V\u0254",
    "\u0003\u0002\u0002\u0002X\u0256\u0003\u0002\u0002\u0002Z\u025a\u0003",
    "\u0002\u0002\u0002\\\u0268\u0003\u0002\u0002\u0002^\u026c\u0003\u0002",
    "\u0002\u0002`\u0276\u0003\u0002\u0002\u0002b\u0278\u0003\u0002\u0002",
    "\u0002d\u0282\u0003\u0002\u0002\u0002f\u0284\u0003\u0002\u0002\u0002",
    "h\u0286\u0003\u0002\u0002\u0002j\u0289\u0003\u0002\u0002\u0002l\u02ae",
    "\u0003\u0002\u0002\u0002n\u02b6\u0003\u0002\u0002\u0002p\u02b8\u0003",
    "\u0002\u0002\u0002r\u02c4\u0003\u0002\u0002\u0002t\u02c6\u0003\u0002",
    "\u0002\u0002v\u02cc\u0003\u0002\u0002\u0002x\u02d5\u0003\u0002\u0002",
    "\u0002z\u02d9\u0003\u0002\u0002\u0002|\u02db\u0003\u0002\u0002\u0002",
    "~\u02de\u0003\u0002\u0002\u0002\u0080\u02e2\u0003\u0002\u0002\u0002",
    "\u0082\u02f4\u0003\u0002\u0002\u0002\u0084\u02f6\u0003\u0002\u0002\u0002",
    "\u0086\u0301\u0003\u0002\u0002\u0002\u0088\u0305\u0003\u0002\u0002\u0002",
    "\u008a\u030e\u0003\u0002\u0002\u0002\u008c\u0310\u0003\u0002\u0002\u0002",
    "\u008e\u0315\u0003\u0002\u0002\u0002\u0090\u0317\u0003\u0002\u0002\u0002",
    "\u0092\u0320\u0003\u0002\u0002\u0002\u0094\u0323\u0003\u0002\u0002\u0002",
    "\u0096\u032c\u0003\u0002\u0002\u0002\u0098\u032e\u0003\u0002\u0002\u0002",
    "\u009a\u0330\u0003\u0002\u0002\u0002\u009c\u0334\u0003\u0002\u0002\u0002",
    "\u009e\u0336\u0003\u0002\u0002\u0002\u00a0\u034d\u0003\u0002\u0002\u0002",
    "\u00a2\u034f\u0003\u0002\u0002\u0002\u00a4\u0355\u0003\u0002\u0002\u0002",
    "\u00a6\u035e\u0003\u0002\u0002\u0002\u00a8\u0360\u0003\u0002\u0002\u0002",
    "\u00aa\u0369\u0003\u0002\u0002\u0002\u00ac\u036b\u0003\u0002\u0002\u0002",
    "\u00ae\u036e\u0003\u0002\u0002\u0002\u00b0\u0374\u0003\u0002\u0002\u0002",
    "\u00b2\u0389\u0003\u0002\u0002\u0002\u00b4\u038b\u0003\u0002\u0002\u0002",
    "\u00b6\u038f\u0003\u0002\u0002\u0002\u00b8\u0399\u0003\u0002\u0002\u0002",
    "\u00ba\u03a3\u0003\u0002\u0002\u0002\u00bc\u03a5\u0003\u0002\u0002\u0002",
    "\u00be\u03ad\u0003\u0002\u0002\u0002\u00c0\u03b6\u0003\u0002\u0002\u0002",
    "\u00c2\u03b8\u0003\u0002\u0002\u0002\u00c4\u03c8\u0003\u0002\u0002\u0002",
    "\u00c6\u03ca\u0003\u0002\u0002\u0002\u00c8\u03d2\u0003\u0002\u0002\u0002",
    "\u00ca\u03d4\u0003\u0002\u0002\u0002\u00cc\u03e7\u0003\u0002\u0002\u0002",
    "\u00ce\u03f9\u0003\u0002\u0002\u0002\u00d0\u03fb\u0003\u0002\u0002\u0002",
    "\u00d2\u0403\u0003\u0002\u0002\u0002\u00d4\u0406\u0003\u0002\u0002\u0002",
    "\u00d6\u0408\u0003\u0002\u0002\u0002\u00d8\u0411\u0003\u0002\u0002\u0002",
    "\u00da\u0413\u0003\u0002\u0002\u0002\u00dc\u0417\u0003\u0002\u0002\u0002",
    "\u00de\u0429\u0003\u0002\u0002\u0002\u00e0\u042d\u0003\u0002\u0002\u0002",
    "\u00e2\u042f\u0003\u0002\u0002\u0002\u00e4\u0433\u0003\u0002\u0002\u0002",
    "\u00e6\u0436\u0003\u0002\u0002\u0002\u00e8\u043a\u0003\u0002\u0002\u0002",
    "\u00ea\u043f\u0003\u0002\u0002\u0002\u00ec\u0449\u0003\u0002\u0002\u0002",
    "\u00ee\u044b\u0003\u0002\u0002\u0002\u00f0\u0455\u0003\u0002\u0002\u0002",
    "\u00f2\u0457\u0003\u0002\u0002\u0002\u00f4\u045c\u0003\u0002\u0002\u0002",
    "\u00f6\u045e\u0003\u0002\u0002\u0002\u00f8\u0466\u0003\u0002\u0002\u0002",
    "\u00fa\u0469\u0003\u0002\u0002\u0002\u00fc\u046e\u0003\u0002\u0002\u0002",
    "\u00fe\u047a\u0003\u0002\u0002\u0002\u0100\u047c\u0003\u0002\u0002\u0002",
    "\u0102\u0487\u0003\u0002\u0002\u0002\u0104\u0489\u0003\u0002\u0002\u0002",
    "\u0106\u0491\u0003\u0002\u0002\u0002\u0108\u0493\u0003\u0002\u0002\u0002",
    "\u010a\u0497\u0003\u0002\u0002\u0002\u010c\u049c\u0003\u0002\u0002\u0002",
    "\u010e\u04a9\u0003\u0002\u0002\u0002\u0110\u04ab\u0003\u0002\u0002\u0002",
    "\u0112\u04b4\u0003\u0002\u0002\u0002\u0114\u04b6\u0003\u0002\u0002\u0002",
    "\u0116\u04b8\u0003\u0002\u0002\u0002\u0118\u04bf\u0003\u0002\u0002\u0002",
    "\u011a\u04c7\u0003\u0002\u0002\u0002\u011c\u04ca\u0003\u0002\u0002\u0002",
    "\u011e\u04e1\u0003\u0002\u0002\u0002\u0120\u04e7\u0003\u0002\u0002\u0002",
    "\u0122\u04e9\u0003\u0002\u0002\u0002\u0124\u04f1\u0003\u0002\u0002\u0002",
    "\u0126\u04f4\u0003\u0002\u0002\u0002\u0128\u04fd\u0003\u0002\u0002\u0002",
    "\u012a\u0505\u0003\u0002\u0002\u0002\u012c\u050d\u0003\u0002\u0002\u0002",
    "\u012e\u0130\u0005\u0004\u0003\u0002\u012f\u012e\u0003\u0002\u0002\u0002",
    "\u0130\u0131\u0003\u0002\u0002\u0002\u0131\u012f\u0003\u0002\u0002\u0002",
    "\u0131\u0132\u0003\u0002\u0002\u0002\u0132\u0003\u0003\u0002\u0002\u0002",
    "\u0133\u013f\u0007m\u0002\u0002\u0134\u013b\u0007\u0018\u0002\u0002",
    "\u0135\u0136\u0007m\u0002\u0002\u0136\u0137\u0007\u001b\u0002\u0002",
    "\u0137\u0138\u0007g\u0002\u0002\u0138\u013a\u0007\u001c\u0002\u0002",
    "\u0139\u0135\u0003\u0002\u0002\u0002\u013a\u013d\u0003\u0002\u0002\u0002",
    "\u013b\u0139\u0003\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002",
    "\u013c\u013e\u0003\u0002\u0002\u0002\u013d\u013b\u0003\u0002\u0002\u0002",
    "\u013e\u0140\u0007\u0019\u0002\u0002\u013f\u0134\u0003\u0002\u0002\u0002",
    "\u013f\u0140\u0003\u0002\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u0007O\u0002\u0002\u0142\u0143\u0005\u0006\u0004\u0002",
    "\u0143\u0144\u0005\b\u0005\u0002\u0144\u0145\u0007\b\u0002\u0002\u0145",
    "\u0146\u0007P\u0002\u0002\u0146\u0147\u0005\n\u0006\u0002\u0147\u0148",
    "\u0007Q\u0002\u0002\u0148\u0005\u0003\u0002\u0002\u0002\u0149\u014a",
    "\t\u0002\u0002\u0002\u014a\u014c\u0007L\u0002\u0002\u014b\u0149\u0003",
    "\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u0007\u0003",
    "\u0002\u0002\u0002\u014d\u014e\u0007I\u0002\u0002\u014e\u0150\u0007",
    "J\u0002\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f\u0150\u0003",
    "\u0002\u0002\u0002\u0150\t\u0003\u0002\u0002\u0002\u0151\u0152\u0005",
    "\f\u0007\u0002\u0152\u0153\u0005\u0010\t\u0002\u0153\u0154\u0005 \u0011",
    "\u0002\u0154\u0156\u0003\u0002\u0002\u0002\u0155\u0151\u0003\u0002\u0002",
    "\u0002\u0155\u0156\u0003\u0002\u0002\u0002\u0156\u000b\u0003\u0002\u0002",
    "\u0002\u0157\u0158\u0007H\u0002\u0002\u0158\u0159\u0005\u000e\b\u0002",
    "\u0159\u015a\u0007F\u0002\u0002\u015a\u015f\u0003\u0002\u0002\u0002",
    "\u015b\u015c\u0007H\u0002\u0002\u015c\u015d\u0007.\u0002\u0002\u015d",
    "\u015f\u0007F\u0002\u0002\u015e\u0157\u0003\u0002\u0002\u0002\u015e",
    "\u015b\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f",
    "\r\u0003\u0002\u0002\u0002\u0160\u0162\u0005\u001c\u000f\u0002\u0161",
    "\u0160\u0003\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162",
    "\u000f\u0003\u0002\u0002\u0002\u0163\u0164\u0007G\u0002\u0002\u0164",
    "\u0165\u0005\u0012\n\u0002\u0165\u0166\u0007F\u0002\u0002\u0166\u0168",
    "\u0003\u0002\u0002\u0002\u0167\u0163\u0003\u0002\u0002\u0002\u0167\u0168",
    "\u0003\u0002\u0002\u0002\u0168\u0011\u0003\u0002\u0002\u0002\u0169\u016b",
    "\u0005\u0014\u000b\u0002\u016a\u0169\u0003\u0002\u0002\u0002\u016a\u016b",
    "\u0003\u0002\u0002\u0002\u016b\u0013\u0003\u0002\u0002\u0002\u016c\u0170",
    "\u0005\u0016\f\u0002\u016d\u016f\u0005\u0016\f\u0002\u016e\u016d\u0003",
    "\u0002\u0002\u0002\u016f\u0172\u0003\u0002\u0002\u0002\u0170\u016e\u0003",
    "\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002\u0171\u0015\u0003",
    "\u0002\u0002\u0002\u0172\u0170\u0003\u0002\u0002\u0002\u0173\u0174\u0005",
    "\u001c\u000f\u0002\u0174\u0175\u00078\u0002\u0002\u0175\u0176\u0005",
    "\u0018\r\u0002\u0176\u0017\u0003\u0002\u0002\u0002\u0177\u0178\u0007",
    "m\u0002\u0002\u0178\u0179\u0005\u001a\u000e\u0002\u0179\u0019\u0003",
    "\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002\u0002\u017b\u001b\u0003",
    "\u0002\u0002\u0002\u017c\u0181\u0005\u001e\u0010\u0002\u017d\u017e\u0007",
    "\u001a\u0002\u0002\u017e\u0180\u0005\u001e\u0010\u0002\u017f\u017d\u0003",
    "\u0002\u0002\u0002\u0180\u0183\u0003\u0002\u0002\u0002\u0181\u017f\u0003",
    "\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u001d\u0003",
    "\u0002\u0002\u0002\u0183\u0181\u0003\u0002\u0002\u0002\u0184\u0187\u0007",
    "m\u0002\u0002\u0185\u0186\u0007\u0018\u0002\u0002\u0186\u0188\u0007",
    "\u0019\u0002\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0187\u0188\u0003",
    "\u0002\u0002\u0002\u0188\u001f\u0003\u0002\u0002\u0002\u0189\u018d\u0005",
    "\"\u0012\u0002\u018a\u018c\u0005\"\u0012\u0002\u018b\u018a\u0003\u0002",
    "\u0002\u0002\u018c\u018f\u0003\u0002\u0002\u0002\u018d\u018b\u0003\u0002",
    "\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e!\u0003\u0002",
    "\u0002\u0002\u018f\u018d\u0003\u0002\u0002\u0002\u0190\u0195\u0007m",
    "\u0002\u0002\u0191\u0196\u0005\u00aeX\u0002\u0192\u0196\u0005\u00ac",
    "W\u0002\u0193\u0196\u0005F$\u0002\u0194\u0196\u0005P)\u0002\u0195\u0191",
    "\u0003\u0002\u0002\u0002\u0195\u0192\u0003\u0002\u0002\u0002\u0195\u0193",
    "\u0003\u0002\u0002\u0002\u0195\u0194\u0003\u0002\u0002\u0002\u0196#",
    "\u0003\u0002\u0002\u0002\u0197\u0198\u0007\'\u0002\u0002\u0198\u019d",
    "\u0007\u0018\u0002\u0002\u0199\u019a\u0005&\u0014\u0002\u019a\u019b",
    "\u0005(\u0015\u0002\u019b\u019e\u0003\u0002\u0002\u0002\u019c\u019e",
    "\u0005*\u0016\u0002\u019d\u0199\u0003\u0002\u0002\u0002\u019d\u019c",
    "\u0003\u0002\u0002\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019e\u019f",
    "\u0003\u0002\u0002\u0002\u019f\u01a0\u0007\u0019\u0002\u0002\u01a0%",
    "\u0003\u0002\u0002\u0002\u01a1\u01a3\u0007\u000e\u0002\u0002\u01a2\u01a4",
    "\u0005\u0110\u0089\u0002\u01a3\u01a2\u0003\u0002\u0002\u0002\u01a3\u01a4",
    "\u0003\u0002\u0002\u0002\u01a4\'\u0003\u0002\u0002\u0002\u01a5\u01a6",
    "\u0007\u001a\u0002\u0002\u01a6\u01a8\u0007\u000e\u0002\u0002\u01a7\u01a5",
    "\u0003\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8)",
    "\u0003\u0002\u0002\u0002\u01a9\u01ba\u0005,\u0017\u0002\u01aa\u01bb",
    "\u00052\u001a\u0002\u01ab\u01ad\u0007\u001a\u0002\u0002\u01ac\u01ae",
    "\u00052\u001a\u0002\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ad\u01ae",
    "\u0003\u0002\u0002\u0002\u01ae\u01af\u0003\u0002\u0002\u0002\u01af\u01b0",
    "\u0005&\u0014\u0002\u01b0\u01b8\u00058\u001d\u0002\u01b1\u01b9\u0005",
    "(\u0015\u0002\u01b2\u01b3\u0007f\u0002\u0002\u01b3\u01b4\u0007\u001a",
    "\u0002\u0002\u01b4\u01b6\u0005,\u0017\u0002\u01b5\u01b7\u00052\u001a",
    "\u0002\u01b6\u01b5\u0003\u0002\u0002\u0002\u01b6\u01b7\u0003\u0002\u0002",
    "\u0002\u01b7\u01b9\u0003\u0002\u0002\u0002\u01b8\u01b1\u0003\u0002\u0002",
    "\u0002\u01b8\u01b2\u0003\u0002\u0002\u0002\u01b9\u01bb\u0003\u0002\u0002",
    "\u0002\u01ba\u01aa\u0003\u0002\u0002\u0002\u01ba\u01ab\u0003\u0002\u0002",
    "\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb\u01c8\u0003\u0002\u0002",
    "\u0002\u01bc\u01bd\u0005&\u0014\u0002\u01bd\u01c5\u00058\u001d\u0002",
    "\u01be\u01c6\u0005(\u0015\u0002\u01bf\u01c0\u0007f\u0002\u0002\u01c0",
    "\u01c1\u0007\u001a\u0002\u0002\u01c1\u01c3\u0005,\u0017\u0002\u01c2",
    "\u01c4\u00052\u001a\u0002\u01c3\u01c2\u0003\u0002\u0002\u0002\u01c3",
    "\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c6\u0003\u0002\u0002\u0002\u01c5",
    "\u01be\u0003\u0002\u0002\u0002\u01c5\u01bf\u0003\u0002\u0002\u0002\u01c6",
    "\u01c8\u0003\u0002\u0002\u0002\u01c7\u01a9\u0003\u0002\u0002\u0002\u01c7",
    "\u01bc\u0003\u0002\u0002\u0002\u01c8+\u0003\u0002\u0002\u0002\u01c9",
    "\u01ca\u0005.\u0018\u0002\u01ca-\u0003\u0002\u0002\u0002\u01cb\u01d3",
    "\u00050\u0019\u0002\u01cc\u01ce\u0007\u001a\u0002\u0002\u01cd\u01cf",
    "\u00052\u001a\u0002\u01ce\u01cd\u0003\u0002\u0002\u0002\u01ce\u01cf",
    "\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d2",
    "\u00050\u0019\u0002\u01d1\u01cc\u0003\u0002\u0002\u0002\u01d2\u01d5",
    "\u0003\u0002\u0002\u0002\u01d3\u01d1\u0003\u0002\u0002\u0002\u01d3\u01d4",
    "\u0003\u0002\u0002\u0002\u01d4/\u0003\u0002\u0002\u0002\u01d5\u01d3",
    "\u0003\u0002\u0002\u0002\u01d6\u01da\u0005\u00f8}\u0002\u01d7\u01db",
    "\u0007(\u0002\u0002\u01d8\u01d9\u0007)\u0002\u0002\u01d9\u01db\u0005",
    "\u00d6l\u0002\u01da\u01d7\u0003\u0002\u0002\u0002\u01da\u01d8\u0003",
    "\u0002\u0002\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01db\u01e0\u0003",
    "\u0002\u0002\u0002\u01dc\u01dd\u0007*\u0002\u0002\u01dd\u01de\u0007",
    "+\u0002\u0002\u01de\u01e0\u0005\u00b0Y\u0002\u01df\u01d6\u0003\u0002",
    "\u0002\u0002\u01df\u01dc\u0003\u0002\u0002\u0002\u01e01\u0003\u0002",
    "\u0002\u0002\u01e1\u01e5\u00054\u001b\u0002\u01e2\u01e5\u00056\u001c",
    "\u0002\u01e3\u01e5\u0007\u0005\u0002\u0002\u01e4\u01e1\u0003\u0002\u0002",
    "\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e3\u0003\u0002\u0002",
    "\u0002\u01e53\u0003\u0002\u0002\u0002\u01e6\u01e7\u0007\u0003\u0002",
    "\u0002\u01e7\u01e8\u0007m\u0002\u0002\u01e85\u0003\u0002\u0002\u0002",
    "\u01e9\u01ea\u0007\u0004\u0002\u0002\u01ea\u01eb\u0007m\u0002\u0002",
    "\u01eb7\u0003\u0002\u0002\u0002\u01ec\u01ed\u0007\u001a\u0002\u0002",
    "\u01ed\u01ef\u0005:\u001e\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002",
    "\u01ee\u01ef\u0003\u0002\u0002\u0002\u01ef9\u0003\u0002\u0002\u0002",
    "\u01f0\u01f5\u0005<\u001f\u0002\u01f1\u01f2\u0007\u001a\u0002\u0002",
    "\u01f2\u01f4\u0005<\u001f\u0002\u01f3\u01f1\u0003\u0002\u0002\u0002",
    "\u01f4\u01f7\u0003\u0002\u0002\u0002\u01f5\u01f3\u0003\u0002\u0002\u0002",
    "\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6;\u0003\u0002\u0002\u0002",
    "\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f8\u01fb\u00050\u0019\u0002",
    "\u01f9\u01fb\u0005> \u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fa",
    "\u01f9\u0003\u0002\u0002\u0002\u01fb=\u0003\u0002\u0002\u0002\u01fc",
    "\u01fd\u0007R\u0002\u0002\u01fd\u01fe\u0005@!\u0002\u01fe\u0200\u0005",
    ".\u0018\u0002\u01ff\u0201\u00052\u001a\u0002\u0200\u01ff\u0003\u0002",
    "\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002",
    "\u0002\u0002\u0202\u0203\u0007S\u0002\u0002\u0203?\u0003\u0002\u0002",
    "\u0002\u0204\u0205\u0007g\u0002\u0002\u0205\u0207\u0007T\u0002\u0002",
    "\u0206\u0204\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002",
    "\u0207A\u0003\u0002\u0002\u0002\u0208\u0210\u0007\'\u0002\u0002\u0209",
    "\u020c\u0007\u001b\u0002\u0002\u020a\u020d\u0005\u00be`\u0002\u020b",
    "\u020d\u0005D#\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020c\u020b",
    "\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020f",
    "\u0007\u001c\u0002\u0002\u020f\u0211\u0003\u0002\u0002\u0002\u0210\u0209",
    "\u0003\u0002\u0002\u0002\u0210\u0211\u0003\u0002\u0002\u0002\u0211\u0212",
    "\u0003\u0002\u0002\u0002\u0212\u0215\u0007+\u0002\u0002\u0213\u0216",
    "\u0005\u00b0Y\u0002\u0214\u0216\u0005\u00f8}\u0002\u0215\u0213\u0003",
    "\u0002\u0002\u0002\u0215\u0214\u0003\u0002\u0002\u0002\u0216C\u0003",
    "\u0002\u0002\u0002\u0217\u0218\u00077\u0002\u0002\u0218\u0219\u0005",
    "\u00be`\u0002\u0219E\u0003\u0002\u0002\u0002\u021a\u021b\u0005H%\u0002",
    "\u021b\u021f\u0007\b\u0002\u0002\u021c\u0220\u0005\u00b0Y\u0002\u021d",
    "\u0220\u0005\u00d6l\u0002\u021e\u0220\u0005\u0086D\u0002\u021f\u021c",
    "\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u021f\u021e",
    "\u0003\u0002\u0002\u0002\u0220\u0229\u0003\u0002\u0002\u0002\u0221\u0222",
    "\u0005T+\u0002\u0222\u0226\u0007\b\u0002\u0002\u0223\u0227\u0005z>\u0002",
    "\u0224\u0227\u0005R*\u0002\u0225\u0227\u0005\u0080A\u0002\u0226\u0223",
    "\u0003\u0002\u0002\u0002\u0226\u0224\u0003\u0002\u0002\u0002\u0226\u0225",
    "\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002\u0002\u0228\u021a",
    "\u0003\u0002\u0002\u0002\u0228\u0221\u0003\u0002\u0002\u0002\u0229G",
    "\u0003\u0002\u0002\u0002\u022a\u022b\u0007\u0018\u0002\u0002\u022b\u0230",
    "\u0005J&\u0002\u022c\u022d\u0007\u001a\u0002\u0002\u022d\u022f\u0005",
    "J&\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022f\u0232\u0003\u0002",
    "\u0002\u0002\u0230\u022e\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002",
    "\u0002\u0002\u0231\u0233\u0003\u0002\u0002\u0002\u0232\u0230\u0003\u0002",
    "\u0002\u0002\u0233\u0234\u0007\u0019\u0002\u0002\u0234I\u0003\u0002",
    "\u0002\u0002\u0235\u0236\u0005L\'\u0002\u0236\u0237\u0007T\u0002\u0002",
    "\u0237\u0239\u0003\u0002\u0002\u0002\u0238\u0235\u0003\u0002\u0002\u0002",
    "\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u023a\u0003\u0002\u0002\u0002",
    "\u023a\u023b\u0007m\u0002\u0002\u023bK\u0003\u0002\u0002\u0002\u023c",
    "\u023f\u0005N(\u0002\u023d\u023f\u0007m\u0002\u0002\u023e\u023c\u0003",
    "\u0002\u0002\u0002\u023e\u023d\u0003\u0002\u0002\u0002\u023fM\u0003",
    "\u0002\u0002\u0002\u0240\u0243\u0005\u00b0Y\u0002\u0241\u0243\u0005",
    "T+\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0242\u0241\u0003\u0002",
    "\u0002\u0002\u0243O\u0003\u0002\u0002\u0002\u0244\u0245\u0007\b\u0002",
    "\u0002\u0245\u0246\u0005R*\u0002\u0246Q\u0003\u0002\u0002\u0002\u0247",
    "\u024a\u0005T+\u0002\u0248\u024a\u0005Z.\u0002\u0249\u0247\u0003\u0002",
    "\u0002\u0002\u0249\u0248\u0003\u0002\u0002\u0002\u024aS\u0003\u0002",
    "\u0002\u0002\u024b\u024c\u0007m\u0002\u0002\u024c\u024e\u0007\f\u0002",
    "\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002\u0002",
    "\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0253\u0007m\u0002",
    "\u0002\u0250\u0253\u0007>\u0002\u0002\u0251\u0253\u0007?\u0002\u0002",
    "\u0252\u024d\u0003\u0002\u0002\u0002\u0252\u0250\u0003\u0002\u0002\u0002",
    "\u0252\u0251\u0003\u0002\u0002\u0002\u0253U\u0003\u0002\u0002\u0002",
    "\u0254\u0255\t\u0003\u0002\u0002\u0255W\u0003\u0002\u0002\u0002\u0256",
    "\u0257\u0007m\u0002\u0002\u0257\u0258\u0007\f\u0002\u0002\u0258\u0259",
    "\u0007m\u0002\u0002\u0259Y\u0003\u0002\u0002\u0002\u025a\u025b\u0007",
    "@\u0002\u0002\u025b\u025c\u0007\u0018\u0002\u0002\u025c\u0261\u0005",
    "j6\u0002\u025d\u025e\u0007\u001a\u0002\u0002\u025e\u0260\u0005j6\u0002",
    "\u025f\u025d\u0003\u0002\u0002\u0002\u0260\u0263\u0003\u0002\u0002\u0002",
    "\u0261\u025f\u0003\u0002\u0002\u0002\u0261\u0262\u0003\u0002\u0002\u0002",
    "\u0262\u0264\u0003\u0002\u0002\u0002\u0263\u0261\u0003\u0002\u0002\u0002",
    "\u0264\u0266\u0007\u0019\u0002\u0002\u0265\u0267\u0005\\/\u0002\u0266",
    "\u0265\u0003\u0002\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002\u0267",
    "[\u0003\u0002\u0002\u0002\u0268\u0269\u00079\u0002\u0002\u0269\u026a",
    "\u0007B\u0002\u0002\u026a\u026b\u0005^0\u0002\u026b]\u0003\u0002\u0002",
    "\u0002\u026c\u026e\u0007\u0018\u0002\u0002\u026d\u026f\u0005`1\u0002",
    "\u026e\u026d\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002\u0002",
    "\u0270\u026e\u0003\u0002\u0002\u0002\u0270\u0271\u0003\u0002\u0002\u0002",
    "\u0271\u0272\u0003\u0002\u0002\u0002\u0272\u0273\u0007\u0019\u0002\u0002",
    "\u0273_\u0003\u0002\u0002\u0002\u0274\u0277\u0005d3\u0002\u0275\u0277",
    "\u0005b2\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0276\u0275\u0003",
    "\u0002\u0002\u0002\u0277a\u0003\u0002\u0002\u0002\u0278\u027a\u0007",
    "C\u0002\u0002\u0279\u027b\u0005`1\u0002\u027a\u0279\u0003\u0002\u0002",
    "\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027a\u0003\u0002\u0002",
    "\u0002\u027c\u027d\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002\u0002",
    "\u0002\u027e\u027f\u0007D\u0002\u0002\u027fc\u0003\u0002\u0002\u0002",
    "\u0280\u0283\u0005f4\u0002\u0281\u0283\u0005h5\u0002\u0282\u0280\u0003",
    "\u0002\u0002\u0002\u0282\u0281\u0003\u0002\u0002\u0002\u0283e\u0003",
    "\u0002\u0002\u0002\u0284\u0285\t\u0004\u0002\u0002\u0285g\u0003\u0002",
    "\u0002\u0002\u0286\u0287\u0007\u0010\u0002\u0002\u0287\u0288\u0007m",
    "\u0002\u0002\u0288i\u0003\u0002\u0002\u0002\u0289\u028a\u0007\u0010",
    "\u0002\u0002\u028a\u02ac\u0007m\u0002\u0002\u028b\u028d\u0005n8\u0002",
    "\u028c\u028b\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002\u0002\u0002",
    "\u028d\u02ad\u0003\u0002\u0002\u0002\u028e\u0298\u0005\u00b0Y\u0002",
    "\u028f\u0291\u0005x=\u0002\u0290\u028f\u0003\u0002\u0002\u0002\u0290",
    "\u0291\u0003\u0002\u0002\u0002\u0291\u0299\u0003\u0002\u0002\u0002\u0292",
    "\u0294\u0007A\u0002\u0002\u0293\u0292\u0003\u0002\u0002\u0002\u0293",
    "\u0294\u0003\u0002\u0002\u0002\u0294\u0296\u0003\u0002\u0002\u0002\u0295",
    "\u0297\u0005r:\u0002\u0296\u0295\u0003\u0002\u0002\u0002\u0296\u0297",
    "\u0003\u0002\u0002\u0002\u0297\u0299\u0003\u0002\u0002\u0002\u0298\u0290",
    "\u0003\u0002\u0002\u0002\u0298\u0293\u0003\u0002\u0002\u0002\u0299\u02ad",
    "\u0003\u0002\u0002\u0002\u029a\u02a1\u0005\u0084C\u0002\u029b\u02a2",
    "\u0007(\u0002\u0002\u029c\u029f\u0007)\u0002\u0002\u029d\u02a0\u0005",
    "\u0086D\u0002\u029e\u02a0\u0005\u00d6l\u0002\u029f\u029d\u0003\u0002",
    "\u0002\u0002\u029f\u029e\u0003\u0002\u0002\u0002\u02a0\u02a2\u0003\u0002",
    "\u0002\u0002\u02a1\u029b\u0003\u0002\u0002\u0002\u02a1\u029c\u0003\u0002",
    "\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02ad\u0003\u0002",
    "\u0002\u0002\u02a3\u02aa\u0005T+\u0002\u02a4\u02ab\u0007(\u0002\u0002",
    "\u02a5\u02a8\u0007)\u0002\u0002\u02a6\u02a9\u0005\u0080A\u0002\u02a7",
    "\u02a9\u0005z>\u0002\u02a8\u02a6\u0003\u0002\u0002\u0002\u02a8\u02a7",
    "\u0003\u0002\u0002\u0002\u02a9\u02ab\u0003\u0002\u0002\u0002\u02aa\u02a4",
    "\u0003\u0002\u0002\u0002\u02aa\u02a5\u0003\u0002\u0002\u0002\u02aa\u02ab",
    "\u0003\u0002\u0002\u0002\u02ab\u02ad\u0003\u0002\u0002\u0002\u02ac\u028c",
    "\u0003\u0002\u0002\u0002\u02ac\u028e\u0003\u0002\u0002\u0002\u02ac\u029a",
    "\u0003\u0002\u0002\u0002\u02ac\u02a3\u0003\u0002\u0002\u0002\u02adk",
    "\u0003\u0002\u0002\u0002\u02ae\u02af\u0007\u0010\u0002\u0002\u02af\u02b1",
    "\u0007m\u0002\u0002\u02b0\u02b2\u0005n8\u0002\u02b1\u02b0\u0003\u0002",
    "\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2m\u0003\u0002",
    "\u0002\u0002\u02b3\u02b7\u0007(\u0002\u0002\u02b4\u02b5\u0007)\u0002",
    "\u0002\u02b5\u02b7\u0005\u00b0Y\u0002\u02b6\u02b3\u0003\u0002\u0002",
    "\u0002\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b7o\u0003\u0002\u0002",
    "\u0002\u02b8\u02b9\u0007\u0010\u0002\u0002\u02b9\u02ba\u0007m\u0002",
    "\u0002\u02ba\u02bc\u0005\u00b0Y\u0002\u02bb\u02bd\u0007A\u0002\u0002",
    "\u02bc\u02bb\u0003\u0002\u0002\u0002\u02bc\u02bd\u0003\u0002\u0002\u0002",
    "\u02bd\u02bf\u0003\u0002\u0002\u0002\u02be\u02c0\u0005r:\u0002\u02bf",
    "\u02be\u0003\u0002\u0002\u0002\u02bf\u02c0\u0003\u0002\u0002\u0002\u02c0",
    "q\u0003\u0002\u0002\u0002\u02c1\u02c5\u0007(\u0002\u0002\u02c2\u02c3",
    "\u0007)\u0002\u0002\u02c3\u02c5\u0005\u00d6l\u0002\u02c4\u02c1\u0003",
    "\u0002\u0002\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c5s\u0003",
    "\u0002\u0002\u0002\u02c6\u02c7\u0007\u0010\u0002\u0002\u02c7\u02c8\u0007",
    "m\u0002\u0002\u02c8\u02ca\u0005\u0084C\u0002\u02c9\u02cb\u0005r:\u0002",
    "\u02ca\u02c9\u0003\u0002\u0002\u0002\u02ca\u02cb\u0003\u0002\u0002\u0002",
    "\u02cbu\u0003\u0002\u0002\u0002\u02cc\u02cd\u0007\u0010\u0002\u0002",
    "\u02cd\u02ce\u0007m\u0002\u0002\u02ce\u02d0\u0005\u00b0Y\u0002\u02cf",
    "\u02d1\u0005x=\u0002\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d0\u02d1",
    "\u0003\u0002\u0002\u0002\u02d1w\u0003\u0002\u0002\u0002\u02d2\u02d6",
    "\u0007(\u0002\u0002\u02d3\u02d4\u0007)\u0002\u0002\u02d4\u02d6\u0005",
    "\u0086D\u0002\u02d5\u02d2\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003",
    "\u0002\u0002\u0002\u02d6y\u0003\u0002\u0002\u0002\u02d7\u02da\u0005",
    "~@\u0002\u02d8\u02da\u0005|?\u0002\u02d9\u02d7\u0003\u0002\u0002\u0002",
    "\u02d9\u02d8\u0003\u0002\u0002\u0002\u02da{\u0003\u0002\u0002\u0002",
    "\u02db\u02dc\u0005~@\u0002\u02dc\u02dd\u0005\u010c\u0087\u0002\u02dd",
    "}\u0003\u0002\u0002\u0002\u02de\u02e0\u0007m\u0002\u0002\u02df\u02e1",
    "\u0007\f\u0002\u0002\u02e0\u02df\u0003\u0002\u0002\u0002\u02e0\u02e1",
    "\u0003\u0002\u0002\u0002\u02e1\u007f\u0003\u0002\u0002\u0002\u02e2\u02e3",
    "\u0007\u0018\u0002\u0002\u02e3\u02e4\u0005\u0082B\u0002\u02e4\u02e5",
    "\u0007\u0019\u0002\u0002\u02e5\u0081\u0003\u0002\u0002\u0002\u02e6\u02ed",
    "\u0005\u008aF\u0002\u02e7\u02e8\u0007\u001a\u0002\u0002\u02e8\u02eb",
    "\u0007\u000e\u0002\u0002\u02e9\u02ea\u0007\u001a\u0002\u0002\u02ea\u02ec",
    "\u0005\u008cG\u0002\u02eb\u02e9\u0003\u0002\u0002\u0002\u02eb\u02ec",
    "\u0003\u0002\u0002\u0002\u02ec\u02ee\u0003\u0002\u0002\u0002\u02ed\u02e7",
    "\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02f5",
    "\u0003\u0002\u0002\u0002\u02ef\u02f2\u0007\u000e\u0002\u0002\u02f0\u02f1",
    "\u0007\u001a\u0002\u0002\u02f1\u02f3\u0005\u008cG\u0002\u02f2\u02f0",
    "\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f5",
    "\u0003\u0002\u0002\u0002\u02f4\u02e6\u0003\u0002\u0002\u0002\u02f4\u02ef",
    "\u0003\u0002\u0002\u0002\u02f5\u0083\u0003\u0002\u0002\u0002\u02f6\u02f7",
    "\u0007\u0010\u0002\u0002\u02f7\u02f8\u0007m\u0002\u0002\u02f8\u02fe",
    "\u0003\u0002\u0002\u0002\u02f9\u02fa\u0007\u0010\u0002\u0002\u02fa\u02fb",
    "\u0007m\u0002\u0002\u02fb\u02fd\u0007\f\u0002\u0002\u02fc\u02f9\u0003",
    "\u0002\u0002\u0002\u02fd\u0300\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003",
    "\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002\u02ff\u0085\u0003",
    "\u0002\u0002\u0002\u0300\u02fe\u0003\u0002\u0002\u0002\u0301\u0302\u0007",
    "\u0018\u0002\u0002\u0302\u0303\u0005\u0088E\u0002\u0303\u0304\u0007",
    "\u0019\u0002\u0002\u0304\u0087\u0003\u0002\u0002\u0002\u0305\u030c\u0005",
    "\u008aF\u0002\u0306\u0307\u0007\u001a\u0002\u0002\u0307\u030a\u0007",
    "\u000e\u0002\u0002\u0308\u0309\u0007\u001a\u0002\u0002\u0309\u030b\u0005",
    "\u008cG\u0002\u030a\u0308\u0003\u0002\u0002\u0002\u030a\u030b\u0003",
    "\u0002\u0002\u0002\u030b\u030d\u0003\u0002\u0002\u0002\u030c\u0306\u0003",
    "\u0002\u0002\u0002\u030c\u030d\u0003\u0002\u0002\u0002\u030d\u0089\u0003",
    "\u0002\u0002\u0002\u030e\u030f\u0005\u008eH\u0002\u030f\u008b\u0003",
    "\u0002\u0002\u0002\u0310\u0311\u0005\u008eH\u0002\u0311\u008d\u0003",
    "\u0002\u0002\u0002\u0312\u0316\u0005\u0090I\u0002\u0313\u0314\u0007",
    ".\u0002\u0002\u0314\u0316\u0005\u0092J\u0002\u0315\u0312\u0003\u0002",
    "\u0002\u0002\u0315\u0313\u0003\u0002\u0002\u0002\u0316\u008f\u0003\u0002",
    "\u0002\u0002\u0317\u031d\u0005\u0094K\u0002\u0318\u0319\u0005\u0096",
    "L\u0002\u0319\u031a\u0005\u0094K\u0002\u031a\u031c\u0003\u0002\u0002",
    "\u0002\u031b\u0318\u0003\u0002\u0002\u0002\u031c\u031f\u0003\u0002\u0002",
    "\u0002\u031d\u031b\u0003\u0002\u0002\u0002\u031d\u031e\u0003\u0002\u0002",
    "\u0002\u031e\u0091\u0003\u0002\u0002\u0002\u031f\u031d\u0003\u0002\u0002",
    "\u0002\u0320\u0321\u0007/\u0002\u0002\u0321\u0322\u0005\u009aN\u0002",
    "\u0322\u0093\u0003\u0002\u0002\u0002\u0323\u0329\u0005\u009eP\u0002",
    "\u0324\u0325\u0005\u0098M\u0002\u0325\u0326\u0005\u009eP\u0002\u0326",
    "\u0328\u0003\u0002\u0002\u0002\u0327\u0324\u0003\u0002\u0002\u0002\u0328",
    "\u032b\u0003\u0002\u0002\u0002\u0329\u0327\u0003\u0002\u0002\u0002\u0329",
    "\u032a\u0003\u0002\u0002\u0002\u032a\u0095\u0003\u0002\u0002\u0002\u032b",
    "\u0329\u0003\u0002\u0002\u0002\u032c\u032d\t\u0005\u0002\u0002\u032d",
    "\u0097\u0003\u0002\u0002\u0002\u032e\u032f\t\u0006\u0002\u0002\u032f",
    "\u0099\u0003\u0002\u0002\u0002\u0330\u0331\u0005\u00a0Q\u0002\u0331",
    "\u009b\u0003\u0002\u0002\u0002\u0332\u0335\u0005z>\u0002\u0333\u0335",
    "\u0005~@\u0002\u0334\u0332\u0003\u0002\u0002\u0002\u0334\u0333\u0003",
    "\u0002\u0002\u0002\u0335\u009d\u0003\u0002\u0002\u0002\u0336\u0338\u0005",
    "\u009aN\u0002\u0337\u0339\u0005\u0092J\u0002\u0338\u0337\u0003\u0002",
    "\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002\u0339\u009f\u0003\u0002",
    "\u0002\u0002\u033a\u033d\u0005\u00d6l\u0002\u033b\u033d\u00075\u0002",
    "\u0002\u033c\u033a\u0003\u0002\u0002\u0002\u033c\u033b\u0003\u0002\u0002",
    "\u0002\u033d\u033f\u0003\u0002\u0002\u0002\u033e\u0340\u0007\u0011\u0002",
    "\u0002\u033f\u033e\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002",
    "\u0002\u0340\u0341\u0003\u0002\u0002\u0002\u0341\u0343\u0007\r\u0002",
    "\u0002\u0342\u0344\u0007\u0011\u0002\u0002\u0343\u0342\u0003\u0002\u0002",
    "\u0002\u0343\u0344\u0003\u0002\u0002\u0002\u0344\u0347\u0003\u0002\u0002",
    "\u0002\u0345\u0348\u0005\u00d6l\u0002\u0346\u0348\u00076\u0002\u0002",
    "\u0347\u0345\u0003\u0002\u0002\u0002\u0347\u0346\u0003\u0002\u0002\u0002",
    "\u0348\u034e\u0003\u0002\u0002\u0002\u0349\u034e\u0005D#\u0002\u034a",
    "\u034b\u0007=\u0002\u0002\u034b\u034e\u0005\u00d6l\u0002\u034c\u034e",
    "\u0005\u00d6l\u0002\u034d\u033c\u0003\u0002\u0002\u0002\u034d\u0349",
    "\u0003\u0002\u0002\u0002\u034d\u034a\u0003\u0002\u0002\u0002\u034d\u034c",
    "\u0003\u0002\u0002\u0002\u034e\u00a1\u0003\u0002\u0002\u0002\u034f\u0350",
    "\u0007\u0010\u0002\u0002\u0350\u0351\u0007m\u0002\u0002\u0351\u0353",
    "\u0005\u0084C\u0002\u0352\u0354\u0005x=\u0002\u0353\u0352\u0003\u0002",
    "\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354\u00a3\u0003\u0002",
    "\u0002\u0002\u0355\u0356\u0007\u0010\u0002\u0002\u0356\u0357\u0007m",
    "\u0002\u0002\u0357\u0359\u0005T+\u0002\u0358\u035a\u0005\u00a6T\u0002",
    "\u0359\u0358\u0003\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002",
    "\u035a\u00a5\u0003\u0002\u0002\u0002\u035b\u035f\u0007(\u0002\u0002",
    "\u035c\u035d\u0007)\u0002\u0002\u035d\u035f\u0005z>\u0002\u035e\u035b",
    "\u0003\u0002\u0002\u0002\u035e\u035c\u0003\u0002\u0002\u0002\u035f\u00a7",
    "\u0003\u0002\u0002\u0002\u0360\u0361\u0007\u0010\u0002\u0002\u0361\u0362",
    "\u0007m\u0002\u0002\u0362\u0364\u0005T+\u0002\u0363\u0365\u0005\u00aa",
    "V\u0002\u0364\u0363\u0003\u0002\u0002\u0002\u0364\u0365\u0003\u0002",
    "\u0002\u0002\u0365\u00a9\u0003\u0002\u0002\u0002\u0366\u036a\u0007(",
    "\u0002\u0002\u0367\u0368\u0007)\u0002\u0002\u0368\u036a\u0005\u0080",
    "A\u0002\u0369\u0366\u0003\u0002\u0002\u0002\u0369\u0367\u0003\u0002",
    "\u0002\u0002\u036a\u00ab\u0003\u0002\u0002\u0002\u036b\u036c\u0007\b",
    "\u0002\u0002\u036c\u036d\u0005\u00b0Y\u0002\u036d\u00ad\u0003\u0002",
    "\u0002\u0002\u036e\u036f\u0005\u00b0Y\u0002\u036f\u0370\u0007\b\u0002",
    "\u0002\u0370\u0371\u0005\u00d6l\u0002\u0371\u00af\u0003\u0002\u0002",
    "\u0002\u0372\u0375\u0005\u00b2Z\u0002\u0373\u0375\u0005\u00ba^\u0002",
    "\u0374\u0372\u0003\u0002\u0002\u0002\u0374\u0373\u0003\u0002\u0002\u0002",
    "\u0375\u0379\u0003\u0002\u0002\u0002\u0376\u0378\u0005\u00be`\u0002",
    "\u0377\u0376\u0003\u0002\u0002\u0002\u0378\u037b\u0003\u0002\u0002\u0002",
    "\u0379\u0377\u0003\u0002\u0002\u0002\u0379\u037a\u0003\u0002\u0002\u0002",
    "\u037a\u00b1\u0003\u0002\u0002\u0002\u037b\u0379\u0003\u0002\u0002\u0002",
    "\u037c\u038a\u0005\u0124\u0093\u0002\u037d\u038a\u0005\u0126\u0094\u0002",
    "\u037e\u038a\u0005\u00e8u\u0002\u037f\u038a\u0005\u00fa~\u0002\u0380",
    "\u038a\u0005\u0116\u008c\u0002\u0381\u038a\u0005$\u0013\u0002\u0382",
    "\u038a\u0005B\"\u0002\u0383\u038a\u0005\u00b6\\\u0002\u0384\u038a\u0005",
    "\u00b8]\u0002\u0385\u038a\u0005\u011a\u008e\u0002\u0386\u038a\u0005",
    "\u00b4[\u0002\u0387\u038a\u0007\t\u0002\u0002\u0388\u038a\u0007&\u0002",
    "\u0002\u0389\u037c\u0003\u0002\u0002\u0002\u0389\u037d\u0003\u0002\u0002",
    "\u0002\u0389\u037e\u0003\u0002\u0002\u0002\u0389\u037f\u0003\u0002\u0002",
    "\u0002\u0389\u0380\u0003\u0002\u0002\u0002\u0389\u0381\u0003\u0002\u0002",
    "\u0002\u0389\u0382\u0003\u0002\u0002\u0002\u0389\u0383\u0003\u0002\u0002",
    "\u0002\u0389\u0384\u0003\u0002\u0002\u0002\u0389\u0385\u0003\u0002\u0002",
    "\u0002\u0389\u0386\u0003\u0002\u0002\u0002\u0389\u0387\u0003\u0002\u0002",
    "\u0002\u0389\u0388\u0003\u0002\u0002\u0002\u038a\u00b3\u0003\u0002\u0002",
    "\u0002\u038b\u038c\u0005T+\u0002\u038c\u038d\u0007\f\u0002\u0002\u038d",
    "\u038e\u0005\u0084C\u0002\u038e\u00b5\u0003\u0002\u0002\u0002\u038f",
    "\u0390\u0007,\u0002\u0002\u0390\u0395\u0007\u0018\u0002\u0002\u0391",
    "\u0392\u0005&\u0014\u0002\u0392\u0393\u0005(\u0015\u0002\u0393\u0396",
    "\u0003\u0002\u0002\u0002\u0394\u0396\u0005*\u0016\u0002\u0395\u0391",
    "\u0003\u0002\u0002\u0002\u0395\u0394\u0003\u0002\u0002\u0002\u0395\u0396",
    "\u0003\u0002\u0002\u0002\u0396\u0397\u0003\u0002\u0002\u0002\u0397\u0398",
    "\u0007\u0019\u0002\u0002\u0398\u00b7\u0003\u0002\u0002\u0002\u0399\u039c",
    "\u0007,\u0002\u0002\u039a\u039d\u0005\u00be`\u0002\u039b\u039d\u0005",
    "D#\u0002\u039c\u039a\u0003\u0002\u0002\u0002\u039c\u039b\u0003\u0002",
    "\u0002\u0002\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002",
    "\u0002\u0002\u039e\u03a1\u0007+\u0002\u0002\u039f\u03a2\u0005\u00b0",
    "Y\u0002\u03a0\u03a2\u0005\u00f8}\u0002\u03a1\u039f\u0003\u0002\u0002",
    "\u0002\u03a1\u03a0\u0003\u0002\u0002\u0002\u03a2\u00b9\u0003\u0002\u0002",
    "\u0002\u03a3\u03a4\u0005\u00bc_\u0002\u03a4\u00bb\u0003\u0002\u0002",
    "\u0002\u03a5\u03a8\u0007m\u0002\u0002\u03a6\u03a7\u0007\f\u0002\u0002",
    "\u03a7\u03a9\u0007m\u0002\u0002\u03a8\u03a6\u0003\u0002\u0002\u0002",
    "\u03a8\u03a9\u0003\u0002\u0002\u0002\u03a9\u03ab\u0003\u0002\u0002\u0002",
    "\u03aa\u03ac\u0005\u010c\u0087\u0002\u03ab\u03aa\u0003\u0002\u0002\u0002",
    "\u03ab\u03ac\u0003\u0002\u0002\u0002\u03ac\u00bd\u0003\u0002\u0002\u0002",
    "\u03ad\u03ae\u0007\u001b\u0002\u0002\u03ae\u03b0\u0005\u00c0a\u0002",
    "\u03af\u03b1\u0005\u0110\u0089\u0002\u03b0\u03af\u0003\u0002\u0002\u0002",
    "\u03b0\u03b1\u0003\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002",
    "\u03b2\u03b3\u0007\u001c\u0002\u0002\u03b3\u00bf\u0003\u0002\u0002\u0002",
    "\u03b4\u03b7\u0005\u00c4c\u0002\u03b5\u03b7\u0005\u00d4k\u0002\u03b6",
    "\u03b4\u0003\u0002\u0002\u0002\u03b6\u03b5\u0003\u0002\u0002\u0002\u03b7",
    "\u00c1\u0003\u0002\u0002\u0002\u03b8\u03b9\u0007`\u0002\u0002\u03b9",
    "\u03ba\u0007a\u0002\u0002\u03ba\u03bb\u0007\u0018\u0002\u0002\u03bb",
    "\u03c0\u0005\u00c6d\u0002\u03bc\u03bd\u0007\u001a\u0002\u0002\u03bd",
    "\u03bf\u0005\u00c6d\u0002\u03be\u03bc\u0003\u0002\u0002\u0002\u03bf",
    "\u03c2\u0003\u0002\u0002\u0002\u03c0\u03be\u0003\u0002\u0002\u0002\u03c0",
    "\u03c1\u0003\u0002\u0002\u0002\u03c1\u03c3\u0003\u0002\u0002\u0002\u03c2",
    "\u03c0\u0003\u0002\u0002\u0002\u03c3\u03c4\u0007\u0019\u0002\u0002\u03c4",
    "\u00c3\u0003\u0002\u0002\u0002\u03c5\u03c9\u0005\u00c2b\u0002\u03c6",
    "\u03c9\u0005\u00c8e\u0002\u03c7\u03c9\u0005\u00ccg\u0002\u03c8\u03c5",
    "\u0003\u0002\u0002\u0002\u03c8\u03c6\u0003\u0002\u0002\u0002\u03c8\u03c7",
    "\u0003\u0002\u0002\u0002\u03c9\u00c5\u0003\u0002\u0002\u0002\u03ca\u03d0",
    "\u0005N(\u0002\u03cb\u03cc\u0007T\u0002\u0002\u03cc\u03d1\u0005\u00d6",
    "l\u0002\u03cd\u03d1\u0005\u0086D\u0002\u03ce\u03d1\u0005z>\u0002\u03cf",
    "\u03d1\u0005\u0080A\u0002\u03d0\u03cb\u0003\u0002\u0002\u0002\u03d0",
    "\u03cd\u0003\u0002\u0002\u0002\u03d0\u03ce\u0003\u0002\u0002\u0002\u03d0",
    "\u03cf\u0003\u0002\u0002\u0002\u03d0\u03d1\u0003\u0002\u0002\u0002\u03d1",
    "\u00c7\u0003\u0002\u0002\u0002\u03d2\u03d3\u0005\u011c\u008f\u0002\u03d3",
    "\u00c9\u0003\u0002\u0002\u0002\u03d4\u03d5\u0005\u0080A\u0002\u03d5",
    "\u00cb\u0003\u0002\u0002\u0002\u03d6\u03d7\u0007$\u0002\u0002\u03d7",
    "\u03e8\u0005\u00b0Y\u0002\u03d8\u03d9\u0007c\u0002\u0002\u03d9\u03da",
    "\u0007a\u0002\u0002\u03da\u03e8\u0005\u00d6l\u0002\u03db\u03dc\u0007",
    "$\u0002\u0002\u03dc\u03dd\u0005\u00b0Y\u0002\u03dd\u03de\u0007c\u0002",
    "\u0002\u03de\u03df\u0007a\u0002\u0002\u03df\u03e0\u0005\u00d6l\u0002",
    "\u03e0\u03e8\u0003\u0002\u0002\u0002\u03e1\u03e2\u00079\u0002\u0002",
    "\u03e2\u03e3\u0007*\u0002\u0002\u03e3\u03e4\u0007\u0018\u0002\u0002",
    "\u03e4\u03e5\u0005\u00ceh\u0002\u03e5\u03e6\u0007\u0019\u0002\u0002",
    "\u03e6\u03e8\u0003\u0002\u0002\u0002\u03e7\u03d6\u0003\u0002\u0002\u0002",
    "\u03e7\u03d8\u0003\u0002\u0002\u0002\u03e7\u03db\u0003\u0002\u0002\u0002",
    "\u03e7\u03e1\u0003\u0002\u0002\u0002\u03e8\u00cd\u0003\u0002\u0002\u0002",
    "\u03e9\u03eb\u0005\u00d0i\u0002\u03ea\u03e9\u0003\u0002\u0002\u0002",
    "\u03ea\u03eb\u0003\u0002\u0002\u0002\u03eb\u03f2\u0003\u0002\u0002\u0002",
    "\u03ec\u03ed\u0007\u001a\u0002\u0002\u03ed\u03f0\u0007\u000e\u0002\u0002",
    "\u03ee\u03ef\u0007\u001a\u0002\u0002\u03ef\u03f1\u0005\u00d0i\u0002",
    "\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002\u0002\u0002",
    "\u03f1\u03f3\u0003\u0002\u0002\u0002\u03f2\u03ec\u0003\u0002\u0002\u0002",
    "\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3\u03fa\u0003\u0002\u0002\u0002",
    "\u03f4\u03f7\u0007\u000e\u0002\u0002\u03f5\u03f6\u0007\u001a\u0002\u0002",
    "\u03f6\u03f8\u0005\u00d0i\u0002\u03f7\u03f5\u0003\u0002\u0002\u0002",
    "\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8\u03fa\u0003\u0002\u0002\u0002",
    "\u03f9\u03ea\u0003\u0002\u0002\u0002\u03f9\u03f4\u0003\u0002\u0002\u0002",
    "\u03fa\u00cf\u0003\u0002\u0002\u0002\u03fb\u0400\u0005\u00d2j\u0002",
    "\u03fc\u03fd\u0007\u001a\u0002\u0002\u03fd\u03ff\u0005\u00d2j\u0002",
    "\u03fe\u03fc\u0003\u0002\u0002\u0002\u03ff\u0402\u0003\u0002\u0002\u0002",
    "\u0400\u03fe\u0003\u0002\u0002\u0002\u0400\u0401\u0003\u0002\u0002\u0002",
    "\u0401\u00d1\u0003\u0002\u0002\u0002\u0402\u0400\u0003\u0002\u0002\u0002",
    "\u0403\u0404\u0007m\u0002\u0002\u0404\u0405\t\u0007\u0002\u0002\u0405",
    "\u00d3\u0003\u0002\u0002\u0002\u0406\u0407\u0005\u0088E\u0002\u0407",
    "\u00d5\u0003\u0002\u0002\u0002\u0408\u0409\u0005\u00d8m\u0002\u0409",
    "\u00d7\u0003\u0002\u0002\u0002\u040a\u0412\u0005\u00e4s\u0002\u040b",
    "\u0412\u0005\u00e0q\u0002\u040c\u0412\u0005\u00e2r\u0002\u040d\u0412",
    "\u0005\u00dan\u0002\u040e\u0412\u0005\u012c\u0097\u0002\u040f\u0412",
    "\u0007l\u0002\u0002\u0410\u0412\u0007j\u0002\u0002\u0411\u040a\u0003",
    "\u0002\u0002\u0002\u0411\u040b\u0003\u0002\u0002\u0002\u0411\u040c\u0003",
    "\u0002\u0002\u0002\u0411\u040d\u0003\u0002\u0002\u0002\u0411\u040e\u0003",
    "\u0002\u0002\u0002\u0411\u040f\u0003\u0002\u0002\u0002\u0411\u0410\u0003",
    "\u0002\u0002\u0002\u0412\u00d9\u0003\u0002\u0002\u0002\u0413\u0414\u0007",
    "\u0018\u0002\u0002\u0414\u0415\u0005\u00dco\u0002\u0415\u0416\u0007",
    "\u0019\u0002\u0002\u0416\u00db\u0003\u0002\u0002\u0002\u0417\u041b\u0005",
    "\u00dep\u0002\u0418\u041a\u0005\u00dep\u0002\u0419\u0418\u0003\u0002",
    "\u0002\u0002\u041a\u041d\u0003\u0002\u0002\u0002\u041b\u0419\u0003\u0002",
    "\u0002\u0002\u041b\u041c\u0003\u0002\u0002\u0002\u041c\u00dd\u0003\u0002",
    "\u0002\u0002\u041d\u041b\u0003\u0002\u0002\u0002\u041e\u042a\u0007g",
    "\u0002\u0002\u041f\u0426\u0007m\u0002\u0002\u0420\u0423\u0007\u001b",
    "\u0002\u0002\u0421\u0424\u0007g\u0002\u0002\u0422\u0424\u0005\u0106",
    "\u0084\u0002\u0423\u0421\u0003\u0002\u0002\u0002\u0423\u0422\u0003\u0002",
    "\u0002\u0002\u0424\u0425\u0003\u0002\u0002\u0002\u0425\u0427\u0007\u001c",
    "\u0002\u0002\u0426\u0420\u0003\u0002\u0002\u0002\u0426\u0427\u0003\u0002",
    "\u0002\u0002\u0427\u042a\u0003\u0002\u0002\u0002\u0428\u042a\u0005\u0106",
    "\u0084\u0002\u0429\u041e\u0003\u0002\u0002\u0002\u0429\u041f\u0003\u0002",
    "\u0002\u0002\u0429\u0428\u0003\u0002\u0002\u0002\u042a\u00df\u0003\u0002",
    "\u0002\u0002\u042b\u042e\u0005\u00e6t\u0002\u042c\u042e\u0007m\u0002",
    "\u0002\u042d\u042b\u0003\u0002\u0002\u0002\u042d\u042c\u0003\u0002\u0002",
    "\u0002\u042e\u00e1\u0003\u0002\u0002\u0002\u042f\u0430\u0007m\u0002",
    "\u0002\u0430\u0431\u0007T\u0002\u0002\u0431\u0432\u0005\u00d6l\u0002",
    "\u0432\u00e3\u0003\u0002\u0002\u0002\u0433\u0434\u0007m\u0002\u0002",
    "\u0434\u00e5\u0003\u0002\u0002\u0002\u0435\u0437\u0007\u001d\u0002\u0002",
    "\u0436\u0435\u0003\u0002\u0002\u0002\u0436\u0437\u0003\u0002\u0002\u0002",
    "\u0437\u0438\u0003\u0002\u0002\u0002\u0438\u0439\u0007g\u0002\u0002",
    "\u0439\u00e7\u0003\u0002\u0002\u0002\u043a\u043b\u0007U\u0002\u0002",
    "\u043b\u043c\u0007\u0018\u0002\u0002\u043c\u043d\u0005\u00eav\u0002",
    "\u043d\u043e\u0007\u0019\u0002\u0002\u043e\u00e9\u0003\u0002\u0002\u0002",
    "\u043f\u0445\u0005\u00f4{\u0002\u0440\u0441\u0007\u001a\u0002\u0002",
    "\u0441\u0442\u0005&\u0014\u0002\u0442\u0443\u0005\u00ecw\u0002\u0443",
    "\u0444\u0005(\u0015\u0002\u0444\u0446\u0003\u0002\u0002\u0002\u0445",
    "\u0440\u0003\u0002\u0002\u0002\u0445\u0446\u0003\u0002\u0002\u0002\u0446",
    "\u00eb\u0003\u0002\u0002\u0002\u0447\u0448\u0007\u001a\u0002\u0002\u0448",
    "\u044a\u0005\u00eex\u0002\u0449\u0447\u0003\u0002\u0002\u0002\u0449",
    "\u044a\u0003\u0002\u0002\u0002\u044a\u00ed\u0003\u0002\u0002\u0002\u044b",
    "\u0450\u0005\u00f0y\u0002\u044c\u044d\u0007\u001a\u0002\u0002\u044d",
    "\u044f\u0005\u00f0y\u0002\u044e\u044c\u0003\u0002\u0002\u0002\u044f",
    "\u0452\u0003\u0002\u0002\u0002\u0450\u044e\u0003\u0002\u0002\u0002\u0450",
    "\u0451\u0003\u0002\u0002\u0002\u0451\u00ef\u0003\u0002\u0002\u0002\u0452",
    "\u0450\u0003\u0002\u0002\u0002\u0453\u0456\u0005\u00f2z\u0002\u0454",
    "\u0456\u0005\u00f8}\u0002\u0455\u0453\u0003\u0002\u0002\u0002\u0455",
    "\u0454\u0003\u0002\u0002\u0002\u0456\u00f1\u0003\u0002\u0002\u0002\u0457",
    "\u0458\u0007R\u0002\u0002\u0458\u0459\u0005@!\u0002\u0459\u045a\u0005",
    "\u00f6|\u0002\u045a\u045b\u0007S\u0002\u0002\u045b\u00f3\u0003\u0002",
    "\u0002\u0002\u045c\u045d\u0005\u00f6|\u0002\u045d\u00f5\u0003\u0002",
    "\u0002\u0002\u045e\u0463\u0005\u00f8}\u0002\u045f\u0460\u0007\u001a",
    "\u0002\u0002\u0460\u0462\u0005\u00f8}\u0002\u0461\u045f\u0003\u0002",
    "\u0002\u0002\u0462\u0465\u0003\u0002\u0002\u0002\u0463\u0461\u0003\u0002",
    "\u0002\u0002\u0463\u0464\u0003\u0002\u0002\u0002\u0464\u00f7\u0003\u0002",
    "\u0002\u0002\u0465\u0463\u0003\u0002\u0002\u0002\u0466\u0467\u0007m",
    "\u0002\u0002\u0467\u0468\u0005\u00b0Y\u0002\u0468\u00f9\u0003\u0002",
    "\u0002\u0002\u0469\u046a\u0007\u001e\u0002\u0002\u046a\u046b\u0007\u0018",
    "\u0002\u0002\u046b\u046c\u0005\u00fc\u007f\u0002\u046c\u046d\u0007\u0019",
    "\u0002\u0002\u046d\u00fb\u0003\u0002\u0002\u0002\u046e\u0478\u0005\u00fe",
    "\u0080\u0002\u046f\u0470\u0007\u001a\u0002\u0002\u0470\u0472\u0007\u000e",
    "\u0002\u0002\u0471\u0473\u0005\u0110\u0089\u0002\u0472\u0471\u0003\u0002",
    "\u0002\u0002\u0472\u0473\u0003\u0002\u0002\u0002\u0473\u0476\u0003\u0002",
    "\u0002\u0002\u0474\u0475\u0007\u001a\u0002\u0002\u0475\u0477\u0005\u0114",
    "\u008b\u0002\u0476\u0474\u0003\u0002\u0002\u0002\u0476\u0477\u0003\u0002",
    "\u0002\u0002\u0477\u0479\u0003\u0002\u0002\u0002\u0478\u046f\u0003\u0002",
    "\u0002\u0002\u0478\u0479\u0003\u0002\u0002\u0002\u0479\u00fd\u0003\u0002",
    "\u0002\u0002\u047a\u047b\u0005\u0100\u0081\u0002\u047b\u00ff\u0003\u0002",
    "\u0002\u0002\u047c\u0481\u0005\u0102\u0082\u0002\u047d\u047e\u0007\u001a",
    "\u0002\u0002\u047e\u0480\u0005\u0102\u0082\u0002\u047f\u047d\u0003\u0002",
    "\u0002\u0002\u0480\u0483\u0003\u0002\u0002\u0002\u0481\u047f\u0003\u0002",
    "\u0002\u0002\u0481\u0482\u0003\u0002\u0002\u0002\u0482\u0101\u0003\u0002",
    "\u0002\u0002\u0483\u0481\u0003\u0002\u0002\u0002\u0484\u0488\u0007m",
    "\u0002\u0002\u0485\u0488\u0005\u0104\u0083\u0002\u0486\u0488\u0005\u00d6",
    "l\u0002\u0487\u0484\u0003\u0002\u0002\u0002\u0487\u0485\u0003\u0002",
    "\u0002\u0002\u0487\u0486\u0003\u0002\u0002\u0002\u0488\u0103\u0003\u0002",
    "\u0002\u0002\u0489\u048a\u0007m\u0002\u0002\u048a\u048d\u0007\u001b",
    "\u0002\u0002\u048b\u048e\u0005\u00e6t\u0002\u048c\u048e\u0005\u0106",
    "\u0084\u0002\u048d\u048b\u0003\u0002\u0002\u0002\u048d\u048c\u0003\u0002",
    "\u0002\u0002\u048e\u048f\u0003\u0002\u0002\u0002\u048f\u0490\u0007\u001c",
    "\u0002\u0002\u0490\u0105\u0003\u0002\u0002\u0002\u0491\u0492\u0005\u0108",
    "\u0085\u0002\u0492\u0107\u0003\u0002\u0002\u0002\u0493\u0495\u0005\u010a",
    "\u0086\u0002\u0494\u0496\u0005\u010c\u0087\u0002\u0495\u0494\u0003\u0002",
    "\u0002\u0002\u0495\u0496\u0003\u0002\u0002\u0002\u0496\u0109\u0003\u0002",
    "\u0002\u0002\u0497\u049a\u0007m\u0002\u0002\u0498\u0499\u0007\f\u0002",
    "\u0002\u0499\u049b\u0007m\u0002\u0002\u049a\u0498\u0003\u0002\u0002",
    "\u0002\u049a\u049b\u0003\u0002\u0002\u0002\u049b\u010b\u0003\u0002\u0002",
    "\u0002\u049c\u049d\u0007\u0018\u0002\u0002\u049d\u04a2\u0005\u010e\u0088",
    "\u0002\u049e\u049f\u0007\u001a\u0002\u0002\u049f\u04a1\u0005\u010e\u0088",
    "\u0002\u04a0\u049e\u0003\u0002\u0002\u0002\u04a1\u04a4\u0003\u0002\u0002",
    "\u0002\u04a2\u04a0\u0003\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002\u0002",
    "\u0002\u04a3\u04a5\u0003\u0002\u0002\u0002\u04a4\u04a2\u0003\u0002\u0002",
    "\u0002\u04a5\u04a6\u0007\u0019\u0002\u0002\u04a6\u010d\u0003\u0002\u0002",
    "\u0002\u04a7\u04aa\u0005\u00b0Y\u0002\u04a8\u04aa\u0005\u00d6l\u0002",
    "\u04a9\u04a7\u0003\u0002\u0002\u0002\u04a9\u04a8\u0003\u0002\u0002\u0002",
    "\u04aa\u010f\u0003\u0002\u0002\u0002\u04ab\u04ac\u0007-\u0002\u0002",
    "\u04ac\u04ad\u0005\u0112\u008a\u0002\u04ad\u0111\u0003\u0002\u0002\u0002",
    "\u04ae\u04b5\u0005\u00e6t\u0002\u04af\u04b5\u0005\u0106\u0084\u0002",
    "\u04b0\u04b1\u0005\u00b0Y\u0002\u04b1\u04b2\u0007T\u0002\u0002\u04b2",
    "\u04b3\u0005\u00d6l\u0002\u04b3\u04b5\u0003\u0002\u0002\u0002\u04b4",
    "\u04ae\u0003\u0002\u0002\u0002\u04b4\u04af\u0003\u0002\u0002\u0002\u04b4",
    "\u04b0\u0003\u0002\u0002\u0002\u04b5\u0113\u0003\u0002\u0002\u0002\u04b6",
    "\u04b7\u0005\u0100\u0081\u0002\u04b7\u0115\u0003\u0002\u0002\u0002\u04b8",
    "\u04bd\u0007\u0017\u0002\u0002\u04b9\u04ba\u0007\u0018\u0002\u0002\u04ba",
    "\u04bb\u0005\u0118\u008d\u0002\u04bb\u04bc\u0007\u0019\u0002\u0002\u04bc",
    "\u04be\u0003\u0002\u0002\u0002\u04bd\u04b9\u0003\u0002\u0002\u0002\u04bd",
    "\u04be\u0003\u0002\u0002\u0002\u04be\u0117\u0003\u0002\u0002\u0002\u04bf",
    "\u04c4\u0005\u0104\u0083\u0002\u04c0\u04c1\u0007\u001a\u0002\u0002\u04c1",
    "\u04c3\u0005\u0104\u0083\u0002\u04c2\u04c0\u0003\u0002\u0002\u0002\u04c3",
    "\u04c6\u0003\u0002\u0002\u0002\u04c4\u04c2\u0003\u0002\u0002\u0002\u04c4",
    "\u04c5\u0003\u0002\u0002\u0002\u04c5\u0119\u0003\u0002\u0002\u0002\u04c6",
    "\u04c4\u0003\u0002\u0002\u0002\u04c7\u04c8\u0007\\\u0002\u0002\u04c8",
    "\u04c9\u0007]\u0002\u0002\u04c9\u011b\u0003\u0002\u0002\u0002\u04ca",
    "\u04cb\u0007\u0018\u0002\u0002\u04cb\u04ce\u0007m\u0002\u0002\u04cc",
    "\u04cd\u0007\f\u0002\u0002\u04cd\u04cf\u0007m\u0002\u0002\u04ce\u04cc",
    "\u0003\u0002\u0002\u0002\u04ce\u04cf\u0003\u0002\u0002\u0002\u04cf\u04d0",
    "\u0003\u0002\u0002\u0002\u04d0\u04dc\u0007\u0019\u0002\u0002\u04d1\u04d2",
    "\u0007\u0018\u0002\u0002\u04d2\u04d7\u0005\u011e\u0090\u0002\u04d3\u04d4",
    "\u0007\u001a\u0002\u0002\u04d4\u04d6\u0005\u011e\u0090\u0002\u04d5\u04d3",
    "\u0003\u0002\u0002\u0002\u04d6\u04d9\u0003\u0002\u0002\u0002\u04d7\u04d5",
    "\u0003\u0002\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8\u04da",
    "\u0003\u0002\u0002\u0002\u04d9\u04d7\u0003\u0002\u0002\u0002\u04da\u04db",
    "\u0007\u0019\u0002\u0002\u04db\u04dd\u0003\u0002\u0002\u0002\u04dc\u04d1",
    "\u0003\u0002\u0002\u0002\u04dc\u04dd\u0003\u0002\u0002\u0002\u04dd\u011d",
    "\u0003\u0002\u0002\u0002\u04de\u04e2\u0007\u0006\u0002\u0002\u04df\u04e0",
    "\u0007b\u0002\u0002\u04e0\u04e2\u0005\u0120\u0091\u0002\u04e1\u04de",
    "\u0003\u0002\u0002\u0002\u04e1\u04df\u0003\u0002\u0002\u0002\u04e2\u04e3",
    "\u0003\u0002\u0002\u0002\u04e3\u04e4\u0005\u0122\u0092\u0002\u04e4\u011f",
    "\u0003\u0002\u0002\u0002\u04e5\u04e6\u0007\f\u0002\u0002\u04e6\u04e8",
    "\u0005\u0120\u0091\u0002\u04e7\u04e5\u0003\u0002\u0002\u0002\u04e7\u04e8",
    "\u0003\u0002\u0002\u0002\u04e8\u0121\u0003\u0002\u0002\u0002\u04e9\u04ee",
    "\u0007m\u0002\u0002\u04ea\u04eb\u0007\f\u0002\u0002\u04eb\u04ed\u0007",
    "m\u0002\u0002\u04ec\u04ea\u0003\u0002\u0002\u0002\u04ed\u04f0\u0003",
    "\u0002\u0002\u0002\u04ee\u04ec\u0003\u0002\u0002\u0002\u04ee\u04ef\u0003",
    "\u0002\u0002\u0002\u04ef\u0123\u0003\u0002\u0002\u0002\u04f0\u04ee\u0003",
    "\u0002\u0002\u0002\u04f1\u04f2\u0007%\u0002\u0002\u04f2\u04f3\u0007",
    "#\u0002\u0002\u04f3\u0125\u0003\u0002\u0002\u0002\u04f4\u04f5\u0007",
    "\"\u0002\u0002\u04f5\u04f6\u0007#\u0002\u0002\u04f6\u04fb\u0003\u0002",
    "\u0002\u0002\u04f7\u04f8\u0007\u0018\u0002\u0002\u04f8\u04f9\u0005\u0128",
    "\u0095\u0002\u04f9\u04fa\u0007\u0019\u0002\u0002\u04fa\u04fc\u0003\u0002",
    "\u0002\u0002\u04fb\u04f7\u0003\u0002\u0002\u0002\u04fb\u04fc\u0003\u0002",
    "\u0002\u0002\u04fc\u0127\u0003\u0002\u0002\u0002\u04fd\u0502\u0005\u012a",
    "\u0096\u0002\u04fe\u04ff\u0007\u001a\u0002\u0002\u04ff\u0501\u0005\u012a",
    "\u0096\u0002\u0500\u04fe\u0003\u0002\u0002\u0002\u0501\u0504\u0003\u0002",
    "\u0002\u0002\u0502\u0500\u0003\u0002\u0002\u0002\u0502\u0503\u0003\u0002",
    "\u0002\u0002\u0503\u0129\u0003\u0002\u0002\u0002\u0504\u0502\u0003\u0002",
    "\u0002\u0002\u0505\u0506\u0007m\u0002\u0002\u0506\u0509\u0007\u001b",
    "\u0002\u0002\u0507\u050a\u0007g\u0002\u0002\u0508\u050a\u0005\u0106",
    "\u0084\u0002\u0509\u0507\u0003\u0002\u0002\u0002\u0509\u0508\u0003\u0002",
    "\u0002\u0002\u050a\u050b\u0003\u0002\u0002\u0002\u050b\u050c\u0007\u001c",
    "\u0002\u0002\u050c\u012b\u0003\u0002\u0002\u0002\u050d\u050e\t\b\u0002",
    "\u0002\u050e\u012d\u0003\u0002\u0002\u0002\u0098\u0131\u013b\u013f\u014b",
    "\u014f\u0155\u015e\u0161\u0167\u016a\u0170\u0181\u0187\u018d\u0195\u019d",
    "\u01a3\u01a7\u01ad\u01b6\u01b8\u01ba\u01c3\u01c5\u01c7\u01ce\u01d3\u01da",
    "\u01df\u01e4\u01ee\u01f5\u01fa\u0200\u0206\u020c\u0210\u0215\u021f\u0226",
    "\u0228\u0230\u0238\u023e\u0242\u0249\u024d\u0252\u0261\u0266\u0270\u0276",
    "\u027c\u0282\u028c\u0290\u0293\u0296\u0298\u029f\u02a1\u02a8\u02aa\u02ac",
    "\u02b1\u02b6\u02bc\u02bf\u02c4\u02ca\u02d0\u02d5\u02d9\u02e0\u02eb\u02ed",
    "\u02f2\u02f4\u02fe\u030a\u030c\u0315\u031d\u0329\u0334\u0338\u033c\u033f",
    "\u0343\u0347\u034d\u0353\u0359\u035e\u0364\u0369\u0374\u0379\u0389\u0395",
    "\u039c\u03a1\u03a8\u03ab\u03b0\u03b6\u03c0\u03c8\u03d0\u03e7\u03ea\u03f0",
    "\u03f2\u03f7\u03f9\u0400\u0411\u041b\u0423\u0426\u0429\u042d\u0436\u0445",
    "\u0449\u0450\u0455\u0463\u0472\u0476\u0478\u0481\u0487\u048d\u0495\u049a",
    "\u04a2\u04a9\u04b4\u04bd\u04c4\u04ce\u04d7\u04dc\u04e1\u04e7\u04ee\u04fb",
    "\u0502\u0509"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, "'@'", "'*'", "'::='", "'BOOLEAN'", 
                     "'TRUE'", "'FALSE'", "'.'", "'..'", "'...'", "'''", 
                     "'&'", "'<'", "'>'", "'</'", "'/>'", "'true'", "'false'", 
                     "'INTEGER'", "'{'", "'}'", "','", "'('", "')'", "'-'", 
                     "'ENUMERATED'", "'REAL'", "'PLUS-INFINITY'", "'MINUS-INFINITY'", 
                     "'BIT'", "'STRING'", "'CONTAINING'", "'OCTET'", "'NULL'", 
                     "'SEQUENCE'", "'OPTIONAL'", "'DEFAULT'", "'COMPONENTS'", 
                     "'OF'", "'SET'", "'!'", "'ALL'", "'EXCEPT'", "'^'", 
                     "'|'", "'UNION'", "'INTERSECTION'", "'INCLUDES'", "'MIN'", 
                     "'MAX'", "'SIZE'", "'FROM'", "'WITH'", "'COMPONENT'", 
                     "'PRESENT'", "'ABSENT'", "'PATTERN'", "'TYPE-Identifier'", 
                     "'ABSTRACT-SYNTAX'", "'CLASS'", "'UNIQUE'", "'SYNTAX'", 
                     "'['", "']'", "'INSTANCE'", "';'", "'IMPORTS'", "'EXPORTS'", 
                     "'EXTENSIBILITY'", "'IMPLIED'", "'EXPLICIT'", "'TAGS'", 
                     "'IMPLICIT'", "'AUTOMATIC'", "'DEFINITIONS'", "'BEGIN'", 
                     "'END'", "'[['", "']]'", "':'", "'CHOICE'", "'UNIVERSAL'", 
                     "'APPLICATION'", "'PRIVATE'", "'EMBEDDED'", "'PDV'", 
                     "'EXTERNAL'", "'OBJECT'", "'IDENTIFIER'", "'RELATIVE-OID'", 
                     "'CHARACTER'", "'CONSTRAINED'", "'BY'", "'@.'", "'ENCODED'", 
                     "'--'" ];

var symbolicNames = [ null, "NEED_LITERAL", "COND_LITERAL", "INVALID_TAG", 
                      "A_ROND", "STAR", "ASSIGN_OP", "BOOLEAN_LITERAL", 
                      "TRUE_LITERAL", "FALSE_LITERAL", "DOT", "DOUBLE_DOT", 
                      "ELLIPSIS", "APOSTROPHE", "AMPERSAND", "LESS_THAN", 
                      "GREATER_THAN", "LESS_THAN_SLASH", "SLASH_GREATER_THAN", 
                      "TRUE_SMALL_LITERAL", "FALSE_SMALL_LITERAL", "INTEGER_LITERAL", 
                      "L_BRACE", "R_BRACE", "COMMA", "L_PARAN", "R_PARAN", 
                      "MINUS", "ENUMERATED_LITERAL", "REAL_LITERAL", "PLUS_INFINITY_LITERAL", 
                      "MINUS_INFINITY_LITERAL", "BIT_LITERAL", "STRING_LITERAL", 
                      "CONTAINING_LITERAL", "OCTET_LITERAL", "NULL_LITERAL", 
                      "SEQUENCE_LITERAL", "OPTIONAL_LITERAL", "DEFAULT_LITERAL", 
                      "COMPONENTS_LITERAL", "OF_LITERAL", "SET_LITERAL", 
                      "EXCLAM", "ALL_LITERAL", "EXCEPT_LITERAL", "POWER", 
                      "PIPE", "UNION_LITERAL", "INTERSECTION_LITERAL", "INCLUDES_LITERAL", 
                      "MIN_LITERAL", "MAX_LITERAL", "SIZE_LITERAL", "FROM_LITERAL", 
                      "WITH_LITERAL", "COMPONENT_LITERAL", "PRESENT_LITERAL", 
                      "ABSENT_LITERAL", "PATTERN_LITERAL", "TYPE_IDENTIFIER_LITERAL", 
                      "ABSTRACT_SYNTAX_LITERAL", "CLASS_LITERAL", "UNIQUE_LITERAL", 
                      "SYNTAX_LITERAL", "L_BRACKET", "R_BRACKET", "INSTANCE_LITERAL", 
                      "SEMI_COLON", "IMPORTS_LITERAL", "EXPORTS_LITERAL", 
                      "EXTENSIBILITY_LITERAL", "IMPLIED_LITERAL", "EXPLICIT_LITERAL", 
                      "TAGS_LITERAL", "IMPLICIT_LITERAL", "AUTOMATIC_LITERAL", 
                      "DEFINITIONS_LITERAL", "BEGIN_LITERAL", "END_LITERAL", 
                      "DOUBLE_L_BRACKET", "DOUBLE_R_BRACKET", "COLON", "CHOICE_LITERAL", 
                      "UNIVERSAL_LITERAL", "APPLICATION_LITERAL", "PRIVATE_LITERAL", 
                      "EMBEDDED_LITERAL", "PDV_LITERAL", "EXTERNAL_LITERAL", 
                      "OBJECT_LITERAL", "IDENTIFIER_LITERAL", "RELATIVE_OID_LITERAL", 
                      "CHARACTER_LITERAL", "CONSTRAINED_LITERAL", "BY_LITERAL", 
                      "A_ROND_DOT", "ENCODED_LITERAL", "COMMENT", "UNRESTRICTEDCHARACTERSTRINGTYPE", 
                      "EXTENSTIONENDMARKER", "NUMBER", "WS", "LINE_COMMENT", 
                      "BSTRING", "HSTRING", "CSTRING", "IDENTIFIER" ];

var ruleNames =  [ "modules", "moduleDefinition", "tagDefault", "extensionDefault", 
                   "moduleBody", "exports", "symbolsExported", "imports", 
                   "symbolsImported", "symbolsFromModuleList", "symbolsFromModule", 
                   "globalModuleReference", "assignedIdentifier", "symbolList", 
                   "symbol", "assignmentList", "assignment", "sequenceType", 
                   "extensionAndException", "optionalExtensionMarker", "componentTypeLists", 
                   "rootComponentTypeList", "componentTypeList", "componentType", 
                   "tag", "needTag", "condTag", "extensionAdditions", "extensionAdditionList", 
                   "extensionAddition", "extensionAdditionGroup", "versionNumber", 
                   "sequenceOfType", "sizeConstraint", "parameterizedAssignment", 
                   "parameterList", "parameter", "paramGovernor", "governor", 
                   "objectClassAssignment", "objectClass", "definedObjectClass", 
                   "usefulObjectClassReference", "externalObjectClassReference", 
                   "objectClassDefn", "withSyntaxSpec", "syntaxList", "tokenOrGroupSpec", 
                   "optionalGroup", "requiredToken", "literal", "primitiveFieldName", 
                   "fieldSpec", "typeFieldSpec", "typeOptionalitySpec", 
                   "fixedTypeValueFieldSpec", "valueOptionalitySpec", "variableTypeValueFieldSpec", 
                   "fixedTypeValueSetFieldSpec", "valueSetOptionalitySpec", 
                   "object", "parameterizedObject", "definedObject", "objectSet", 
                   "objectSetSpec", "fieldName", "valueSet", "elementSetSpecs", 
                   "rootElementSetSpec", "additionalElementSetSpec", "elementSetSpec", 
                   "unions", "exclusions", "intersections", "unionMark", 
                   "intersectionMark", "elements", "objectSetElements", 
                   "intersectionElements", "subtypeElements", "variableTypeValueSetFieldSpec", 
                   "objectFieldSpec", "objectOptionalitySpec", "objectSetFieldSpec", 
                   "objectSetOptionalitySpec", "typeAssignment", "valueAssignment", 
                   "asnType", "builtinType", "objectClassFieldType", "setType", 
                   "setOfType", "referencedType", "definedType", "constraint", 
                   "constraintSpec", "userDefinedConstraint", "generalConstraint", 
                   "userDefinedConstraintParameter", "tableConstraint", 
                   "simpleTableConstraint", "contentsConstraint", "componentPresenceLists", 
                   "componentPresenceList", "componentPresence", "subtypeConstraint", 
                   "value", "builtinValue", "objectIdentifierValue", "objIdComponentsList", 
                   "objIdComponents", "integerValue", "choiceValue", "enumeratedValue", 
                   "signedNumber", "choiceType", "alternativeTypeLists", 
                   "extensionAdditionAlternatives", "extensionAdditionAlternativesList", 
                   "extensionAdditionAlternative", "extensionAdditionAlternativesGroup", 
                   "rootAlternativeTypeList", "alternativeTypeList", "namedType", 
                   "enumeratedType", "enumerations", "rootEnumeration", 
                   "enumeration", "enumerationItem", "namedNumber", "definedValue", 
                   "parameterizedValue", "simpleDefinedValue", "actualParameterList", 
                   "actualParameter", "exceptionSpec", "exceptionIdentification", 
                   "additionalEnumeration", "integerType", "namedNumberList", 
                   "objectidentifiertype", "componentRelationConstraint", 
                   "atNotation", "level", "componentIdList", "octetStringType", 
                   "bitStringType", "namedBitList", "namedBit", "booleanValue" ];

function ASN_3gppParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ASN_3gppParser.prototype = Object.create(antlr4.Parser.prototype);
ASN_3gppParser.prototype.constructor = ASN_3gppParser;

Object.defineProperty(ASN_3gppParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ASN_3gppParser.EOF = antlr4.Token.EOF;
ASN_3gppParser.NEED_LITERAL = 1;
ASN_3gppParser.COND_LITERAL = 2;
ASN_3gppParser.INVALID_TAG = 3;
ASN_3gppParser.A_ROND = 4;
ASN_3gppParser.STAR = 5;
ASN_3gppParser.ASSIGN_OP = 6;
ASN_3gppParser.BOOLEAN_LITERAL = 7;
ASN_3gppParser.TRUE_LITERAL = 8;
ASN_3gppParser.FALSE_LITERAL = 9;
ASN_3gppParser.DOT = 10;
ASN_3gppParser.DOUBLE_DOT = 11;
ASN_3gppParser.ELLIPSIS = 12;
ASN_3gppParser.APOSTROPHE = 13;
ASN_3gppParser.AMPERSAND = 14;
ASN_3gppParser.LESS_THAN = 15;
ASN_3gppParser.GREATER_THAN = 16;
ASN_3gppParser.LESS_THAN_SLASH = 17;
ASN_3gppParser.SLASH_GREATER_THAN = 18;
ASN_3gppParser.TRUE_SMALL_LITERAL = 19;
ASN_3gppParser.FALSE_SMALL_LITERAL = 20;
ASN_3gppParser.INTEGER_LITERAL = 21;
ASN_3gppParser.L_BRACE = 22;
ASN_3gppParser.R_BRACE = 23;
ASN_3gppParser.COMMA = 24;
ASN_3gppParser.L_PARAN = 25;
ASN_3gppParser.R_PARAN = 26;
ASN_3gppParser.MINUS = 27;
ASN_3gppParser.ENUMERATED_LITERAL = 28;
ASN_3gppParser.REAL_LITERAL = 29;
ASN_3gppParser.PLUS_INFINITY_LITERAL = 30;
ASN_3gppParser.MINUS_INFINITY_LITERAL = 31;
ASN_3gppParser.BIT_LITERAL = 32;
ASN_3gppParser.STRING_LITERAL = 33;
ASN_3gppParser.CONTAINING_LITERAL = 34;
ASN_3gppParser.OCTET_LITERAL = 35;
ASN_3gppParser.NULL_LITERAL = 36;
ASN_3gppParser.SEQUENCE_LITERAL = 37;
ASN_3gppParser.OPTIONAL_LITERAL = 38;
ASN_3gppParser.DEFAULT_LITERAL = 39;
ASN_3gppParser.COMPONENTS_LITERAL = 40;
ASN_3gppParser.OF_LITERAL = 41;
ASN_3gppParser.SET_LITERAL = 42;
ASN_3gppParser.EXCLAM = 43;
ASN_3gppParser.ALL_LITERAL = 44;
ASN_3gppParser.EXCEPT_LITERAL = 45;
ASN_3gppParser.POWER = 46;
ASN_3gppParser.PIPE = 47;
ASN_3gppParser.UNION_LITERAL = 48;
ASN_3gppParser.INTERSECTION_LITERAL = 49;
ASN_3gppParser.INCLUDES_LITERAL = 50;
ASN_3gppParser.MIN_LITERAL = 51;
ASN_3gppParser.MAX_LITERAL = 52;
ASN_3gppParser.SIZE_LITERAL = 53;
ASN_3gppParser.FROM_LITERAL = 54;
ASN_3gppParser.WITH_LITERAL = 55;
ASN_3gppParser.COMPONENT_LITERAL = 56;
ASN_3gppParser.PRESENT_LITERAL = 57;
ASN_3gppParser.ABSENT_LITERAL = 58;
ASN_3gppParser.PATTERN_LITERAL = 59;
ASN_3gppParser.TYPE_IDENTIFIER_LITERAL = 60;
ASN_3gppParser.ABSTRACT_SYNTAX_LITERAL = 61;
ASN_3gppParser.CLASS_LITERAL = 62;
ASN_3gppParser.UNIQUE_LITERAL = 63;
ASN_3gppParser.SYNTAX_LITERAL = 64;
ASN_3gppParser.L_BRACKET = 65;
ASN_3gppParser.R_BRACKET = 66;
ASN_3gppParser.INSTANCE_LITERAL = 67;
ASN_3gppParser.SEMI_COLON = 68;
ASN_3gppParser.IMPORTS_LITERAL = 69;
ASN_3gppParser.EXPORTS_LITERAL = 70;
ASN_3gppParser.EXTENSIBILITY_LITERAL = 71;
ASN_3gppParser.IMPLIED_LITERAL = 72;
ASN_3gppParser.EXPLICIT_LITERAL = 73;
ASN_3gppParser.TAGS_LITERAL = 74;
ASN_3gppParser.IMPLICIT_LITERAL = 75;
ASN_3gppParser.AUTOMATIC_LITERAL = 76;
ASN_3gppParser.DEFINITIONS_LITERAL = 77;
ASN_3gppParser.BEGIN_LITERAL = 78;
ASN_3gppParser.END_LITERAL = 79;
ASN_3gppParser.DOUBLE_L_BRACKET = 80;
ASN_3gppParser.DOUBLE_R_BRACKET = 81;
ASN_3gppParser.COLON = 82;
ASN_3gppParser.CHOICE_LITERAL = 83;
ASN_3gppParser.UNIVERSAL_LITERAL = 84;
ASN_3gppParser.APPLICATION_LITERAL = 85;
ASN_3gppParser.PRIVATE_LITERAL = 86;
ASN_3gppParser.EMBEDDED_LITERAL = 87;
ASN_3gppParser.PDV_LITERAL = 88;
ASN_3gppParser.EXTERNAL_LITERAL = 89;
ASN_3gppParser.OBJECT_LITERAL = 90;
ASN_3gppParser.IDENTIFIER_LITERAL = 91;
ASN_3gppParser.RELATIVE_OID_LITERAL = 92;
ASN_3gppParser.CHARACTER_LITERAL = 93;
ASN_3gppParser.CONSTRAINED_LITERAL = 94;
ASN_3gppParser.BY_LITERAL = 95;
ASN_3gppParser.A_ROND_DOT = 96;
ASN_3gppParser.ENCODED_LITERAL = 97;
ASN_3gppParser.COMMENT = 98;
ASN_3gppParser.UNRESTRICTEDCHARACTERSTRINGTYPE = 99;
ASN_3gppParser.EXTENSTIONENDMARKER = 100;
ASN_3gppParser.NUMBER = 101;
ASN_3gppParser.WS = 102;
ASN_3gppParser.LINE_COMMENT = 103;
ASN_3gppParser.BSTRING = 104;
ASN_3gppParser.HSTRING = 105;
ASN_3gppParser.CSTRING = 106;
ASN_3gppParser.IDENTIFIER = 107;

ASN_3gppParser.RULE_modules = 0;
ASN_3gppParser.RULE_moduleDefinition = 1;
ASN_3gppParser.RULE_tagDefault = 2;
ASN_3gppParser.RULE_extensionDefault = 3;
ASN_3gppParser.RULE_moduleBody = 4;
ASN_3gppParser.RULE_exports = 5;
ASN_3gppParser.RULE_symbolsExported = 6;
ASN_3gppParser.RULE_imports = 7;
ASN_3gppParser.RULE_symbolsImported = 8;
ASN_3gppParser.RULE_symbolsFromModuleList = 9;
ASN_3gppParser.RULE_symbolsFromModule = 10;
ASN_3gppParser.RULE_globalModuleReference = 11;
ASN_3gppParser.RULE_assignedIdentifier = 12;
ASN_3gppParser.RULE_symbolList = 13;
ASN_3gppParser.RULE_symbol = 14;
ASN_3gppParser.RULE_assignmentList = 15;
ASN_3gppParser.RULE_assignment = 16;
ASN_3gppParser.RULE_sequenceType = 17;
ASN_3gppParser.RULE_extensionAndException = 18;
ASN_3gppParser.RULE_optionalExtensionMarker = 19;
ASN_3gppParser.RULE_componentTypeLists = 20;
ASN_3gppParser.RULE_rootComponentTypeList = 21;
ASN_3gppParser.RULE_componentTypeList = 22;
ASN_3gppParser.RULE_componentType = 23;
ASN_3gppParser.RULE_tag = 24;
ASN_3gppParser.RULE_needTag = 25;
ASN_3gppParser.RULE_condTag = 26;
ASN_3gppParser.RULE_extensionAdditions = 27;
ASN_3gppParser.RULE_extensionAdditionList = 28;
ASN_3gppParser.RULE_extensionAddition = 29;
ASN_3gppParser.RULE_extensionAdditionGroup = 30;
ASN_3gppParser.RULE_versionNumber = 31;
ASN_3gppParser.RULE_sequenceOfType = 32;
ASN_3gppParser.RULE_sizeConstraint = 33;
ASN_3gppParser.RULE_parameterizedAssignment = 34;
ASN_3gppParser.RULE_parameterList = 35;
ASN_3gppParser.RULE_parameter = 36;
ASN_3gppParser.RULE_paramGovernor = 37;
ASN_3gppParser.RULE_governor = 38;
ASN_3gppParser.RULE_objectClassAssignment = 39;
ASN_3gppParser.RULE_objectClass = 40;
ASN_3gppParser.RULE_definedObjectClass = 41;
ASN_3gppParser.RULE_usefulObjectClassReference = 42;
ASN_3gppParser.RULE_externalObjectClassReference = 43;
ASN_3gppParser.RULE_objectClassDefn = 44;
ASN_3gppParser.RULE_withSyntaxSpec = 45;
ASN_3gppParser.RULE_syntaxList = 46;
ASN_3gppParser.RULE_tokenOrGroupSpec = 47;
ASN_3gppParser.RULE_optionalGroup = 48;
ASN_3gppParser.RULE_requiredToken = 49;
ASN_3gppParser.RULE_literal = 50;
ASN_3gppParser.RULE_primitiveFieldName = 51;
ASN_3gppParser.RULE_fieldSpec = 52;
ASN_3gppParser.RULE_typeFieldSpec = 53;
ASN_3gppParser.RULE_typeOptionalitySpec = 54;
ASN_3gppParser.RULE_fixedTypeValueFieldSpec = 55;
ASN_3gppParser.RULE_valueOptionalitySpec = 56;
ASN_3gppParser.RULE_variableTypeValueFieldSpec = 57;
ASN_3gppParser.RULE_fixedTypeValueSetFieldSpec = 58;
ASN_3gppParser.RULE_valueSetOptionalitySpec = 59;
ASN_3gppParser.RULE_object = 60;
ASN_3gppParser.RULE_parameterizedObject = 61;
ASN_3gppParser.RULE_definedObject = 62;
ASN_3gppParser.RULE_objectSet = 63;
ASN_3gppParser.RULE_objectSetSpec = 64;
ASN_3gppParser.RULE_fieldName = 65;
ASN_3gppParser.RULE_valueSet = 66;
ASN_3gppParser.RULE_elementSetSpecs = 67;
ASN_3gppParser.RULE_rootElementSetSpec = 68;
ASN_3gppParser.RULE_additionalElementSetSpec = 69;
ASN_3gppParser.RULE_elementSetSpec = 70;
ASN_3gppParser.RULE_unions = 71;
ASN_3gppParser.RULE_exclusions = 72;
ASN_3gppParser.RULE_intersections = 73;
ASN_3gppParser.RULE_unionMark = 74;
ASN_3gppParser.RULE_intersectionMark = 75;
ASN_3gppParser.RULE_elements = 76;
ASN_3gppParser.RULE_objectSetElements = 77;
ASN_3gppParser.RULE_intersectionElements = 78;
ASN_3gppParser.RULE_subtypeElements = 79;
ASN_3gppParser.RULE_variableTypeValueSetFieldSpec = 80;
ASN_3gppParser.RULE_objectFieldSpec = 81;
ASN_3gppParser.RULE_objectOptionalitySpec = 82;
ASN_3gppParser.RULE_objectSetFieldSpec = 83;
ASN_3gppParser.RULE_objectSetOptionalitySpec = 84;
ASN_3gppParser.RULE_typeAssignment = 85;
ASN_3gppParser.RULE_valueAssignment = 86;
ASN_3gppParser.RULE_asnType = 87;
ASN_3gppParser.RULE_builtinType = 88;
ASN_3gppParser.RULE_objectClassFieldType = 89;
ASN_3gppParser.RULE_setType = 90;
ASN_3gppParser.RULE_setOfType = 91;
ASN_3gppParser.RULE_referencedType = 92;
ASN_3gppParser.RULE_definedType = 93;
ASN_3gppParser.RULE_constraint = 94;
ASN_3gppParser.RULE_constraintSpec = 95;
ASN_3gppParser.RULE_userDefinedConstraint = 96;
ASN_3gppParser.RULE_generalConstraint = 97;
ASN_3gppParser.RULE_userDefinedConstraintParameter = 98;
ASN_3gppParser.RULE_tableConstraint = 99;
ASN_3gppParser.RULE_simpleTableConstraint = 100;
ASN_3gppParser.RULE_contentsConstraint = 101;
ASN_3gppParser.RULE_componentPresenceLists = 102;
ASN_3gppParser.RULE_componentPresenceList = 103;
ASN_3gppParser.RULE_componentPresence = 104;
ASN_3gppParser.RULE_subtypeConstraint = 105;
ASN_3gppParser.RULE_value = 106;
ASN_3gppParser.RULE_builtinValue = 107;
ASN_3gppParser.RULE_objectIdentifierValue = 108;
ASN_3gppParser.RULE_objIdComponentsList = 109;
ASN_3gppParser.RULE_objIdComponents = 110;
ASN_3gppParser.RULE_integerValue = 111;
ASN_3gppParser.RULE_choiceValue = 112;
ASN_3gppParser.RULE_enumeratedValue = 113;
ASN_3gppParser.RULE_signedNumber = 114;
ASN_3gppParser.RULE_choiceType = 115;
ASN_3gppParser.RULE_alternativeTypeLists = 116;
ASN_3gppParser.RULE_extensionAdditionAlternatives = 117;
ASN_3gppParser.RULE_extensionAdditionAlternativesList = 118;
ASN_3gppParser.RULE_extensionAdditionAlternative = 119;
ASN_3gppParser.RULE_extensionAdditionAlternativesGroup = 120;
ASN_3gppParser.RULE_rootAlternativeTypeList = 121;
ASN_3gppParser.RULE_alternativeTypeList = 122;
ASN_3gppParser.RULE_namedType = 123;
ASN_3gppParser.RULE_enumeratedType = 124;
ASN_3gppParser.RULE_enumerations = 125;
ASN_3gppParser.RULE_rootEnumeration = 126;
ASN_3gppParser.RULE_enumeration = 127;
ASN_3gppParser.RULE_enumerationItem = 128;
ASN_3gppParser.RULE_namedNumber = 129;
ASN_3gppParser.RULE_definedValue = 130;
ASN_3gppParser.RULE_parameterizedValue = 131;
ASN_3gppParser.RULE_simpleDefinedValue = 132;
ASN_3gppParser.RULE_actualParameterList = 133;
ASN_3gppParser.RULE_actualParameter = 134;
ASN_3gppParser.RULE_exceptionSpec = 135;
ASN_3gppParser.RULE_exceptionIdentification = 136;
ASN_3gppParser.RULE_additionalEnumeration = 137;
ASN_3gppParser.RULE_integerType = 138;
ASN_3gppParser.RULE_namedNumberList = 139;
ASN_3gppParser.RULE_objectidentifiertype = 140;
ASN_3gppParser.RULE_componentRelationConstraint = 141;
ASN_3gppParser.RULE_atNotation = 142;
ASN_3gppParser.RULE_level = 143;
ASN_3gppParser.RULE_componentIdList = 144;
ASN_3gppParser.RULE_octetStringType = 145;
ASN_3gppParser.RULE_bitStringType = 146;
ASN_3gppParser.RULE_namedBitList = 147;
ASN_3gppParser.RULE_namedBit = 148;
ASN_3gppParser.RULE_booleanValue = 149;


function ModulesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_modules;
    return this;
}

ModulesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModulesContext.prototype.constructor = ModulesContext;

ModulesContext.prototype.moduleDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleDefinitionContext);
    } else {
        return this.getTypedRuleContext(ModuleDefinitionContext,i);
    }
};

ModulesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitModules(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ModulesContext = ModulesContext;

ASN_3gppParser.prototype.modules = function() {

    var localctx = new ModulesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ASN_3gppParser.RULE_modules);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 300;
            this.moduleDefinition();
            this.state = 303; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ASN_3gppParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_moduleDefinition;
    return this;
}

ModuleDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleDefinitionContext.prototype.constructor = ModuleDefinitionContext;

ModuleDefinitionContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.IDENTIFIER);
    } else {
        return this.getToken(ASN_3gppParser.IDENTIFIER, i);
    }
};


ModuleDefinitionContext.prototype.DEFINITIONS_LITERAL = function() {
    return this.getToken(ASN_3gppParser.DEFINITIONS_LITERAL, 0);
};

ModuleDefinitionContext.prototype.tagDefault = function() {
    return this.getTypedRuleContext(TagDefaultContext,0);
};

ModuleDefinitionContext.prototype.extensionDefault = function() {
    return this.getTypedRuleContext(ExtensionDefaultContext,0);
};

ModuleDefinitionContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASN_3gppParser.ASSIGN_OP, 0);
};

ModuleDefinitionContext.prototype.BEGIN_LITERAL = function() {
    return this.getToken(ASN_3gppParser.BEGIN_LITERAL, 0);
};

ModuleDefinitionContext.prototype.moduleBody = function() {
    return this.getTypedRuleContext(ModuleBodyContext,0);
};

ModuleDefinitionContext.prototype.END_LITERAL = function() {
    return this.getToken(ASN_3gppParser.END_LITERAL, 0);
};

ModuleDefinitionContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

ModuleDefinitionContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

ModuleDefinitionContext.prototype.L_PARAN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.L_PARAN);
    } else {
        return this.getToken(ASN_3gppParser.L_PARAN, i);
    }
};


ModuleDefinitionContext.prototype.NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.NUMBER);
    } else {
        return this.getToken(ASN_3gppParser.NUMBER, i);
    }
};


ModuleDefinitionContext.prototype.R_PARAN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.R_PARAN);
    } else {
        return this.getToken(ASN_3gppParser.R_PARAN, i);
    }
};


ModuleDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitModuleDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ModuleDefinitionContext = ModuleDefinitionContext;

ASN_3gppParser.prototype.moduleDefinition = function() {

    var localctx = new ModuleDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ASN_3gppParser.RULE_moduleDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 305;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 317;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.L_BRACE) {
            this.state = 306;
            this.match(ASN_3gppParser.L_BRACE);
            this.state = 313;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ASN_3gppParser.IDENTIFIER) {
                this.state = 307;
                this.match(ASN_3gppParser.IDENTIFIER);
                this.state = 308;
                this.match(ASN_3gppParser.L_PARAN);
                this.state = 309;
                this.match(ASN_3gppParser.NUMBER);
                this.state = 310;
                this.match(ASN_3gppParser.R_PARAN);
                this.state = 315;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 316;
            this.match(ASN_3gppParser.R_BRACE);
        }

        this.state = 319;
        this.match(ASN_3gppParser.DEFINITIONS_LITERAL);
        this.state = 320;
        this.tagDefault();
        this.state = 321;
        this.extensionDefault();
        this.state = 322;
        this.match(ASN_3gppParser.ASSIGN_OP);
        this.state = 323;
        this.match(ASN_3gppParser.BEGIN_LITERAL);
        this.state = 324;
        this.moduleBody();
        this.state = 325;
        this.match(ASN_3gppParser.END_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TagDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_tagDefault;
    return this;
}

TagDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TagDefaultContext.prototype.constructor = TagDefaultContext;

TagDefaultContext.prototype.TAGS_LITERAL = function() {
    return this.getToken(ASN_3gppParser.TAGS_LITERAL, 0);
};

TagDefaultContext.prototype.EXPLICIT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.EXPLICIT_LITERAL, 0);
};

TagDefaultContext.prototype.IMPLICIT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.IMPLICIT_LITERAL, 0);
};

TagDefaultContext.prototype.AUTOMATIC_LITERAL = function() {
    return this.getToken(ASN_3gppParser.AUTOMATIC_LITERAL, 0);
};

TagDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitTagDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.TagDefaultContext = TagDefaultContext;

ASN_3gppParser.prototype.tagDefault = function() {

    var localctx = new TagDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ASN_3gppParser.RULE_tagDefault);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (ASN_3gppParser.EXPLICIT_LITERAL - 73)) | (1 << (ASN_3gppParser.IMPLICIT_LITERAL - 73)) | (1 << (ASN_3gppParser.AUTOMATIC_LITERAL - 73)))) !== 0)) {
            this.state = 327;
            _la = this._input.LA(1);
            if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (ASN_3gppParser.EXPLICIT_LITERAL - 73)) | (1 << (ASN_3gppParser.IMPLICIT_LITERAL - 73)) | (1 << (ASN_3gppParser.AUTOMATIC_LITERAL - 73)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 328;
            this.match(ASN_3gppParser.TAGS_LITERAL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionDefault;
    return this;
}

ExtensionDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionDefaultContext.prototype.constructor = ExtensionDefaultContext;

ExtensionDefaultContext.prototype.EXTENSIBILITY_LITERAL = function() {
    return this.getToken(ASN_3gppParser.EXTENSIBILITY_LITERAL, 0);
};

ExtensionDefaultContext.prototype.IMPLIED_LITERAL = function() {
    return this.getToken(ASN_3gppParser.IMPLIED_LITERAL, 0);
};

ExtensionDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionDefaultContext = ExtensionDefaultContext;

ASN_3gppParser.prototype.extensionDefault = function() {

    var localctx = new ExtensionDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ASN_3gppParser.RULE_extensionDefault);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.EXTENSIBILITY_LITERAL) {
            this.state = 331;
            this.match(ASN_3gppParser.EXTENSIBILITY_LITERAL);
            this.state = 332;
            this.match(ASN_3gppParser.IMPLIED_LITERAL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_moduleBody;
    return this;
}

ModuleBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleBodyContext.prototype.constructor = ModuleBodyContext;

ModuleBodyContext.prototype.exports = function() {
    return this.getTypedRuleContext(ExportsContext,0);
};

ModuleBodyContext.prototype.imports = function() {
    return this.getTypedRuleContext(ImportsContext,0);
};

ModuleBodyContext.prototype.assignmentList = function() {
    return this.getTypedRuleContext(AssignmentListContext,0);
};

ModuleBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitModuleBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ModuleBodyContext = ModuleBodyContext;

ASN_3gppParser.prototype.moduleBody = function() {

    var localctx = new ModuleBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ASN_3gppParser.RULE_moduleBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.IMPORTS_LITERAL || _la===ASN_3gppParser.EXPORTS_LITERAL || _la===ASN_3gppParser.IDENTIFIER) {
            this.state = 335;
            this.exports();
            this.state = 336;
            this.imports();
            this.state = 337;
            this.assignmentList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_exports;
    return this;
}

ExportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportsContext.prototype.constructor = ExportsContext;

ExportsContext.prototype.EXPORTS_LITERAL = function() {
    return this.getToken(ASN_3gppParser.EXPORTS_LITERAL, 0);
};

ExportsContext.prototype.symbolsExported = function() {
    return this.getTypedRuleContext(SymbolsExportedContext,0);
};

ExportsContext.prototype.SEMI_COLON = function() {
    return this.getToken(ASN_3gppParser.SEMI_COLON, 0);
};

ExportsContext.prototype.ALL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.ALL_LITERAL, 0);
};

ExportsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExports(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExportsContext = ExportsContext;

ASN_3gppParser.prototype.exports = function() {

    var localctx = new ExportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ASN_3gppParser.RULE_exports);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 348;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        if(la_===1) {
            this.state = 341;
            this.match(ASN_3gppParser.EXPORTS_LITERAL);
            this.state = 342;
            this.symbolsExported();
            this.state = 343;
            this.match(ASN_3gppParser.SEMI_COLON);

        } else if(la_===2) {
            this.state = 345;
            this.match(ASN_3gppParser.EXPORTS_LITERAL);
            this.state = 346;
            this.match(ASN_3gppParser.ALL_LITERAL);
            this.state = 347;
            this.match(ASN_3gppParser.SEMI_COLON);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolsExportedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_symbolsExported;
    return this;
}

SymbolsExportedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsExportedContext.prototype.constructor = SymbolsExportedContext;

SymbolsExportedContext.prototype.symbolList = function() {
    return this.getTypedRuleContext(SymbolListContext,0);
};

SymbolsExportedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSymbolsExported(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SymbolsExportedContext = SymbolsExportedContext;

ASN_3gppParser.prototype.symbolsExported = function() {

    var localctx = new SymbolsExportedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ASN_3gppParser.RULE_symbolsExported);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.IDENTIFIER) {
            this.state = 350;
            this.symbolList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_imports;
    return this;
}

ImportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportsContext.prototype.constructor = ImportsContext;

ImportsContext.prototype.IMPORTS_LITERAL = function() {
    return this.getToken(ASN_3gppParser.IMPORTS_LITERAL, 0);
};

ImportsContext.prototype.symbolsImported = function() {
    return this.getTypedRuleContext(SymbolsImportedContext,0);
};

ImportsContext.prototype.SEMI_COLON = function() {
    return this.getToken(ASN_3gppParser.SEMI_COLON, 0);
};

ImportsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitImports(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ImportsContext = ImportsContext;

ASN_3gppParser.prototype.imports = function() {

    var localctx = new ImportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ASN_3gppParser.RULE_imports);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.IMPORTS_LITERAL) {
            this.state = 353;
            this.match(ASN_3gppParser.IMPORTS_LITERAL);
            this.state = 354;
            this.symbolsImported();
            this.state = 355;
            this.match(ASN_3gppParser.SEMI_COLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolsImportedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_symbolsImported;
    return this;
}

SymbolsImportedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsImportedContext.prototype.constructor = SymbolsImportedContext;

SymbolsImportedContext.prototype.symbolsFromModuleList = function() {
    return this.getTypedRuleContext(SymbolsFromModuleListContext,0);
};

SymbolsImportedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSymbolsImported(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SymbolsImportedContext = SymbolsImportedContext;

ASN_3gppParser.prototype.symbolsImported = function() {

    var localctx = new SymbolsImportedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ASN_3gppParser.RULE_symbolsImported);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.IDENTIFIER) {
            this.state = 359;
            this.symbolsFromModuleList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolsFromModuleListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_symbolsFromModuleList;
    return this;
}

SymbolsFromModuleListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsFromModuleListContext.prototype.constructor = SymbolsFromModuleListContext;

SymbolsFromModuleListContext.prototype.symbolsFromModule = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolsFromModuleContext);
    } else {
        return this.getTypedRuleContext(SymbolsFromModuleContext,i);
    }
};

SymbolsFromModuleListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSymbolsFromModuleList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SymbolsFromModuleListContext = SymbolsFromModuleListContext;

ASN_3gppParser.prototype.symbolsFromModuleList = function() {

    var localctx = new SymbolsFromModuleListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ASN_3gppParser.RULE_symbolsFromModuleList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 362;
        this.symbolsFromModule();
        this.state = 366;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.IDENTIFIER) {
            this.state = 363;
            this.symbolsFromModule();
            this.state = 368;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolsFromModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_symbolsFromModule;
    return this;
}

SymbolsFromModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsFromModuleContext.prototype.constructor = SymbolsFromModuleContext;

SymbolsFromModuleContext.prototype.symbolList = function() {
    return this.getTypedRuleContext(SymbolListContext,0);
};

SymbolsFromModuleContext.prototype.FROM_LITERAL = function() {
    return this.getToken(ASN_3gppParser.FROM_LITERAL, 0);
};

SymbolsFromModuleContext.prototype.globalModuleReference = function() {
    return this.getTypedRuleContext(GlobalModuleReferenceContext,0);
};

SymbolsFromModuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSymbolsFromModule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SymbolsFromModuleContext = SymbolsFromModuleContext;

ASN_3gppParser.prototype.symbolsFromModule = function() {

    var localctx = new SymbolsFromModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ASN_3gppParser.RULE_symbolsFromModule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 369;
        this.symbolList();
        this.state = 370;
        this.match(ASN_3gppParser.FROM_LITERAL);
        this.state = 371;
        this.globalModuleReference();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GlobalModuleReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_globalModuleReference;
    return this;
}

GlobalModuleReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalModuleReferenceContext.prototype.constructor = GlobalModuleReferenceContext;

GlobalModuleReferenceContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

GlobalModuleReferenceContext.prototype.assignedIdentifier = function() {
    return this.getTypedRuleContext(AssignedIdentifierContext,0);
};

GlobalModuleReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitGlobalModuleReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.GlobalModuleReferenceContext = GlobalModuleReferenceContext;

ASN_3gppParser.prototype.globalModuleReference = function() {

    var localctx = new GlobalModuleReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ASN_3gppParser.RULE_globalModuleReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 373;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 374;
        this.assignedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_assignedIdentifier;
    return this;
}

AssignedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignedIdentifierContext.prototype.constructor = AssignedIdentifierContext;


AssignedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitAssignedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.AssignedIdentifierContext = AssignedIdentifierContext;

ASN_3gppParser.prototype.assignedIdentifier = function() {

    var localctx = new AssignedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ASN_3gppParser.RULE_assignedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_symbolList;
    return this;
}

SymbolListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolListContext.prototype.constructor = SymbolListContext;

SymbolListContext.prototype.symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolContext);
    } else {
        return this.getTypedRuleContext(SymbolContext,i);
    }
};

SymbolListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


SymbolListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSymbolList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SymbolListContext = SymbolListContext;

ASN_3gppParser.prototype.symbolList = function() {

    var localctx = new SymbolListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ASN_3gppParser.RULE_symbolList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        this.symbol();
        this.state = 383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.COMMA) {
            this.state = 379;
            this.match(ASN_3gppParser.COMMA);
            this.state = 380;
            this.symbol();
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_symbol;
    return this;
}

SymbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolContext.prototype.constructor = SymbolContext;

SymbolContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

SymbolContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

SymbolContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

SymbolContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSymbol(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SymbolContext = SymbolContext;

ASN_3gppParser.prototype.symbol = function() {

    var localctx = new SymbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ASN_3gppParser.RULE_symbol);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 386;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.L_BRACE) {
            this.state = 387;
            this.match(ASN_3gppParser.L_BRACE);
            this.state = 388;
            this.match(ASN_3gppParser.R_BRACE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_assignmentList;
    return this;
}

AssignmentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentListContext.prototype.constructor = AssignmentListContext;

AssignmentListContext.prototype.assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentContext);
    } else {
        return this.getTypedRuleContext(AssignmentContext,i);
    }
};

AssignmentListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitAssignmentList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.AssignmentListContext = AssignmentListContext;

ASN_3gppParser.prototype.assignmentList = function() {

    var localctx = new AssignmentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ASN_3gppParser.RULE_assignmentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 391;
        this.assignment();
        this.state = 395;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.IDENTIFIER) {
            this.state = 392;
            this.assignment();
            this.state = 397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

AssignmentContext.prototype.valueAssignment = function() {
    return this.getTypedRuleContext(ValueAssignmentContext,0);
};

AssignmentContext.prototype.typeAssignment = function() {
    return this.getTypedRuleContext(TypeAssignmentContext,0);
};

AssignmentContext.prototype.parameterizedAssignment = function() {
    return this.getTypedRuleContext(ParameterizedAssignmentContext,0);
};

AssignmentContext.prototype.objectClassAssignment = function() {
    return this.getTypedRuleContext(ObjectClassAssignmentContext,0);
};

AssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.AssignmentContext = AssignmentContext;

ASN_3gppParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ASN_3gppParser.RULE_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 398;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 403;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.state = 399;
            this.valueAssignment();
            break;

        case 2:
            this.state = 400;
            this.typeAssignment();
            break;

        case 3:
            this.state = 401;
            this.parameterizedAssignment();
            break;

        case 4:
            this.state = 402;
            this.objectClassAssignment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SequenceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_sequenceType;
    return this;
}

SequenceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SequenceTypeContext.prototype.constructor = SequenceTypeContext;

SequenceTypeContext.prototype.SEQUENCE_LITERAL = function() {
    return this.getToken(ASN_3gppParser.SEQUENCE_LITERAL, 0);
};

SequenceTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

SequenceTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

SequenceTypeContext.prototype.extensionAndException = function() {
    return this.getTypedRuleContext(ExtensionAndExceptionContext,0);
};

SequenceTypeContext.prototype.optionalExtensionMarker = function() {
    return this.getTypedRuleContext(OptionalExtensionMarkerContext,0);
};

SequenceTypeContext.prototype.componentTypeLists = function() {
    return this.getTypedRuleContext(ComponentTypeListsContext,0);
};

SequenceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSequenceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SequenceTypeContext = SequenceTypeContext;

ASN_3gppParser.prototype.sequenceType = function() {

    var localctx = new SequenceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ASN_3gppParser.RULE_sequenceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 405;
        this.match(ASN_3gppParser.SEQUENCE_LITERAL);
        this.state = 406;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        if(la_===1) {
            this.state = 407;
            this.extensionAndException();
            this.state = 408;
            this.optionalExtensionMarker();

        } else if(la_===2) {
            this.state = 410;
            this.componentTypeLists();

        }
        this.state = 413;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAndExceptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionAndException;
    return this;
}

ExtensionAndExceptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAndExceptionContext.prototype.constructor = ExtensionAndExceptionContext;

ExtensionAndExceptionContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASN_3gppParser.ELLIPSIS, 0);
};

ExtensionAndExceptionContext.prototype.exceptionSpec = function() {
    return this.getTypedRuleContext(ExceptionSpecContext,0);
};

ExtensionAndExceptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionAndException(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionAndExceptionContext = ExtensionAndExceptionContext;

ASN_3gppParser.prototype.extensionAndException = function() {

    var localctx = new ExtensionAndExceptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ASN_3gppParser.RULE_extensionAndException);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 415;
        this.match(ASN_3gppParser.ELLIPSIS);
        this.state = 417;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.EXCLAM) {
            this.state = 416;
            this.exceptionSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalExtensionMarkerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_optionalExtensionMarker;
    return this;
}

OptionalExtensionMarkerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalExtensionMarkerContext.prototype.constructor = OptionalExtensionMarkerContext;

OptionalExtensionMarkerContext.prototype.COMMA = function() {
    return this.getToken(ASN_3gppParser.COMMA, 0);
};

OptionalExtensionMarkerContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASN_3gppParser.ELLIPSIS, 0);
};

OptionalExtensionMarkerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitOptionalExtensionMarker(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.OptionalExtensionMarkerContext = OptionalExtensionMarkerContext;

ASN_3gppParser.prototype.optionalExtensionMarker = function() {

    var localctx = new OptionalExtensionMarkerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ASN_3gppParser.RULE_optionalExtensionMarker);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 421;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.COMMA) {
            this.state = 419;
            this.match(ASN_3gppParser.COMMA);
            this.state = 420;
            this.match(ASN_3gppParser.ELLIPSIS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentTypeListsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_componentTypeLists;
    return this;
}

ComponentTypeListsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentTypeListsContext.prototype.constructor = ComponentTypeListsContext;

ComponentTypeListsContext.prototype.rootComponentTypeList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RootComponentTypeListContext);
    } else {
        return this.getTypedRuleContext(RootComponentTypeListContext,i);
    }
};

ComponentTypeListsContext.prototype.tag = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TagContext);
    } else {
        return this.getTypedRuleContext(TagContext,i);
    }
};

ComponentTypeListsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ComponentTypeListsContext.prototype.extensionAndException = function() {
    return this.getTypedRuleContext(ExtensionAndExceptionContext,0);
};

ComponentTypeListsContext.prototype.extensionAdditions = function() {
    return this.getTypedRuleContext(ExtensionAdditionsContext,0);
};

ComponentTypeListsContext.prototype.optionalExtensionMarker = function() {
    return this.getTypedRuleContext(OptionalExtensionMarkerContext,0);
};

ComponentTypeListsContext.prototype.EXTENSTIONENDMARKER = function() {
    return this.getToken(ASN_3gppParser.EXTENSTIONENDMARKER, 0);
};

ComponentTypeListsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitComponentTypeLists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ComponentTypeListsContext = ComponentTypeListsContext;

ASN_3gppParser.prototype.componentTypeLists = function() {

    var localctx = new ComponentTypeListsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ASN_3gppParser.RULE_componentTypeLists);
    var _la = 0; // Token type
    try {
        this.state = 453;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.COMPONENTS_LITERAL:
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 423;
            this.rootComponentTypeList();
            this.state = 440;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case ASN_3gppParser.NEED_LITERAL:
            case ASN_3gppParser.COND_LITERAL:
            case ASN_3gppParser.INVALID_TAG:
            	this.state = 424;
            	this.tag();
            	break;
            case ASN_3gppParser.COMMA:
            	this.state = 425;
            	this.match(ASN_3gppParser.COMMA);
            	this.state = 427;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASN_3gppParser.NEED_LITERAL) | (1 << ASN_3gppParser.COND_LITERAL) | (1 << ASN_3gppParser.INVALID_TAG))) !== 0)) {
            	    this.state = 426;
            	    this.tag();
            	}

            	this.state = 429;
            	this.extensionAndException();
            	this.state = 430;
            	this.extensionAdditions();
            	this.state = 438;
            	this._errHandler.sync(this);
            	switch(this._input.LA(1)) {
            	case ASN_3gppParser.R_BRACE:
            	case ASN_3gppParser.COMMA:
            	    this.state = 431;
            	    this.optionalExtensionMarker();
            	    break;
            	case ASN_3gppParser.EXTENSTIONENDMARKER:
            	    this.state = 432;
            	    this.match(ASN_3gppParser.EXTENSTIONENDMARKER);
            	    this.state = 433;
            	    this.match(ASN_3gppParser.COMMA);
            	    this.state = 434;
            	    this.rootComponentTypeList();
            	    this.state = 436;
            	    this._errHandler.sync(this);
            	    _la = this._input.LA(1);
            	    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASN_3gppParser.NEED_LITERAL) | (1 << ASN_3gppParser.COND_LITERAL) | (1 << ASN_3gppParser.INVALID_TAG))) !== 0)) {
            	        this.state = 435;
            	        this.tag();
            	    }

            	    break;
            	default:
            	    throw new antlr4.error.NoViableAltException(this);
            	}
            	break;
            case ASN_3gppParser.R_BRACE:
            	break;
            default:
            	break;
            }
            break;
        case ASN_3gppParser.ELLIPSIS:
            this.enterOuterAlt(localctx, 2);
            this.state = 442;
            this.extensionAndException();
            this.state = 443;
            this.extensionAdditions();
            this.state = 451;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ASN_3gppParser.R_BRACE:
            case ASN_3gppParser.COMMA:
                this.state = 444;
                this.optionalExtensionMarker();
                break;
            case ASN_3gppParser.EXTENSTIONENDMARKER:
                this.state = 445;
                this.match(ASN_3gppParser.EXTENSTIONENDMARKER);
                this.state = 446;
                this.match(ASN_3gppParser.COMMA);
                this.state = 447;
                this.rootComponentTypeList();
                this.state = 449;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASN_3gppParser.NEED_LITERAL) | (1 << ASN_3gppParser.COND_LITERAL) | (1 << ASN_3gppParser.INVALID_TAG))) !== 0)) {
                    this.state = 448;
                    this.tag();
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RootComponentTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_rootComponentTypeList;
    return this;
}

RootComponentTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootComponentTypeListContext.prototype.constructor = RootComponentTypeListContext;

RootComponentTypeListContext.prototype.componentTypeList = function() {
    return this.getTypedRuleContext(ComponentTypeListContext,0);
};

RootComponentTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitRootComponentTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.RootComponentTypeListContext = RootComponentTypeListContext;

ASN_3gppParser.prototype.rootComponentTypeList = function() {

    var localctx = new RootComponentTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ASN_3gppParser.RULE_rootComponentTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 455;
        this.componentTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_componentTypeList;
    return this;
}

ComponentTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentTypeListContext.prototype.constructor = ComponentTypeListContext;

ComponentTypeListContext.prototype.componentType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentTypeContext);
    } else {
        return this.getTypedRuleContext(ComponentTypeContext,i);
    }
};

ComponentTypeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ComponentTypeListContext.prototype.tag = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TagContext);
    } else {
        return this.getTypedRuleContext(TagContext,i);
    }
};

ComponentTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitComponentTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ComponentTypeListContext = ComponentTypeListContext;

ASN_3gppParser.prototype.componentTypeList = function() {

    var localctx = new ComponentTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ASN_3gppParser.RULE_componentTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        this.componentType();
        this.state = 465;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 458;
                this.match(ASN_3gppParser.COMMA);
                this.state = 460;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASN_3gppParser.NEED_LITERAL) | (1 << ASN_3gppParser.COND_LITERAL) | (1 << ASN_3gppParser.INVALID_TAG))) !== 0)) {
                    this.state = 459;
                    this.tag();
                }

                this.state = 462;
                this.componentType(); 
            }
            this.state = 467;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_componentType;
    return this;
}

ComponentTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentTypeContext.prototype.constructor = ComponentTypeContext;

ComponentTypeContext.prototype.namedType = function() {
    return this.getTypedRuleContext(NamedTypeContext,0);
};

ComponentTypeContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OPTIONAL_LITERAL, 0);
};

ComponentTypeContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.DEFAULT_LITERAL, 0);
};

ComponentTypeContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ComponentTypeContext.prototype.COMPONENTS_LITERAL = function() {
    return this.getToken(ASN_3gppParser.COMPONENTS_LITERAL, 0);
};

ComponentTypeContext.prototype.OF_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OF_LITERAL, 0);
};

ComponentTypeContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ComponentTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitComponentType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ComponentTypeContext = ComponentTypeContext;

ASN_3gppParser.prototype.componentType = function() {

    var localctx = new ComponentTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ASN_3gppParser.RULE_componentType);
    try {
        this.state = 477;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 468;
            this.namedType();
            this.state = 472;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case ASN_3gppParser.OPTIONAL_LITERAL:
            	this.state = 469;
            	this.match(ASN_3gppParser.OPTIONAL_LITERAL);
            	break;
            case ASN_3gppParser.DEFAULT_LITERAL:
            	this.state = 470;
            	this.match(ASN_3gppParser.DEFAULT_LITERAL);
            	this.state = 471;
            	this.value();
            	break;
            case ASN_3gppParser.NEED_LITERAL:
            case ASN_3gppParser.COND_LITERAL:
            case ASN_3gppParser.INVALID_TAG:
            case ASN_3gppParser.R_BRACE:
            case ASN_3gppParser.COMMA:
            case ASN_3gppParser.DOUBLE_R_BRACKET:
            case ASN_3gppParser.EXTENSTIONENDMARKER:
            	break;
            default:
            	break;
            }
            break;
        case ASN_3gppParser.COMPONENTS_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 474;
            this.match(ASN_3gppParser.COMPONENTS_LITERAL);
            this.state = 475;
            this.match(ASN_3gppParser.OF_LITERAL);
            this.state = 476;
            this.asnType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_tag;
    return this;
}

TagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TagContext.prototype.constructor = TagContext;

TagContext.prototype.needTag = function() {
    return this.getTypedRuleContext(NeedTagContext,0);
};

TagContext.prototype.condTag = function() {
    return this.getTypedRuleContext(CondTagContext,0);
};

TagContext.prototype.INVALID_TAG = function() {
    return this.getToken(ASN_3gppParser.INVALID_TAG, 0);
};

TagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitTag(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.TagContext = TagContext;

ASN_3gppParser.prototype.tag = function() {

    var localctx = new TagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ASN_3gppParser.RULE_tag);
    try {
        this.state = 482;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.NEED_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 479;
            this.needTag();
            break;
        case ASN_3gppParser.COND_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 480;
            this.condTag();
            break;
        case ASN_3gppParser.INVALID_TAG:
            this.enterOuterAlt(localctx, 3);
            this.state = 481;
            this.match(ASN_3gppParser.INVALID_TAG);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NeedTagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_needTag;
    return this;
}

NeedTagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NeedTagContext.prototype.constructor = NeedTagContext;

NeedTagContext.prototype.NEED_LITERAL = function() {
    return this.getToken(ASN_3gppParser.NEED_LITERAL, 0);
};

NeedTagContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

NeedTagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitNeedTag(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.NeedTagContext = NeedTagContext;

ASN_3gppParser.prototype.needTag = function() {

    var localctx = new NeedTagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ASN_3gppParser.RULE_needTag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.match(ASN_3gppParser.NEED_LITERAL);
        this.state = 485;
        this.match(ASN_3gppParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CondTagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_condTag;
    return this;
}

CondTagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CondTagContext.prototype.constructor = CondTagContext;

CondTagContext.prototype.COND_LITERAL = function() {
    return this.getToken(ASN_3gppParser.COND_LITERAL, 0);
};

CondTagContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

CondTagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitCondTag(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.CondTagContext = CondTagContext;

ASN_3gppParser.prototype.condTag = function() {

    var localctx = new CondTagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ASN_3gppParser.RULE_condTag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this.match(ASN_3gppParser.COND_LITERAL);
        this.state = 488;
        this.match(ASN_3gppParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionAdditions;
    return this;
}

ExtensionAdditionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionsContext.prototype.constructor = ExtensionAdditionsContext;

ExtensionAdditionsContext.prototype.COMMA = function() {
    return this.getToken(ASN_3gppParser.COMMA, 0);
};

ExtensionAdditionsContext.prototype.extensionAdditionList = function() {
    return this.getTypedRuleContext(ExtensionAdditionListContext,0);
};

ExtensionAdditionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionAdditions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionAdditionsContext = ExtensionAdditionsContext;

ASN_3gppParser.prototype.extensionAdditions = function() {

    var localctx = new ExtensionAdditionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ASN_3gppParser.RULE_extensionAdditions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 490;
            this.match(ASN_3gppParser.COMMA);
            this.state = 491;
            this.extensionAdditionList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionAdditionList;
    return this;
}

ExtensionAdditionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionListContext.prototype.constructor = ExtensionAdditionListContext;

ExtensionAdditionListContext.prototype.extensionAddition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExtensionAdditionContext);
    } else {
        return this.getTypedRuleContext(ExtensionAdditionContext,i);
    }
};

ExtensionAdditionListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ExtensionAdditionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionAdditionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionAdditionListContext = ExtensionAdditionListContext;

ASN_3gppParser.prototype.extensionAdditionList = function() {

    var localctx = new ExtensionAdditionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ASN_3gppParser.RULE_extensionAdditionList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 494;
        this.extensionAddition();
        this.state = 499;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 495;
                this.match(ASN_3gppParser.COMMA);
                this.state = 496;
                this.extensionAddition(); 
            }
            this.state = 501;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionAddition;
    return this;
}

ExtensionAdditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionContext.prototype.constructor = ExtensionAdditionContext;

ExtensionAdditionContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

ExtensionAdditionContext.prototype.extensionAdditionGroup = function() {
    return this.getTypedRuleContext(ExtensionAdditionGroupContext,0);
};

ExtensionAdditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionAddition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionAdditionContext = ExtensionAdditionContext;

ASN_3gppParser.prototype.extensionAddition = function() {

    var localctx = new ExtensionAdditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ASN_3gppParser.RULE_extensionAddition);
    try {
        this.state = 504;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.COMPONENTS_LITERAL:
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 502;
            this.componentType();
            break;
        case ASN_3gppParser.DOUBLE_L_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 503;
            this.extensionAdditionGroup();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionAdditionGroup;
    return this;
}

ExtensionAdditionGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionGroupContext.prototype.constructor = ExtensionAdditionGroupContext;

ExtensionAdditionGroupContext.prototype.DOUBLE_L_BRACKET = function() {
    return this.getToken(ASN_3gppParser.DOUBLE_L_BRACKET, 0);
};

ExtensionAdditionGroupContext.prototype.versionNumber = function() {
    return this.getTypedRuleContext(VersionNumberContext,0);
};

ExtensionAdditionGroupContext.prototype.componentTypeList = function() {
    return this.getTypedRuleContext(ComponentTypeListContext,0);
};

ExtensionAdditionGroupContext.prototype.DOUBLE_R_BRACKET = function() {
    return this.getToken(ASN_3gppParser.DOUBLE_R_BRACKET, 0);
};

ExtensionAdditionGroupContext.prototype.tag = function() {
    return this.getTypedRuleContext(TagContext,0);
};

ExtensionAdditionGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionAdditionGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionAdditionGroupContext = ExtensionAdditionGroupContext;

ASN_3gppParser.prototype.extensionAdditionGroup = function() {

    var localctx = new ExtensionAdditionGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ASN_3gppParser.RULE_extensionAdditionGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 506;
        this.match(ASN_3gppParser.DOUBLE_L_BRACKET);
        this.state = 507;
        this.versionNumber();
        this.state = 508;
        this.componentTypeList();
        this.state = 510;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASN_3gppParser.NEED_LITERAL) | (1 << ASN_3gppParser.COND_LITERAL) | (1 << ASN_3gppParser.INVALID_TAG))) !== 0)) {
            this.state = 509;
            this.tag();
        }

        this.state = 512;
        this.match(ASN_3gppParser.DOUBLE_R_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VersionNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_versionNumber;
    return this;
}

VersionNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionNumberContext.prototype.constructor = VersionNumberContext;

VersionNumberContext.prototype.NUMBER = function() {
    return this.getToken(ASN_3gppParser.NUMBER, 0);
};

VersionNumberContext.prototype.COLON = function() {
    return this.getToken(ASN_3gppParser.COLON, 0);
};

VersionNumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitVersionNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.VersionNumberContext = VersionNumberContext;

ASN_3gppParser.prototype.versionNumber = function() {

    var localctx = new VersionNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ASN_3gppParser.RULE_versionNumber);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.NUMBER) {
            this.state = 514;
            this.match(ASN_3gppParser.NUMBER);
            this.state = 515;
            this.match(ASN_3gppParser.COLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SequenceOfTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_sequenceOfType;
    return this;
}

SequenceOfTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SequenceOfTypeContext.prototype.constructor = SequenceOfTypeContext;

SequenceOfTypeContext.prototype.SEQUENCE_LITERAL = function() {
    return this.getToken(ASN_3gppParser.SEQUENCE_LITERAL, 0);
};

SequenceOfTypeContext.prototype.OF_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OF_LITERAL, 0);
};

SequenceOfTypeContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

SequenceOfTypeContext.prototype.namedType = function() {
    return this.getTypedRuleContext(NamedTypeContext,0);
};

SequenceOfTypeContext.prototype.L_PARAN = function() {
    return this.getToken(ASN_3gppParser.L_PARAN, 0);
};

SequenceOfTypeContext.prototype.R_PARAN = function() {
    return this.getToken(ASN_3gppParser.R_PARAN, 0);
};

SequenceOfTypeContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

SequenceOfTypeContext.prototype.sizeConstraint = function() {
    return this.getTypedRuleContext(SizeConstraintContext,0);
};

SequenceOfTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSequenceOfType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SequenceOfTypeContext = SequenceOfTypeContext;

ASN_3gppParser.prototype.sequenceOfType = function() {

    var localctx = new SequenceOfTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ASN_3gppParser.RULE_sequenceOfType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 518;
        this.match(ASN_3gppParser.SEQUENCE_LITERAL);
        this.state = 526;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.L_PARAN) {
            this.state = 519;
            this.match(ASN_3gppParser.L_PARAN);
            this.state = 522;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ASN_3gppParser.L_PARAN:
                this.state = 520;
                this.constraint();
                break;
            case ASN_3gppParser.SIZE_LITERAL:
                this.state = 521;
                this.sizeConstraint();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 524;
            this.match(ASN_3gppParser.R_PARAN);
        }

        this.state = 528;
        this.match(ASN_3gppParser.OF_LITERAL);
        this.state = 531;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.state = 529;
            this.asnType();
            break;

        case 2:
            this.state = 530;
            this.namedType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SizeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_sizeConstraint;
    return this;
}

SizeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SizeConstraintContext.prototype.constructor = SizeConstraintContext;

SizeConstraintContext.prototype.SIZE_LITERAL = function() {
    return this.getToken(ASN_3gppParser.SIZE_LITERAL, 0);
};

SizeConstraintContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

SizeConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSizeConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SizeConstraintContext = SizeConstraintContext;

ASN_3gppParser.prototype.sizeConstraint = function() {

    var localctx = new SizeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ASN_3gppParser.RULE_sizeConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 533;
        this.match(ASN_3gppParser.SIZE_LITERAL);
        this.state = 534;
        this.constraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterizedAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_parameterizedAssignment;
    return this;
}

ParameterizedAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterizedAssignmentContext.prototype.constructor = ParameterizedAssignmentContext;

ParameterizedAssignmentContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ParameterizedAssignmentContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASN_3gppParser.ASSIGN_OP, 0);
};

ParameterizedAssignmentContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ParameterizedAssignmentContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ParameterizedAssignmentContext.prototype.valueSet = function() {
    return this.getTypedRuleContext(ValueSetContext,0);
};

ParameterizedAssignmentContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ParameterizedAssignmentContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

ParameterizedAssignmentContext.prototype.objectClass = function() {
    return this.getTypedRuleContext(ObjectClassContext,0);
};

ParameterizedAssignmentContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

ParameterizedAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitParameterizedAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ParameterizedAssignmentContext = ParameterizedAssignmentContext;

ASN_3gppParser.prototype.parameterizedAssignment = function() {

    var localctx = new ParameterizedAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ASN_3gppParser.RULE_parameterizedAssignment);
    try {
        this.state = 550;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.L_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 536;
            this.parameterList();

            this.state = 537;
            this.match(ASN_3gppParser.ASSIGN_OP);
            this.state = 541;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            switch(la_) {
            case 1:
                this.state = 538;
                this.asnType();
                break;

            case 2:
                this.state = 539;
                this.value();
                break;

            case 3:
                this.state = 540;
                this.valueSet();
                break;

            }
            break;
        case ASN_3gppParser.TYPE_IDENTIFIER_LITERAL:
        case ASN_3gppParser.ABSTRACT_SYNTAX_LITERAL:
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 543;
            this.definedObjectClass();
            this.state = 544;
            this.match(ASN_3gppParser.ASSIGN_OP);
            this.state = 548;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
            switch(la_) {
            case 1:
                this.state = 545;
                this.object();
                break;

            case 2:
                this.state = 546;
                this.objectClass();
                break;

            case 3:
                this.state = 547;
                this.objectSet();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

ParameterListContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

ParameterListContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

ParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ParameterListContext = ParameterListContext;

ASN_3gppParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ASN_3gppParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 552;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 553;
        this.parameter();
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.COMMA) {
            this.state = 554;
            this.match(ASN_3gppParser.COMMA);
            this.state = 555;
            this.parameter();
            this.state = 560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 561;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

ParameterContext.prototype.paramGovernor = function() {
    return this.getTypedRuleContext(ParamGovernorContext,0);
};

ParameterContext.prototype.COLON = function() {
    return this.getToken(ASN_3gppParser.COLON, 0);
};

ParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ParameterContext = ParameterContext;

ASN_3gppParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ASN_3gppParser.RULE_parameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        if(la_===1) {
            this.state = 563;
            this.paramGovernor();
            this.state = 564;
            this.match(ASN_3gppParser.COLON);

        }
        this.state = 568;
        this.match(ASN_3gppParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamGovernorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_paramGovernor;
    return this;
}

ParamGovernorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamGovernorContext.prototype.constructor = ParamGovernorContext;

ParamGovernorContext.prototype.governor = function() {
    return this.getTypedRuleContext(GovernorContext,0);
};

ParamGovernorContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

ParamGovernorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitParamGovernor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ParamGovernorContext = ParamGovernorContext;

ASN_3gppParser.prototype.paramGovernor = function() {

    var localctx = new ParamGovernorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ASN_3gppParser.RULE_paramGovernor);
    try {
        this.state = 572;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 570;
            this.governor();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 571;
            this.match(ASN_3gppParser.IDENTIFIER);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GovernorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_governor;
    return this;
}

GovernorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GovernorContext.prototype.constructor = GovernorContext;

GovernorContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

GovernorContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

GovernorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitGovernor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.GovernorContext = GovernorContext;

ASN_3gppParser.prototype.governor = function() {

    var localctx = new GovernorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ASN_3gppParser.RULE_governor);
    try {
        this.state = 576;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 574;
            this.asnType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 575;
            this.definedObjectClass();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectClassAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectClassAssignment;
    return this;
}

ObjectClassAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectClassAssignmentContext.prototype.constructor = ObjectClassAssignmentContext;

ObjectClassAssignmentContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASN_3gppParser.ASSIGN_OP, 0);
};

ObjectClassAssignmentContext.prototype.objectClass = function() {
    return this.getTypedRuleContext(ObjectClassContext,0);
};

ObjectClassAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectClassAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectClassAssignmentContext = ObjectClassAssignmentContext;

ASN_3gppParser.prototype.objectClassAssignment = function() {

    var localctx = new ObjectClassAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ASN_3gppParser.RULE_objectClassAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this.match(ASN_3gppParser.ASSIGN_OP);
        this.state = 579;
        this.objectClass();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectClassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectClass;
    return this;
}

ObjectClassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectClassContext.prototype.constructor = ObjectClassContext;

ObjectClassContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ObjectClassContext.prototype.objectClassDefn = function() {
    return this.getTypedRuleContext(ObjectClassDefnContext,0);
};

ObjectClassContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectClass(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectClassContext = ObjectClassContext;

ASN_3gppParser.prototype.objectClass = function() {

    var localctx = new ObjectClassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ASN_3gppParser.RULE_objectClass);
    try {
        this.state = 583;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.TYPE_IDENTIFIER_LITERAL:
        case ASN_3gppParser.ABSTRACT_SYNTAX_LITERAL:
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 581;
            this.definedObjectClass();
            break;
        case ASN_3gppParser.CLASS_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 582;
            this.objectClassDefn();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinedObjectClassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_definedObjectClass;
    return this;
}

DefinedObjectClassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinedObjectClassContext.prototype.constructor = DefinedObjectClassContext;

DefinedObjectClassContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.IDENTIFIER);
    } else {
        return this.getToken(ASN_3gppParser.IDENTIFIER, i);
    }
};


DefinedObjectClassContext.prototype.DOT = function() {
    return this.getToken(ASN_3gppParser.DOT, 0);
};

DefinedObjectClassContext.prototype.TYPE_IDENTIFIER_LITERAL = function() {
    return this.getToken(ASN_3gppParser.TYPE_IDENTIFIER_LITERAL, 0);
};

DefinedObjectClassContext.prototype.ABSTRACT_SYNTAX_LITERAL = function() {
    return this.getToken(ASN_3gppParser.ABSTRACT_SYNTAX_LITERAL, 0);
};

DefinedObjectClassContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitDefinedObjectClass(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.DefinedObjectClassContext = DefinedObjectClassContext;

ASN_3gppParser.prototype.definedObjectClass = function() {

    var localctx = new DefinedObjectClassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ASN_3gppParser.RULE_definedObjectClass);
    try {
        this.state = 592;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 587;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
            if(la_===1) {
                this.state = 585;
                this.match(ASN_3gppParser.IDENTIFIER);
                this.state = 586;
                this.match(ASN_3gppParser.DOT);

            }
            this.state = 589;
            this.match(ASN_3gppParser.IDENTIFIER);
            break;
        case ASN_3gppParser.TYPE_IDENTIFIER_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 590;
            this.match(ASN_3gppParser.TYPE_IDENTIFIER_LITERAL);
            break;
        case ASN_3gppParser.ABSTRACT_SYNTAX_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 591;
            this.match(ASN_3gppParser.ABSTRACT_SYNTAX_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsefulObjectClassReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_usefulObjectClassReference;
    return this;
}

UsefulObjectClassReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsefulObjectClassReferenceContext.prototype.constructor = UsefulObjectClassReferenceContext;

UsefulObjectClassReferenceContext.prototype.TYPE_IDENTIFIER_LITERAL = function() {
    return this.getToken(ASN_3gppParser.TYPE_IDENTIFIER_LITERAL, 0);
};

UsefulObjectClassReferenceContext.prototype.ABSTRACT_SYNTAX_LITERAL = function() {
    return this.getToken(ASN_3gppParser.ABSTRACT_SYNTAX_LITERAL, 0);
};

UsefulObjectClassReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitUsefulObjectClassReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.UsefulObjectClassReferenceContext = UsefulObjectClassReferenceContext;

ASN_3gppParser.prototype.usefulObjectClassReference = function() {

    var localctx = new UsefulObjectClassReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ASN_3gppParser.RULE_usefulObjectClassReference);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        _la = this._input.LA(1);
        if(!(_la===ASN_3gppParser.TYPE_IDENTIFIER_LITERAL || _la===ASN_3gppParser.ABSTRACT_SYNTAX_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExternalObjectClassReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_externalObjectClassReference;
    return this;
}

ExternalObjectClassReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternalObjectClassReferenceContext.prototype.constructor = ExternalObjectClassReferenceContext;

ExternalObjectClassReferenceContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.IDENTIFIER);
    } else {
        return this.getToken(ASN_3gppParser.IDENTIFIER, i);
    }
};


ExternalObjectClassReferenceContext.prototype.DOT = function() {
    return this.getToken(ASN_3gppParser.DOT, 0);
};

ExternalObjectClassReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExternalObjectClassReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExternalObjectClassReferenceContext = ExternalObjectClassReferenceContext;

ASN_3gppParser.prototype.externalObjectClassReference = function() {

    var localctx = new ExternalObjectClassReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ASN_3gppParser.RULE_externalObjectClassReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 597;
        this.match(ASN_3gppParser.DOT);
        this.state = 598;
        this.match(ASN_3gppParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectClassDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectClassDefn;
    return this;
}

ObjectClassDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectClassDefnContext.prototype.constructor = ObjectClassDefnContext;

ObjectClassDefnContext.prototype.CLASS_LITERAL = function() {
    return this.getToken(ASN_3gppParser.CLASS_LITERAL, 0);
};

ObjectClassDefnContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

ObjectClassDefnContext.prototype.fieldSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldSpecContext);
    } else {
        return this.getTypedRuleContext(FieldSpecContext,i);
    }
};

ObjectClassDefnContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

ObjectClassDefnContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ObjectClassDefnContext.prototype.withSyntaxSpec = function() {
    return this.getTypedRuleContext(WithSyntaxSpecContext,0);
};

ObjectClassDefnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectClassDefn(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectClassDefnContext = ObjectClassDefnContext;

ASN_3gppParser.prototype.objectClassDefn = function() {

    var localctx = new ObjectClassDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ASN_3gppParser.RULE_objectClassDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600;
        this.match(ASN_3gppParser.CLASS_LITERAL);
        this.state = 601;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 602;
        this.fieldSpec();
        this.state = 607;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.COMMA) {
            this.state = 603;
            this.match(ASN_3gppParser.COMMA);
            this.state = 604;
            this.fieldSpec();
            this.state = 609;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 610;
        this.match(ASN_3gppParser.R_BRACE);
        this.state = 612;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.WITH_LITERAL) {
            this.state = 611;
            this.withSyntaxSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithSyntaxSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_withSyntaxSpec;
    return this;
}

WithSyntaxSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithSyntaxSpecContext.prototype.constructor = WithSyntaxSpecContext;

WithSyntaxSpecContext.prototype.WITH_LITERAL = function() {
    return this.getToken(ASN_3gppParser.WITH_LITERAL, 0);
};

WithSyntaxSpecContext.prototype.SYNTAX_LITERAL = function() {
    return this.getToken(ASN_3gppParser.SYNTAX_LITERAL, 0);
};

WithSyntaxSpecContext.prototype.syntaxList = function() {
    return this.getTypedRuleContext(SyntaxListContext,0);
};

WithSyntaxSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitWithSyntaxSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.WithSyntaxSpecContext = WithSyntaxSpecContext;

ASN_3gppParser.prototype.withSyntaxSpec = function() {

    var localctx = new WithSyntaxSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ASN_3gppParser.RULE_withSyntaxSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 614;
        this.match(ASN_3gppParser.WITH_LITERAL);
        this.state = 615;
        this.match(ASN_3gppParser.SYNTAX_LITERAL);
        this.state = 616;
        this.syntaxList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_syntaxList;
    return this;
}

SyntaxListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxListContext.prototype.constructor = SyntaxListContext;

SyntaxListContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

SyntaxListContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

SyntaxListContext.prototype.tokenOrGroupSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TokenOrGroupSpecContext);
    } else {
        return this.getTypedRuleContext(TokenOrGroupSpecContext,i);
    }
};

SyntaxListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSyntaxList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SyntaxListContext = SyntaxListContext;

ASN_3gppParser.prototype.syntaxList = function() {

    var localctx = new SyntaxListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ASN_3gppParser.RULE_syntaxList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 620; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 619;
            this.tokenOrGroupSpec();
            this.state = 622; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ASN_3gppParser.AMPERSAND || _la===ASN_3gppParser.COMMA || _la===ASN_3gppParser.L_BRACKET || _la===ASN_3gppParser.IDENTIFIER);
        this.state = 624;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TokenOrGroupSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_tokenOrGroupSpec;
    return this;
}

TokenOrGroupSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TokenOrGroupSpecContext.prototype.constructor = TokenOrGroupSpecContext;

TokenOrGroupSpecContext.prototype.requiredToken = function() {
    return this.getTypedRuleContext(RequiredTokenContext,0);
};

TokenOrGroupSpecContext.prototype.optionalGroup = function() {
    return this.getTypedRuleContext(OptionalGroupContext,0);
};

TokenOrGroupSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitTokenOrGroupSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.TokenOrGroupSpecContext = TokenOrGroupSpecContext;

ASN_3gppParser.prototype.tokenOrGroupSpec = function() {

    var localctx = new TokenOrGroupSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ASN_3gppParser.RULE_tokenOrGroupSpec);
    try {
        this.state = 628;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.AMPERSAND:
        case ASN_3gppParser.COMMA:
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 626;
            this.requiredToken();
            break;
        case ASN_3gppParser.L_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 627;
            this.optionalGroup();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_optionalGroup;
    return this;
}

OptionalGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalGroupContext.prototype.constructor = OptionalGroupContext;

OptionalGroupContext.prototype.L_BRACKET = function() {
    return this.getToken(ASN_3gppParser.L_BRACKET, 0);
};

OptionalGroupContext.prototype.R_BRACKET = function() {
    return this.getToken(ASN_3gppParser.R_BRACKET, 0);
};

OptionalGroupContext.prototype.tokenOrGroupSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TokenOrGroupSpecContext);
    } else {
        return this.getTypedRuleContext(TokenOrGroupSpecContext,i);
    }
};

OptionalGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitOptionalGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.OptionalGroupContext = OptionalGroupContext;

ASN_3gppParser.prototype.optionalGroup = function() {

    var localctx = new OptionalGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ASN_3gppParser.RULE_optionalGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.match(ASN_3gppParser.L_BRACKET);
        this.state = 632; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 631;
            this.tokenOrGroupSpec();
            this.state = 634; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ASN_3gppParser.AMPERSAND || _la===ASN_3gppParser.COMMA || _la===ASN_3gppParser.L_BRACKET || _la===ASN_3gppParser.IDENTIFIER);
        this.state = 636;
        this.match(ASN_3gppParser.R_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RequiredTokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_requiredToken;
    return this;
}

RequiredTokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiredTokenContext.prototype.constructor = RequiredTokenContext;

RequiredTokenContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

RequiredTokenContext.prototype.primitiveFieldName = function() {
    return this.getTypedRuleContext(PrimitiveFieldNameContext,0);
};

RequiredTokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitRequiredToken(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.RequiredTokenContext = RequiredTokenContext;

ASN_3gppParser.prototype.requiredToken = function() {

    var localctx = new RequiredTokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ASN_3gppParser.RULE_requiredToken);
    try {
        this.state = 640;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.COMMA:
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 638;
            this.literal();
            break;
        case ASN_3gppParser.AMPERSAND:
            this.enterOuterAlt(localctx, 2);
            this.state = 639;
            this.primitiveFieldName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

LiteralContext.prototype.COMMA = function() {
    return this.getToken(ASN_3gppParser.COMMA, 0);
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.LiteralContext = LiteralContext;

ASN_3gppParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ASN_3gppParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        _la = this._input.LA(1);
        if(!(_la===ASN_3gppParser.COMMA || _la===ASN_3gppParser.IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimitiveFieldNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_primitiveFieldName;
    return this;
}

PrimitiveFieldNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveFieldNameContext.prototype.constructor = PrimitiveFieldNameContext;

PrimitiveFieldNameContext.prototype.AMPERSAND = function() {
    return this.getToken(ASN_3gppParser.AMPERSAND, 0);
};

PrimitiveFieldNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

PrimitiveFieldNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitPrimitiveFieldName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.PrimitiveFieldNameContext = PrimitiveFieldNameContext;

ASN_3gppParser.prototype.primitiveFieldName = function() {

    var localctx = new PrimitiveFieldNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ASN_3gppParser.RULE_primitiveFieldName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 645;
        this.match(ASN_3gppParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_fieldSpec;
    return this;
}

FieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldSpecContext.prototype.constructor = FieldSpecContext;

FieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASN_3gppParser.AMPERSAND, 0);
};

FieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

FieldSpecContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

FieldSpecContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};

FieldSpecContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

FieldSpecContext.prototype.typeOptionalitySpec = function() {
    return this.getTypedRuleContext(TypeOptionalitySpecContext,0);
};

FieldSpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OPTIONAL_LITERAL, 0);
};

FieldSpecContext.prototype.valueSetOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueSetOptionalitySpecContext,0);
};

FieldSpecContext.prototype.UNIQUE_LITERAL = function() {
    return this.getToken(ASN_3gppParser.UNIQUE_LITERAL, 0);
};

FieldSpecContext.prototype.valueOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueOptionalitySpecContext,0);
};

FieldSpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.DEFAULT_LITERAL, 0);
};

FieldSpecContext.prototype.valueSet = function() {
    return this.getTypedRuleContext(ValueSetContext,0);
};

FieldSpecContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

FieldSpecContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

FieldSpecContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

FieldSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitFieldSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.FieldSpecContext = FieldSpecContext;

ASN_3gppParser.prototype.fieldSpec = function() {

    var localctx = new FieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ASN_3gppParser.RULE_fieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 647;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 648;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 682;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.state = 650;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
                this.state = 649;
                this.typeOptionalitySpec();
            }

            break;

        case 2:
            this.state = 652;
            this.asnType();
            this.state = 662;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            switch(la_) {
            case 1:
                this.state = 654;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
                    this.state = 653;
                    this.valueSetOptionalitySpec();
                }

                break;

            case 2:
                this.state = 657;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASN_3gppParser.UNIQUE_LITERAL) {
                    this.state = 656;
                    this.match(ASN_3gppParser.UNIQUE_LITERAL);
                }

                this.state = 660;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
                    this.state = 659;
                    this.valueOptionalitySpec();
                }

                break;

            }
            break;

        case 3:
            this.state = 664;
            this.fieldName();
            this.state = 671;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case ASN_3gppParser.OPTIONAL_LITERAL:
            	this.state = 665;
            	this.match(ASN_3gppParser.OPTIONAL_LITERAL);
            	break;
            case ASN_3gppParser.DEFAULT_LITERAL:
            	this.state = 666;
            	this.match(ASN_3gppParser.DEFAULT_LITERAL);
            	this.state = 669;
            	this._errHandler.sync(this);
            	var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
            	switch(la_) {
            	case 1:
            	    this.state = 667;
            	    this.valueSet();
            	    break;

            	case 2:
            	    this.state = 668;
            	    this.value();
            	    break;

            	}
            	break;
            case ASN_3gppParser.R_BRACE:
            case ASN_3gppParser.COMMA:
            	break;
            default:
            	break;
            }
            break;

        case 4:
            this.state = 673;
            this.definedObjectClass();
            this.state = 680;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case ASN_3gppParser.OPTIONAL_LITERAL:
            	this.state = 674;
            	this.match(ASN_3gppParser.OPTIONAL_LITERAL);
            	break;
            case ASN_3gppParser.DEFAULT_LITERAL:
            	this.state = 675;
            	this.match(ASN_3gppParser.DEFAULT_LITERAL);
            	this.state = 678;
            	this._errHandler.sync(this);
            	switch(this._input.LA(1)) {
            	case ASN_3gppParser.L_BRACE:
            	    this.state = 676;
            	    this.objectSet();
            	    break;
            	case ASN_3gppParser.IDENTIFIER:
            	    this.state = 677;
            	    this.object();
            	    break;
            	default:
            	    throw new antlr4.error.NoViableAltException(this);
            	}
            	break;
            case ASN_3gppParser.R_BRACE:
            case ASN_3gppParser.COMMA:
            	break;
            default:
            	break;
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_typeFieldSpec;
    return this;
}

TypeFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeFieldSpecContext.prototype.constructor = TypeFieldSpecContext;

TypeFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASN_3gppParser.AMPERSAND, 0);
};

TypeFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

TypeFieldSpecContext.prototype.typeOptionalitySpec = function() {
    return this.getTypedRuleContext(TypeOptionalitySpecContext,0);
};

TypeFieldSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitTypeFieldSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.TypeFieldSpecContext = TypeFieldSpecContext;

ASN_3gppParser.prototype.typeFieldSpec = function() {

    var localctx = new TypeFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ASN_3gppParser.RULE_typeFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 685;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 687;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
            this.state = 686;
            this.typeOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_typeOptionalitySpec;
    return this;
}

TypeOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeOptionalitySpecContext.prototype.constructor = TypeOptionalitySpecContext;

TypeOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OPTIONAL_LITERAL, 0);
};

TypeOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.DEFAULT_LITERAL, 0);
};

TypeOptionalitySpecContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

TypeOptionalitySpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitTypeOptionalitySpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.TypeOptionalitySpecContext = TypeOptionalitySpecContext;

ASN_3gppParser.prototype.typeOptionalitySpec = function() {

    var localctx = new TypeOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ASN_3gppParser.RULE_typeOptionalitySpec);
    try {
        this.state = 692;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 689;
            this.match(ASN_3gppParser.OPTIONAL_LITERAL);
            break;
        case ASN_3gppParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 690;
            this.match(ASN_3gppParser.DEFAULT_LITERAL);
            this.state = 691;
            this.asnType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FixedTypeValueFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_fixedTypeValueFieldSpec;
    return this;
}

FixedTypeValueFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FixedTypeValueFieldSpecContext.prototype.constructor = FixedTypeValueFieldSpecContext;

FixedTypeValueFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASN_3gppParser.AMPERSAND, 0);
};

FixedTypeValueFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

FixedTypeValueFieldSpecContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

FixedTypeValueFieldSpecContext.prototype.UNIQUE_LITERAL = function() {
    return this.getToken(ASN_3gppParser.UNIQUE_LITERAL, 0);
};

FixedTypeValueFieldSpecContext.prototype.valueOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueOptionalitySpecContext,0);
};

FixedTypeValueFieldSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitFixedTypeValueFieldSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.FixedTypeValueFieldSpecContext = FixedTypeValueFieldSpecContext;

ASN_3gppParser.prototype.fixedTypeValueFieldSpec = function() {

    var localctx = new FixedTypeValueFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ASN_3gppParser.RULE_fixedTypeValueFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 694;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 695;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 696;
        this.asnType();
        this.state = 698;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.UNIQUE_LITERAL) {
            this.state = 697;
            this.match(ASN_3gppParser.UNIQUE_LITERAL);
        }

        this.state = 701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
            this.state = 700;
            this.valueOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_valueOptionalitySpec;
    return this;
}

ValueOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueOptionalitySpecContext.prototype.constructor = ValueOptionalitySpecContext;

ValueOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OPTIONAL_LITERAL, 0);
};

ValueOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.DEFAULT_LITERAL, 0);
};

ValueOptionalitySpecContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ValueOptionalitySpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitValueOptionalitySpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ValueOptionalitySpecContext = ValueOptionalitySpecContext;

ASN_3gppParser.prototype.valueOptionalitySpec = function() {

    var localctx = new ValueOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ASN_3gppParser.RULE_valueOptionalitySpec);
    try {
        this.state = 706;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 703;
            this.match(ASN_3gppParser.OPTIONAL_LITERAL);
            break;
        case ASN_3gppParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 704;
            this.match(ASN_3gppParser.DEFAULT_LITERAL);
            this.state = 705;
            this.value();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableTypeValueFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_variableTypeValueFieldSpec;
    return this;
}

VariableTypeValueFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableTypeValueFieldSpecContext.prototype.constructor = VariableTypeValueFieldSpecContext;

VariableTypeValueFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASN_3gppParser.AMPERSAND, 0);
};

VariableTypeValueFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

VariableTypeValueFieldSpecContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};

VariableTypeValueFieldSpecContext.prototype.valueOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueOptionalitySpecContext,0);
};

VariableTypeValueFieldSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitVariableTypeValueFieldSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.VariableTypeValueFieldSpecContext = VariableTypeValueFieldSpecContext;

ASN_3gppParser.prototype.variableTypeValueFieldSpec = function() {

    var localctx = new VariableTypeValueFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ASN_3gppParser.RULE_variableTypeValueFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 708;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 709;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 710;
        this.fieldName();
        this.state = 712;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
            this.state = 711;
            this.valueOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FixedTypeValueSetFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_fixedTypeValueSetFieldSpec;
    return this;
}

FixedTypeValueSetFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FixedTypeValueSetFieldSpecContext.prototype.constructor = FixedTypeValueSetFieldSpecContext;

FixedTypeValueSetFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASN_3gppParser.AMPERSAND, 0);
};

FixedTypeValueSetFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

FixedTypeValueSetFieldSpecContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

FixedTypeValueSetFieldSpecContext.prototype.valueSetOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueSetOptionalitySpecContext,0);
};

FixedTypeValueSetFieldSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitFixedTypeValueSetFieldSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.FixedTypeValueSetFieldSpecContext = FixedTypeValueSetFieldSpecContext;

ASN_3gppParser.prototype.fixedTypeValueSetFieldSpec = function() {

    var localctx = new FixedTypeValueSetFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ASN_3gppParser.RULE_fixedTypeValueSetFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 714;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 715;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 716;
        this.asnType();
        this.state = 718;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
            this.state = 717;
            this.valueSetOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueSetOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_valueSetOptionalitySpec;
    return this;
}

ValueSetOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueSetOptionalitySpecContext.prototype.constructor = ValueSetOptionalitySpecContext;

ValueSetOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OPTIONAL_LITERAL, 0);
};

ValueSetOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.DEFAULT_LITERAL, 0);
};

ValueSetOptionalitySpecContext.prototype.valueSet = function() {
    return this.getTypedRuleContext(ValueSetContext,0);
};

ValueSetOptionalitySpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitValueSetOptionalitySpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ValueSetOptionalitySpecContext = ValueSetOptionalitySpecContext;

ASN_3gppParser.prototype.valueSetOptionalitySpec = function() {

    var localctx = new ValueSetOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ASN_3gppParser.RULE_valueSetOptionalitySpec);
    try {
        this.state = 723;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 720;
            this.match(ASN_3gppParser.OPTIONAL_LITERAL);
            break;
        case ASN_3gppParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.match(ASN_3gppParser.DEFAULT_LITERAL);
            this.state = 722;
            this.valueSet();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_object;
    return this;
}

ObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectContext.prototype.constructor = ObjectContext;

ObjectContext.prototype.definedObject = function() {
    return this.getTypedRuleContext(DefinedObjectContext,0);
};

ObjectContext.prototype.parameterizedObject = function() {
    return this.getTypedRuleContext(ParameterizedObjectContext,0);
};

ObjectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObject(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectContext = ObjectContext;

ASN_3gppParser.prototype.object = function() {

    var localctx = new ObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ASN_3gppParser.RULE_object);
    try {
        this.state = 727;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 725;
            this.definedObject();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 726;
            this.parameterizedObject();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterizedObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_parameterizedObject;
    return this;
}

ParameterizedObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterizedObjectContext.prototype.constructor = ParameterizedObjectContext;

ParameterizedObjectContext.prototype.definedObject = function() {
    return this.getTypedRuleContext(DefinedObjectContext,0);
};

ParameterizedObjectContext.prototype.actualParameterList = function() {
    return this.getTypedRuleContext(ActualParameterListContext,0);
};

ParameterizedObjectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitParameterizedObject(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ParameterizedObjectContext = ParameterizedObjectContext;

ASN_3gppParser.prototype.parameterizedObject = function() {

    var localctx = new ParameterizedObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ASN_3gppParser.RULE_parameterizedObject);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 729;
        this.definedObject();
        this.state = 730;
        this.actualParameterList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinedObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_definedObject;
    return this;
}

DefinedObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinedObjectContext.prototype.constructor = DefinedObjectContext;

DefinedObjectContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

DefinedObjectContext.prototype.DOT = function() {
    return this.getToken(ASN_3gppParser.DOT, 0);
};

DefinedObjectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitDefinedObject(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.DefinedObjectContext = DefinedObjectContext;

ASN_3gppParser.prototype.definedObject = function() {

    var localctx = new DefinedObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ASN_3gppParser.RULE_definedObject);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 732;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 734;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.DOT) {
            this.state = 733;
            this.match(ASN_3gppParser.DOT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectSet;
    return this;
}

ObjectSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetContext.prototype.constructor = ObjectSetContext;

ObjectSetContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

ObjectSetContext.prototype.objectSetSpec = function() {
    return this.getTypedRuleContext(ObjectSetSpecContext,0);
};

ObjectSetContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

ObjectSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectSetContext = ObjectSetContext;

ASN_3gppParser.prototype.objectSet = function() {

    var localctx = new ObjectSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ASN_3gppParser.RULE_objectSet);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 736;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 737;
        this.objectSetSpec();
        this.state = 738;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectSetSpec;
    return this;
}

ObjectSetSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetSpecContext.prototype.constructor = ObjectSetSpecContext;

ObjectSetSpecContext.prototype.rootElementSetSpec = function() {
    return this.getTypedRuleContext(RootElementSetSpecContext,0);
};

ObjectSetSpecContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ObjectSetSpecContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASN_3gppParser.ELLIPSIS, 0);
};

ObjectSetSpecContext.prototype.additionalElementSetSpec = function() {
    return this.getTypedRuleContext(AdditionalElementSetSpecContext,0);
};

ObjectSetSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectSetSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectSetSpecContext = ObjectSetSpecContext;

ASN_3gppParser.prototype.objectSetSpec = function() {

    var localctx = new ObjectSetSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ASN_3gppParser.RULE_objectSetSpec);
    var _la = 0; // Token type
    try {
        this.state = 754;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.TRUE_LITERAL:
        case ASN_3gppParser.FALSE_LITERAL:
        case ASN_3gppParser.TRUE_SMALL_LITERAL:
        case ASN_3gppParser.FALSE_SMALL_LITERAL:
        case ASN_3gppParser.L_BRACE:
        case ASN_3gppParser.MINUS:
        case ASN_3gppParser.ALL_LITERAL:
        case ASN_3gppParser.MIN_LITERAL:
        case ASN_3gppParser.SIZE_LITERAL:
        case ASN_3gppParser.PATTERN_LITERAL:
        case ASN_3gppParser.NUMBER:
        case ASN_3gppParser.BSTRING:
        case ASN_3gppParser.CSTRING:
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 740;
            this.rootElementSetSpec();
            this.state = 747;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.COMMA) {
                this.state = 741;
                this.match(ASN_3gppParser.COMMA);
                this.state = 742;
                this.match(ASN_3gppParser.ELLIPSIS);
                this.state = 745;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASN_3gppParser.COMMA) {
                    this.state = 743;
                    this.match(ASN_3gppParser.COMMA);
                    this.state = 744;
                    this.additionalElementSetSpec();
                }

            }

            break;
        case ASN_3gppParser.ELLIPSIS:
            this.enterOuterAlt(localctx, 2);
            this.state = 749;
            this.match(ASN_3gppParser.ELLIPSIS);
            this.state = 752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.COMMA) {
                this.state = 750;
                this.match(ASN_3gppParser.COMMA);
                this.state = 751;
                this.additionalElementSetSpec();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_fieldName;
    return this;
}

FieldNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldNameContext.prototype.constructor = FieldNameContext;

FieldNameContext.prototype.AMPERSAND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.AMPERSAND);
    } else {
        return this.getToken(ASN_3gppParser.AMPERSAND, i);
    }
};


FieldNameContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.IDENTIFIER);
    } else {
        return this.getToken(ASN_3gppParser.IDENTIFIER, i);
    }
};


FieldNameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.DOT);
    } else {
        return this.getToken(ASN_3gppParser.DOT, i);
    }
};


FieldNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitFieldName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.FieldNameContext = FieldNameContext;

ASN_3gppParser.prototype.fieldName = function() {

    var localctx = new FieldNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ASN_3gppParser.RULE_fieldName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 756;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 757;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 764;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.AMPERSAND) {
            this.state = 759;
            this.match(ASN_3gppParser.AMPERSAND);
            this.state = 760;
            this.match(ASN_3gppParser.IDENTIFIER);
            this.state = 761;
            this.match(ASN_3gppParser.DOT);
            this.state = 766;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_valueSet;
    return this;
}

ValueSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueSetContext.prototype.constructor = ValueSetContext;

ValueSetContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

ValueSetContext.prototype.elementSetSpecs = function() {
    return this.getTypedRuleContext(ElementSetSpecsContext,0);
};

ValueSetContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

ValueSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitValueSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ValueSetContext = ValueSetContext;

ASN_3gppParser.prototype.valueSet = function() {

    var localctx = new ValueSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ASN_3gppParser.RULE_valueSet);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 767;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 768;
        this.elementSetSpecs();
        this.state = 769;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementSetSpecsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_elementSetSpecs;
    return this;
}

ElementSetSpecsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementSetSpecsContext.prototype.constructor = ElementSetSpecsContext;

ElementSetSpecsContext.prototype.rootElementSetSpec = function() {
    return this.getTypedRuleContext(RootElementSetSpecContext,0);
};

ElementSetSpecsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ElementSetSpecsContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASN_3gppParser.ELLIPSIS, 0);
};

ElementSetSpecsContext.prototype.additionalElementSetSpec = function() {
    return this.getTypedRuleContext(AdditionalElementSetSpecContext,0);
};

ElementSetSpecsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitElementSetSpecs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ElementSetSpecsContext = ElementSetSpecsContext;

ASN_3gppParser.prototype.elementSetSpecs = function() {

    var localctx = new ElementSetSpecsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ASN_3gppParser.RULE_elementSetSpecs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 771;
        this.rootElementSetSpec();
        this.state = 778;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.COMMA) {
            this.state = 772;
            this.match(ASN_3gppParser.COMMA);
            this.state = 773;
            this.match(ASN_3gppParser.ELLIPSIS);
            this.state = 776;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.COMMA) {
                this.state = 774;
                this.match(ASN_3gppParser.COMMA);
                this.state = 775;
                this.additionalElementSetSpec();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RootElementSetSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_rootElementSetSpec;
    return this;
}

RootElementSetSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootElementSetSpecContext.prototype.constructor = RootElementSetSpecContext;

RootElementSetSpecContext.prototype.elementSetSpec = function() {
    return this.getTypedRuleContext(ElementSetSpecContext,0);
};

RootElementSetSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitRootElementSetSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.RootElementSetSpecContext = RootElementSetSpecContext;

ASN_3gppParser.prototype.rootElementSetSpec = function() {

    var localctx = new RootElementSetSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ASN_3gppParser.RULE_rootElementSetSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 780;
        this.elementSetSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdditionalElementSetSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_additionalElementSetSpec;
    return this;
}

AdditionalElementSetSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditionalElementSetSpecContext.prototype.constructor = AdditionalElementSetSpecContext;

AdditionalElementSetSpecContext.prototype.elementSetSpec = function() {
    return this.getTypedRuleContext(ElementSetSpecContext,0);
};

AdditionalElementSetSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitAdditionalElementSetSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.AdditionalElementSetSpecContext = AdditionalElementSetSpecContext;

ASN_3gppParser.prototype.additionalElementSetSpec = function() {

    var localctx = new AdditionalElementSetSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ASN_3gppParser.RULE_additionalElementSetSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 782;
        this.elementSetSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementSetSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_elementSetSpec;
    return this;
}

ElementSetSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementSetSpecContext.prototype.constructor = ElementSetSpecContext;

ElementSetSpecContext.prototype.unions = function() {
    return this.getTypedRuleContext(UnionsContext,0);
};

ElementSetSpecContext.prototype.ALL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.ALL_LITERAL, 0);
};

ElementSetSpecContext.prototype.exclusions = function() {
    return this.getTypedRuleContext(ExclusionsContext,0);
};

ElementSetSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitElementSetSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ElementSetSpecContext = ElementSetSpecContext;

ASN_3gppParser.prototype.elementSetSpec = function() {

    var localctx = new ElementSetSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ASN_3gppParser.RULE_elementSetSpec);
    try {
        this.state = 787;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.TRUE_LITERAL:
        case ASN_3gppParser.FALSE_LITERAL:
        case ASN_3gppParser.TRUE_SMALL_LITERAL:
        case ASN_3gppParser.FALSE_SMALL_LITERAL:
        case ASN_3gppParser.L_BRACE:
        case ASN_3gppParser.MINUS:
        case ASN_3gppParser.MIN_LITERAL:
        case ASN_3gppParser.SIZE_LITERAL:
        case ASN_3gppParser.PATTERN_LITERAL:
        case ASN_3gppParser.NUMBER:
        case ASN_3gppParser.BSTRING:
        case ASN_3gppParser.CSTRING:
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 784;
            this.unions();
            break;
        case ASN_3gppParser.ALL_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 785;
            this.match(ASN_3gppParser.ALL_LITERAL);
            this.state = 786;
            this.exclusions();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_unions;
    return this;
}

UnionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionsContext.prototype.constructor = UnionsContext;

UnionsContext.prototype.intersections = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntersectionsContext);
    } else {
        return this.getTypedRuleContext(IntersectionsContext,i);
    }
};

UnionsContext.prototype.unionMark = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnionMarkContext);
    } else {
        return this.getTypedRuleContext(UnionMarkContext,i);
    }
};

UnionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitUnions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.UnionsContext = UnionsContext;

ASN_3gppParser.prototype.unions = function() {

    var localctx = new UnionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ASN_3gppParser.RULE_unions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 789;
        this.intersections();
        this.state = 795;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.PIPE || _la===ASN_3gppParser.UNION_LITERAL) {
            this.state = 790;
            this.unionMark();
            this.state = 791;
            this.intersections();
            this.state = 797;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExclusionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_exclusions;
    return this;
}

ExclusionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExclusionsContext.prototype.constructor = ExclusionsContext;

ExclusionsContext.prototype.EXCEPT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.EXCEPT_LITERAL, 0);
};

ExclusionsContext.prototype.elements = function() {
    return this.getTypedRuleContext(ElementsContext,0);
};

ExclusionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExclusions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExclusionsContext = ExclusionsContext;

ASN_3gppParser.prototype.exclusions = function() {

    var localctx = new ExclusionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ASN_3gppParser.RULE_exclusions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 798;
        this.match(ASN_3gppParser.EXCEPT_LITERAL);
        this.state = 799;
        this.elements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntersectionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_intersections;
    return this;
}

IntersectionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntersectionsContext.prototype.constructor = IntersectionsContext;

IntersectionsContext.prototype.intersectionElements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntersectionElementsContext);
    } else {
        return this.getTypedRuleContext(IntersectionElementsContext,i);
    }
};

IntersectionsContext.prototype.intersectionMark = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntersectionMarkContext);
    } else {
        return this.getTypedRuleContext(IntersectionMarkContext,i);
    }
};

IntersectionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitIntersections(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.IntersectionsContext = IntersectionsContext;

ASN_3gppParser.prototype.intersections = function() {

    var localctx = new IntersectionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ASN_3gppParser.RULE_intersections);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 801;
        this.intersectionElements();
        this.state = 807;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.POWER || _la===ASN_3gppParser.INTERSECTION_LITERAL) {
            this.state = 802;
            this.intersectionMark();
            this.state = 803;
            this.intersectionElements();
            this.state = 809;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnionMarkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_unionMark;
    return this;
}

UnionMarkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionMarkContext.prototype.constructor = UnionMarkContext;

UnionMarkContext.prototype.PIPE = function() {
    return this.getToken(ASN_3gppParser.PIPE, 0);
};

UnionMarkContext.prototype.UNION_LITERAL = function() {
    return this.getToken(ASN_3gppParser.UNION_LITERAL, 0);
};

UnionMarkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitUnionMark(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.UnionMarkContext = UnionMarkContext;

ASN_3gppParser.prototype.unionMark = function() {

    var localctx = new UnionMarkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ASN_3gppParser.RULE_unionMark);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 810;
        _la = this._input.LA(1);
        if(!(_la===ASN_3gppParser.PIPE || _la===ASN_3gppParser.UNION_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntersectionMarkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_intersectionMark;
    return this;
}

IntersectionMarkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntersectionMarkContext.prototype.constructor = IntersectionMarkContext;

IntersectionMarkContext.prototype.POWER = function() {
    return this.getToken(ASN_3gppParser.POWER, 0);
};

IntersectionMarkContext.prototype.INTERSECTION_LITERAL = function() {
    return this.getToken(ASN_3gppParser.INTERSECTION_LITERAL, 0);
};

IntersectionMarkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitIntersectionMark(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.IntersectionMarkContext = IntersectionMarkContext;

ASN_3gppParser.prototype.intersectionMark = function() {

    var localctx = new IntersectionMarkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ASN_3gppParser.RULE_intersectionMark);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        _la = this._input.LA(1);
        if(!(_la===ASN_3gppParser.POWER || _la===ASN_3gppParser.INTERSECTION_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_elements;
    return this;
}

ElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementsContext.prototype.constructor = ElementsContext;

ElementsContext.prototype.subtypeElements = function() {
    return this.getTypedRuleContext(SubtypeElementsContext,0);
};

ElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ElementsContext = ElementsContext;

ASN_3gppParser.prototype.elements = function() {

    var localctx = new ElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ASN_3gppParser.RULE_elements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 814;
        this.subtypeElements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectSetElements;
    return this;
}

ObjectSetElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetElementsContext.prototype.constructor = ObjectSetElementsContext;

ObjectSetElementsContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

ObjectSetElementsContext.prototype.definedObject = function() {
    return this.getTypedRuleContext(DefinedObjectContext,0);
};

ObjectSetElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectSetElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectSetElementsContext = ObjectSetElementsContext;

ASN_3gppParser.prototype.objectSetElements = function() {

    var localctx = new ObjectSetElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ASN_3gppParser.RULE_objectSetElements);
    try {
        this.state = 818;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 816;
            this.object();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 817;
            this.definedObject();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntersectionElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_intersectionElements;
    return this;
}

IntersectionElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntersectionElementsContext.prototype.constructor = IntersectionElementsContext;

IntersectionElementsContext.prototype.elements = function() {
    return this.getTypedRuleContext(ElementsContext,0);
};

IntersectionElementsContext.prototype.exclusions = function() {
    return this.getTypedRuleContext(ExclusionsContext,0);
};

IntersectionElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitIntersectionElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.IntersectionElementsContext = IntersectionElementsContext;

ASN_3gppParser.prototype.intersectionElements = function() {

    var localctx = new IntersectionElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ASN_3gppParser.RULE_intersectionElements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 820;
        this.elements();
        this.state = 822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.EXCEPT_LITERAL) {
            this.state = 821;
            this.exclusions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubtypeElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_subtypeElements;
    return this;
}

SubtypeElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubtypeElementsContext.prototype.constructor = SubtypeElementsContext;

SubtypeElementsContext.prototype.DOUBLE_DOT = function() {
    return this.getToken(ASN_3gppParser.DOUBLE_DOT, 0);
};

SubtypeElementsContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

SubtypeElementsContext.prototype.MIN_LITERAL = function() {
    return this.getToken(ASN_3gppParser.MIN_LITERAL, 0);
};

SubtypeElementsContext.prototype.MAX_LITERAL = function() {
    return this.getToken(ASN_3gppParser.MAX_LITERAL, 0);
};

SubtypeElementsContext.prototype.LESS_THAN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.LESS_THAN);
    } else {
        return this.getToken(ASN_3gppParser.LESS_THAN, i);
    }
};


SubtypeElementsContext.prototype.sizeConstraint = function() {
    return this.getTypedRuleContext(SizeConstraintContext,0);
};

SubtypeElementsContext.prototype.PATTERN_LITERAL = function() {
    return this.getToken(ASN_3gppParser.PATTERN_LITERAL, 0);
};

SubtypeElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSubtypeElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SubtypeElementsContext = SubtypeElementsContext;

ASN_3gppParser.prototype.subtypeElements = function() {

    var localctx = new SubtypeElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ASN_3gppParser.RULE_subtypeElements);
    var _la = 0; // Token type
    try {
        this.state = 843;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 826;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ASN_3gppParser.TRUE_LITERAL:
            case ASN_3gppParser.FALSE_LITERAL:
            case ASN_3gppParser.TRUE_SMALL_LITERAL:
            case ASN_3gppParser.FALSE_SMALL_LITERAL:
            case ASN_3gppParser.L_BRACE:
            case ASN_3gppParser.MINUS:
            case ASN_3gppParser.NUMBER:
            case ASN_3gppParser.BSTRING:
            case ASN_3gppParser.CSTRING:
            case ASN_3gppParser.IDENTIFIER:
                this.state = 824;
                this.value();
                break;
            case ASN_3gppParser.MIN_LITERAL:
                this.state = 825;
                this.match(ASN_3gppParser.MIN_LITERAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.LESS_THAN) {
                this.state = 828;
                this.match(ASN_3gppParser.LESS_THAN);
            }

            this.state = 831;
            this.match(ASN_3gppParser.DOUBLE_DOT);
            this.state = 833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.LESS_THAN) {
                this.state = 832;
                this.match(ASN_3gppParser.LESS_THAN);
            }

            this.state = 837;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ASN_3gppParser.TRUE_LITERAL:
            case ASN_3gppParser.FALSE_LITERAL:
            case ASN_3gppParser.TRUE_SMALL_LITERAL:
            case ASN_3gppParser.FALSE_SMALL_LITERAL:
            case ASN_3gppParser.L_BRACE:
            case ASN_3gppParser.MINUS:
            case ASN_3gppParser.NUMBER:
            case ASN_3gppParser.BSTRING:
            case ASN_3gppParser.CSTRING:
            case ASN_3gppParser.IDENTIFIER:
                this.state = 835;
                this.value();
                break;
            case ASN_3gppParser.MAX_LITERAL:
                this.state = 836;
                this.match(ASN_3gppParser.MAX_LITERAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 839;
            this.sizeConstraint();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 840;
            this.match(ASN_3gppParser.PATTERN_LITERAL);
            this.state = 841;
            this.value();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 842;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableTypeValueSetFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_variableTypeValueSetFieldSpec;
    return this;
}

VariableTypeValueSetFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableTypeValueSetFieldSpecContext.prototype.constructor = VariableTypeValueSetFieldSpecContext;

VariableTypeValueSetFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASN_3gppParser.AMPERSAND, 0);
};

VariableTypeValueSetFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

VariableTypeValueSetFieldSpecContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};

VariableTypeValueSetFieldSpecContext.prototype.valueSetOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueSetOptionalitySpecContext,0);
};

VariableTypeValueSetFieldSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitVariableTypeValueSetFieldSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.VariableTypeValueSetFieldSpecContext = VariableTypeValueSetFieldSpecContext;

ASN_3gppParser.prototype.variableTypeValueSetFieldSpec = function() {

    var localctx = new VariableTypeValueSetFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ASN_3gppParser.RULE_variableTypeValueSetFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 845;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 846;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 847;
        this.fieldName();
        this.state = 849;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
            this.state = 848;
            this.valueSetOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectFieldSpec;
    return this;
}

ObjectFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectFieldSpecContext.prototype.constructor = ObjectFieldSpecContext;

ObjectFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASN_3gppParser.AMPERSAND, 0);
};

ObjectFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

ObjectFieldSpecContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ObjectFieldSpecContext.prototype.objectOptionalitySpec = function() {
    return this.getTypedRuleContext(ObjectOptionalitySpecContext,0);
};

ObjectFieldSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectFieldSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectFieldSpecContext = ObjectFieldSpecContext;

ASN_3gppParser.prototype.objectFieldSpec = function() {

    var localctx = new ObjectFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ASN_3gppParser.RULE_objectFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 851;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 852;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 853;
        this.definedObjectClass();
        this.state = 855;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
            this.state = 854;
            this.objectOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectOptionalitySpec;
    return this;
}

ObjectOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectOptionalitySpecContext.prototype.constructor = ObjectOptionalitySpecContext;

ObjectOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OPTIONAL_LITERAL, 0);
};

ObjectOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.DEFAULT_LITERAL, 0);
};

ObjectOptionalitySpecContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

ObjectOptionalitySpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectOptionalitySpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectOptionalitySpecContext = ObjectOptionalitySpecContext;

ASN_3gppParser.prototype.objectOptionalitySpec = function() {

    var localctx = new ObjectOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ASN_3gppParser.RULE_objectOptionalitySpec);
    try {
        this.state = 860;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 857;
            this.match(ASN_3gppParser.OPTIONAL_LITERAL);
            break;
        case ASN_3gppParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 858;
            this.match(ASN_3gppParser.DEFAULT_LITERAL);
            this.state = 859;
            this.object();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectSetFieldSpec;
    return this;
}

ObjectSetFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetFieldSpecContext.prototype.constructor = ObjectSetFieldSpecContext;

ObjectSetFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASN_3gppParser.AMPERSAND, 0);
};

ObjectSetFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

ObjectSetFieldSpecContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ObjectSetFieldSpecContext.prototype.objectSetOptionalitySpec = function() {
    return this.getTypedRuleContext(ObjectSetOptionalitySpecContext,0);
};

ObjectSetFieldSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectSetFieldSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectSetFieldSpecContext = ObjectSetFieldSpecContext;

ASN_3gppParser.prototype.objectSetFieldSpec = function() {

    var localctx = new ObjectSetFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ASN_3gppParser.RULE_objectSetFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 862;
        this.match(ASN_3gppParser.AMPERSAND);
        this.state = 863;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 864;
        this.definedObjectClass();
        this.state = 866;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.OPTIONAL_LITERAL || _la===ASN_3gppParser.DEFAULT_LITERAL) {
            this.state = 865;
            this.objectSetOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectSetOptionalitySpec;
    return this;
}

ObjectSetOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetOptionalitySpecContext.prototype.constructor = ObjectSetOptionalitySpecContext;

ObjectSetOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OPTIONAL_LITERAL, 0);
};

ObjectSetOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.DEFAULT_LITERAL, 0);
};

ObjectSetOptionalitySpecContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

ObjectSetOptionalitySpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectSetOptionalitySpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectSetOptionalitySpecContext = ObjectSetOptionalitySpecContext;

ASN_3gppParser.prototype.objectSetOptionalitySpec = function() {

    var localctx = new ObjectSetOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ASN_3gppParser.RULE_objectSetOptionalitySpec);
    try {
        this.state = 871;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 868;
            this.match(ASN_3gppParser.OPTIONAL_LITERAL);
            break;
        case ASN_3gppParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 869;
            this.match(ASN_3gppParser.DEFAULT_LITERAL);
            this.state = 870;
            this.objectSet();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_typeAssignment;
    return this;
}

TypeAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssignmentContext.prototype.constructor = TypeAssignmentContext;

TypeAssignmentContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASN_3gppParser.ASSIGN_OP, 0);
};

TypeAssignmentContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

TypeAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitTypeAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.TypeAssignmentContext = TypeAssignmentContext;

ASN_3gppParser.prototype.typeAssignment = function() {

    var localctx = new TypeAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ASN_3gppParser.RULE_typeAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 873;
        this.match(ASN_3gppParser.ASSIGN_OP);
        this.state = 874;
        this.asnType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_valueAssignment;
    return this;
}

ValueAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueAssignmentContext.prototype.constructor = ValueAssignmentContext;

ValueAssignmentContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ValueAssignmentContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASN_3gppParser.ASSIGN_OP, 0);
};

ValueAssignmentContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ValueAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitValueAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ValueAssignmentContext = ValueAssignmentContext;

ASN_3gppParser.prototype.valueAssignment = function() {

    var localctx = new ValueAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ASN_3gppParser.RULE_valueAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.asnType();
        this.state = 877;
        this.match(ASN_3gppParser.ASSIGN_OP);
        this.state = 878;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AsnTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_asnType;
    return this;
}

AsnTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsnTypeContext.prototype.constructor = AsnTypeContext;

AsnTypeContext.prototype.builtinType = function() {
    return this.getTypedRuleContext(BuiltinTypeContext,0);
};

AsnTypeContext.prototype.referencedType = function() {
    return this.getTypedRuleContext(ReferencedTypeContext,0);
};

AsnTypeContext.prototype.constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstraintContext);
    } else {
        return this.getTypedRuleContext(ConstraintContext,i);
    }
};

AsnTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitAsnType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.AsnTypeContext = AsnTypeContext;

ASN_3gppParser.prototype.asnType = function() {

    var localctx = new AsnTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ASN_3gppParser.RULE_asnType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 882;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.state = 880;
            this.builtinType();
            break;

        case 2:
            this.state = 881;
            this.referencedType();
            break;

        }
        this.state = 887;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 884;
                this.constraint(); 
            }
            this.state = 889;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BuiltinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_builtinType;
    return this;
}

BuiltinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuiltinTypeContext.prototype.constructor = BuiltinTypeContext;

BuiltinTypeContext.prototype.octetStringType = function() {
    return this.getTypedRuleContext(OctetStringTypeContext,0);
};

BuiltinTypeContext.prototype.bitStringType = function() {
    return this.getTypedRuleContext(BitStringTypeContext,0);
};

BuiltinTypeContext.prototype.choiceType = function() {
    return this.getTypedRuleContext(ChoiceTypeContext,0);
};

BuiltinTypeContext.prototype.enumeratedType = function() {
    return this.getTypedRuleContext(EnumeratedTypeContext,0);
};

BuiltinTypeContext.prototype.integerType = function() {
    return this.getTypedRuleContext(IntegerTypeContext,0);
};

BuiltinTypeContext.prototype.sequenceType = function() {
    return this.getTypedRuleContext(SequenceTypeContext,0);
};

BuiltinTypeContext.prototype.sequenceOfType = function() {
    return this.getTypedRuleContext(SequenceOfTypeContext,0);
};

BuiltinTypeContext.prototype.setType = function() {
    return this.getTypedRuleContext(SetTypeContext,0);
};

BuiltinTypeContext.prototype.setOfType = function() {
    return this.getTypedRuleContext(SetOfTypeContext,0);
};

BuiltinTypeContext.prototype.objectidentifiertype = function() {
    return this.getTypedRuleContext(ObjectidentifiertypeContext,0);
};

BuiltinTypeContext.prototype.objectClassFieldType = function() {
    return this.getTypedRuleContext(ObjectClassFieldTypeContext,0);
};

BuiltinTypeContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(ASN_3gppParser.BOOLEAN_LITERAL, 0);
};

BuiltinTypeContext.prototype.NULL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.NULL_LITERAL, 0);
};

BuiltinTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitBuiltinType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.BuiltinTypeContext = BuiltinTypeContext;

ASN_3gppParser.prototype.builtinType = function() {

    var localctx = new BuiltinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ASN_3gppParser.RULE_builtinType);
    try {
        this.state = 903;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 890;
            this.octetStringType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 891;
            this.bitStringType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 892;
            this.choiceType();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 893;
            this.enumeratedType();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 894;
            this.integerType();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 895;
            this.sequenceType();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 896;
            this.sequenceOfType();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 897;
            this.setType();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 898;
            this.setOfType();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 899;
            this.objectidentifiertype();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 900;
            this.objectClassFieldType();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 901;
            this.match(ASN_3gppParser.BOOLEAN_LITERAL);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 902;
            this.match(ASN_3gppParser.NULL_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectClassFieldTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectClassFieldType;
    return this;
}

ObjectClassFieldTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectClassFieldTypeContext.prototype.constructor = ObjectClassFieldTypeContext;

ObjectClassFieldTypeContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ObjectClassFieldTypeContext.prototype.DOT = function() {
    return this.getToken(ASN_3gppParser.DOT, 0);
};

ObjectClassFieldTypeContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};

ObjectClassFieldTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectClassFieldType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectClassFieldTypeContext = ObjectClassFieldTypeContext;

ASN_3gppParser.prototype.objectClassFieldType = function() {

    var localctx = new ObjectClassFieldTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ASN_3gppParser.RULE_objectClassFieldType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 905;
        this.definedObjectClass();
        this.state = 906;
        this.match(ASN_3gppParser.DOT);
        this.state = 907;
        this.fieldName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_setType;
    return this;
}

SetTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetTypeContext.prototype.constructor = SetTypeContext;

SetTypeContext.prototype.SET_LITERAL = function() {
    return this.getToken(ASN_3gppParser.SET_LITERAL, 0);
};

SetTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

SetTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

SetTypeContext.prototype.extensionAndException = function() {
    return this.getTypedRuleContext(ExtensionAndExceptionContext,0);
};

SetTypeContext.prototype.optionalExtensionMarker = function() {
    return this.getTypedRuleContext(OptionalExtensionMarkerContext,0);
};

SetTypeContext.prototype.componentTypeLists = function() {
    return this.getTypedRuleContext(ComponentTypeListsContext,0);
};

SetTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSetType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SetTypeContext = SetTypeContext;

ASN_3gppParser.prototype.setType = function() {

    var localctx = new SetTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ASN_3gppParser.RULE_setType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 909;
        this.match(ASN_3gppParser.SET_LITERAL);
        this.state = 910;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 915;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        if(la_===1) {
            this.state = 911;
            this.extensionAndException();
            this.state = 912;
            this.optionalExtensionMarker();

        } else if(la_===2) {
            this.state = 914;
            this.componentTypeLists();

        }
        this.state = 917;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetOfTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_setOfType;
    return this;
}

SetOfTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetOfTypeContext.prototype.constructor = SetOfTypeContext;

SetOfTypeContext.prototype.SET_LITERAL = function() {
    return this.getToken(ASN_3gppParser.SET_LITERAL, 0);
};

SetOfTypeContext.prototype.OF_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OF_LITERAL, 0);
};

SetOfTypeContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

SetOfTypeContext.prototype.namedType = function() {
    return this.getTypedRuleContext(NamedTypeContext,0);
};

SetOfTypeContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

SetOfTypeContext.prototype.sizeConstraint = function() {
    return this.getTypedRuleContext(SizeConstraintContext,0);
};

SetOfTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSetOfType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SetOfTypeContext = SetOfTypeContext;

ASN_3gppParser.prototype.setOfType = function() {

    var localctx = new SetOfTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ASN_3gppParser.RULE_setOfType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        this.match(ASN_3gppParser.SET_LITERAL);
        this.state = 922;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case ASN_3gppParser.L_PARAN:
        	this.state = 920;
        	this.constraint();
        	break;
        case ASN_3gppParser.SIZE_LITERAL:
        	this.state = 921;
        	this.sizeConstraint();
        	break;
        case ASN_3gppParser.OF_LITERAL:
        	break;
        default:
        	break;
        }
        this.state = 924;
        this.match(ASN_3gppParser.OF_LITERAL);
        this.state = 927;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        switch(la_) {
        case 1:
            this.state = 925;
            this.asnType();
            break;

        case 2:
            this.state = 926;
            this.namedType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferencedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_referencedType;
    return this;
}

ReferencedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferencedTypeContext.prototype.constructor = ReferencedTypeContext;

ReferencedTypeContext.prototype.definedType = function() {
    return this.getTypedRuleContext(DefinedTypeContext,0);
};

ReferencedTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitReferencedType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ReferencedTypeContext = ReferencedTypeContext;

ASN_3gppParser.prototype.referencedType = function() {

    var localctx = new ReferencedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ASN_3gppParser.RULE_referencedType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 929;
        this.definedType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_definedType;
    return this;
}

DefinedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinedTypeContext.prototype.constructor = DefinedTypeContext;

DefinedTypeContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.IDENTIFIER);
    } else {
        return this.getToken(ASN_3gppParser.IDENTIFIER, i);
    }
};


DefinedTypeContext.prototype.DOT = function() {
    return this.getToken(ASN_3gppParser.DOT, 0);
};

DefinedTypeContext.prototype.actualParameterList = function() {
    return this.getTypedRuleContext(ActualParameterListContext,0);
};

DefinedTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitDefinedType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.DefinedTypeContext = DefinedTypeContext;

ASN_3gppParser.prototype.definedType = function() {

    var localctx = new DefinedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ASN_3gppParser.RULE_definedType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 934;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.DOT) {
            this.state = 932;
            this.match(ASN_3gppParser.DOT);
            this.state = 933;
            this.match(ASN_3gppParser.IDENTIFIER);
        }

        this.state = 937;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        if(la_===1) {
            this.state = 936;
            this.actualParameterList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_constraint;
    return this;
}

ConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintContext.prototype.constructor = ConstraintContext;

ConstraintContext.prototype.L_PARAN = function() {
    return this.getToken(ASN_3gppParser.L_PARAN, 0);
};

ConstraintContext.prototype.constraintSpec = function() {
    return this.getTypedRuleContext(ConstraintSpecContext,0);
};

ConstraintContext.prototype.R_PARAN = function() {
    return this.getToken(ASN_3gppParser.R_PARAN, 0);
};

ConstraintContext.prototype.exceptionSpec = function() {
    return this.getTypedRuleContext(ExceptionSpecContext,0);
};

ConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ConstraintContext = ConstraintContext;

ASN_3gppParser.prototype.constraint = function() {

    var localctx = new ConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ASN_3gppParser.RULE_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 939;
        this.match(ASN_3gppParser.L_PARAN);
        this.state = 940;
        this.constraintSpec();
        this.state = 942;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.EXCLAM) {
            this.state = 941;
            this.exceptionSpec();
        }

        this.state = 944;
        this.match(ASN_3gppParser.R_PARAN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_constraintSpec;
    return this;
}

ConstraintSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintSpecContext.prototype.constructor = ConstraintSpecContext;

ConstraintSpecContext.prototype.generalConstraint = function() {
    return this.getTypedRuleContext(GeneralConstraintContext,0);
};

ConstraintSpecContext.prototype.subtypeConstraint = function() {
    return this.getTypedRuleContext(SubtypeConstraintContext,0);
};

ConstraintSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitConstraintSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ConstraintSpecContext = ConstraintSpecContext;

ASN_3gppParser.prototype.constraintSpec = function() {

    var localctx = new ConstraintSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ASN_3gppParser.RULE_constraintSpec);
    try {
        this.state = 948;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 946;
            this.generalConstraint();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 947;
            this.subtypeConstraint();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserDefinedConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_userDefinedConstraint;
    return this;
}

UserDefinedConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserDefinedConstraintContext.prototype.constructor = UserDefinedConstraintContext;

UserDefinedConstraintContext.prototype.CONSTRAINED_LITERAL = function() {
    return this.getToken(ASN_3gppParser.CONSTRAINED_LITERAL, 0);
};

UserDefinedConstraintContext.prototype.BY_LITERAL = function() {
    return this.getToken(ASN_3gppParser.BY_LITERAL, 0);
};

UserDefinedConstraintContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

UserDefinedConstraintContext.prototype.userDefinedConstraintParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserDefinedConstraintParameterContext);
    } else {
        return this.getTypedRuleContext(UserDefinedConstraintParameterContext,i);
    }
};

UserDefinedConstraintContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

UserDefinedConstraintContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


UserDefinedConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitUserDefinedConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.UserDefinedConstraintContext = UserDefinedConstraintContext;

ASN_3gppParser.prototype.userDefinedConstraint = function() {

    var localctx = new UserDefinedConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ASN_3gppParser.RULE_userDefinedConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 950;
        this.match(ASN_3gppParser.CONSTRAINED_LITERAL);
        this.state = 951;
        this.match(ASN_3gppParser.BY_LITERAL);
        this.state = 952;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 953;
        this.userDefinedConstraintParameter();
        this.state = 958;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.COMMA) {
            this.state = 954;
            this.match(ASN_3gppParser.COMMA);
            this.state = 955;
            this.userDefinedConstraintParameter();
            this.state = 960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 961;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GeneralConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_generalConstraint;
    return this;
}

GeneralConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneralConstraintContext.prototype.constructor = GeneralConstraintContext;

GeneralConstraintContext.prototype.userDefinedConstraint = function() {
    return this.getTypedRuleContext(UserDefinedConstraintContext,0);
};

GeneralConstraintContext.prototype.tableConstraint = function() {
    return this.getTypedRuleContext(TableConstraintContext,0);
};

GeneralConstraintContext.prototype.contentsConstraint = function() {
    return this.getTypedRuleContext(ContentsConstraintContext,0);
};

GeneralConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitGeneralConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.GeneralConstraintContext = GeneralConstraintContext;

ASN_3gppParser.prototype.generalConstraint = function() {

    var localctx = new GeneralConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ASN_3gppParser.RULE_generalConstraint);
    try {
        this.state = 966;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.CONSTRAINED_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 963;
            this.userDefinedConstraint();
            break;
        case ASN_3gppParser.L_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 964;
            this.tableConstraint();
            break;
        case ASN_3gppParser.CONTAINING_LITERAL:
        case ASN_3gppParser.WITH_LITERAL:
        case ASN_3gppParser.ENCODED_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 965;
            this.contentsConstraint();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserDefinedConstraintParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_userDefinedConstraintParameter;
    return this;
}

UserDefinedConstraintParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserDefinedConstraintParameterContext.prototype.constructor = UserDefinedConstraintParameterContext;

UserDefinedConstraintParameterContext.prototype.governor = function() {
    return this.getTypedRuleContext(GovernorContext,0);
};

UserDefinedConstraintParameterContext.prototype.COLON = function() {
    return this.getToken(ASN_3gppParser.COLON, 0);
};

UserDefinedConstraintParameterContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

UserDefinedConstraintParameterContext.prototype.valueSet = function() {
    return this.getTypedRuleContext(ValueSetContext,0);
};

UserDefinedConstraintParameterContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

UserDefinedConstraintParameterContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

UserDefinedConstraintParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitUserDefinedConstraintParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.UserDefinedConstraintParameterContext = UserDefinedConstraintParameterContext;

ASN_3gppParser.prototype.userDefinedConstraintParameter = function() {

    var localctx = new UserDefinedConstraintParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ASN_3gppParser.RULE_userDefinedConstraintParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 968;
        this.governor();
        this.state = 974;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        if(la_===1) {
            this.state = 969;
            this.match(ASN_3gppParser.COLON);
            this.state = 970;
            this.value();

        } else if(la_===2) {
            this.state = 971;
            this.valueSet();

        } else if(la_===3) {
            this.state = 972;
            this.object();

        } else if(la_===4) {
            this.state = 973;
            this.objectSet();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_tableConstraint;
    return this;
}

TableConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableConstraintContext.prototype.constructor = TableConstraintContext;

TableConstraintContext.prototype.componentRelationConstraint = function() {
    return this.getTypedRuleContext(ComponentRelationConstraintContext,0);
};

TableConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitTableConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.TableConstraintContext = TableConstraintContext;

ASN_3gppParser.prototype.tableConstraint = function() {

    var localctx = new TableConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ASN_3gppParser.RULE_tableConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.componentRelationConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleTableConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_simpleTableConstraint;
    return this;
}

SimpleTableConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleTableConstraintContext.prototype.constructor = SimpleTableConstraintContext;

SimpleTableConstraintContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

SimpleTableConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSimpleTableConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SimpleTableConstraintContext = SimpleTableConstraintContext;

ASN_3gppParser.prototype.simpleTableConstraint = function() {

    var localctx = new SimpleTableConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ASN_3gppParser.RULE_simpleTableConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 978;
        this.objectSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContentsConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_contentsConstraint;
    return this;
}

ContentsConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContentsConstraintContext.prototype.constructor = ContentsConstraintContext;

ContentsConstraintContext.prototype.CONTAINING_LITERAL = function() {
    return this.getToken(ASN_3gppParser.CONTAINING_LITERAL, 0);
};

ContentsConstraintContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ContentsConstraintContext.prototype.ENCODED_LITERAL = function() {
    return this.getToken(ASN_3gppParser.ENCODED_LITERAL, 0);
};

ContentsConstraintContext.prototype.BY_LITERAL = function() {
    return this.getToken(ASN_3gppParser.BY_LITERAL, 0);
};

ContentsConstraintContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ContentsConstraintContext.prototype.WITH_LITERAL = function() {
    return this.getToken(ASN_3gppParser.WITH_LITERAL, 0);
};

ContentsConstraintContext.prototype.COMPONENTS_LITERAL = function() {
    return this.getToken(ASN_3gppParser.COMPONENTS_LITERAL, 0);
};

ContentsConstraintContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

ContentsConstraintContext.prototype.componentPresenceLists = function() {
    return this.getTypedRuleContext(ComponentPresenceListsContext,0);
};

ContentsConstraintContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

ContentsConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitContentsConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ContentsConstraintContext = ContentsConstraintContext;

ASN_3gppParser.prototype.contentsConstraint = function() {

    var localctx = new ContentsConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ASN_3gppParser.RULE_contentsConstraint);
    try {
        this.state = 997;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 980;
            this.match(ASN_3gppParser.CONTAINING_LITERAL);
            this.state = 981;
            this.asnType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 982;
            this.match(ASN_3gppParser.ENCODED_LITERAL);
            this.state = 983;
            this.match(ASN_3gppParser.BY_LITERAL);
            this.state = 984;
            this.value();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 985;
            this.match(ASN_3gppParser.CONTAINING_LITERAL);
            this.state = 986;
            this.asnType();
            this.state = 987;
            this.match(ASN_3gppParser.ENCODED_LITERAL);
            this.state = 988;
            this.match(ASN_3gppParser.BY_LITERAL);
            this.state = 989;
            this.value();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 991;
            this.match(ASN_3gppParser.WITH_LITERAL);
            this.state = 992;
            this.match(ASN_3gppParser.COMPONENTS_LITERAL);
            this.state = 993;
            this.match(ASN_3gppParser.L_BRACE);
            this.state = 994;
            this.componentPresenceLists();
            this.state = 995;
            this.match(ASN_3gppParser.R_BRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentPresenceListsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_componentPresenceLists;
    return this;
}

ComponentPresenceListsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentPresenceListsContext.prototype.constructor = ComponentPresenceListsContext;

ComponentPresenceListsContext.prototype.componentPresenceList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentPresenceListContext);
    } else {
        return this.getTypedRuleContext(ComponentPresenceListContext,i);
    }
};

ComponentPresenceListsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ComponentPresenceListsContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASN_3gppParser.ELLIPSIS, 0);
};

ComponentPresenceListsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitComponentPresenceLists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ComponentPresenceListsContext = ComponentPresenceListsContext;

ASN_3gppParser.prototype.componentPresenceLists = function() {

    var localctx = new ComponentPresenceListsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ASN_3gppParser.RULE_componentPresenceLists);
    var _la = 0; // Token type
    try {
        this.state = 1015;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.R_BRACE:
        case ASN_3gppParser.COMMA:
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1000;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.IDENTIFIER) {
                this.state = 999;
                this.componentPresenceList();
            }

            this.state = 1008;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.COMMA) {
                this.state = 1002;
                this.match(ASN_3gppParser.COMMA);
                this.state = 1003;
                this.match(ASN_3gppParser.ELLIPSIS);
                this.state = 1006;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASN_3gppParser.COMMA) {
                    this.state = 1004;
                    this.match(ASN_3gppParser.COMMA);
                    this.state = 1005;
                    this.componentPresenceList();
                }

            }

            break;
        case ASN_3gppParser.ELLIPSIS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1010;
            this.match(ASN_3gppParser.ELLIPSIS);
            this.state = 1013;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.COMMA) {
                this.state = 1011;
                this.match(ASN_3gppParser.COMMA);
                this.state = 1012;
                this.componentPresenceList();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentPresenceListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_componentPresenceList;
    return this;
}

ComponentPresenceListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentPresenceListContext.prototype.constructor = ComponentPresenceListContext;

ComponentPresenceListContext.prototype.componentPresence = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentPresenceContext);
    } else {
        return this.getTypedRuleContext(ComponentPresenceContext,i);
    }
};

ComponentPresenceListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ComponentPresenceListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitComponentPresenceList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ComponentPresenceListContext = ComponentPresenceListContext;

ASN_3gppParser.prototype.componentPresenceList = function() {

    var localctx = new ComponentPresenceListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ASN_3gppParser.RULE_componentPresenceList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1017;
        this.componentPresence();
        this.state = 1022;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1018;
                this.match(ASN_3gppParser.COMMA);
                this.state = 1019;
                this.componentPresence(); 
            }
            this.state = 1024;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentPresenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_componentPresence;
    return this;
}

ComponentPresenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentPresenceContext.prototype.constructor = ComponentPresenceContext;

ComponentPresenceContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

ComponentPresenceContext.prototype.ABSENT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.ABSENT_LITERAL, 0);
};

ComponentPresenceContext.prototype.PRESENT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.PRESENT_LITERAL, 0);
};

ComponentPresenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitComponentPresence(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ComponentPresenceContext = ComponentPresenceContext;

ASN_3gppParser.prototype.componentPresence = function() {

    var localctx = new ComponentPresenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ASN_3gppParser.RULE_componentPresence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1025;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 1026;
        _la = this._input.LA(1);
        if(!(_la===ASN_3gppParser.PRESENT_LITERAL || _la===ASN_3gppParser.ABSENT_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubtypeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_subtypeConstraint;
    return this;
}

SubtypeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubtypeConstraintContext.prototype.constructor = SubtypeConstraintContext;

SubtypeConstraintContext.prototype.elementSetSpecs = function() {
    return this.getTypedRuleContext(ElementSetSpecsContext,0);
};

SubtypeConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSubtypeConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SubtypeConstraintContext = SubtypeConstraintContext;

ASN_3gppParser.prototype.subtypeConstraint = function() {

    var localctx = new SubtypeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ASN_3gppParser.RULE_subtypeConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1028;
        this.elementSetSpecs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.builtinValue = function() {
    return this.getTypedRuleContext(BuiltinValueContext,0);
};

ValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ValueContext = ValueContext;

ASN_3gppParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ASN_3gppParser.RULE_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1030;
        this.builtinValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BuiltinValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_builtinValue;
    return this;
}

BuiltinValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuiltinValueContext.prototype.constructor = BuiltinValueContext;

BuiltinValueContext.prototype.enumeratedValue = function() {
    return this.getTypedRuleContext(EnumeratedValueContext,0);
};

BuiltinValueContext.prototype.integerValue = function() {
    return this.getTypedRuleContext(IntegerValueContext,0);
};

BuiltinValueContext.prototype.choiceValue = function() {
    return this.getTypedRuleContext(ChoiceValueContext,0);
};

BuiltinValueContext.prototype.objectIdentifierValue = function() {
    return this.getTypedRuleContext(ObjectIdentifierValueContext,0);
};

BuiltinValueContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};

BuiltinValueContext.prototype.CSTRING = function() {
    return this.getToken(ASN_3gppParser.CSTRING, 0);
};

BuiltinValueContext.prototype.BSTRING = function() {
    return this.getToken(ASN_3gppParser.BSTRING, 0);
};

BuiltinValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitBuiltinValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.BuiltinValueContext = BuiltinValueContext;

ASN_3gppParser.prototype.builtinValue = function() {

    var localctx = new BuiltinValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ASN_3gppParser.RULE_builtinValue);
    try {
        this.state = 1039;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1032;
            this.enumeratedValue();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1033;
            this.integerValue();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1034;
            this.choiceValue();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1035;
            this.objectIdentifierValue();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1036;
            this.booleanValue();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1037;
            this.match(ASN_3gppParser.CSTRING);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1038;
            this.match(ASN_3gppParser.BSTRING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectIdentifierValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectIdentifierValue;
    return this;
}

ObjectIdentifierValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectIdentifierValueContext.prototype.constructor = ObjectIdentifierValueContext;

ObjectIdentifierValueContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

ObjectIdentifierValueContext.prototype.objIdComponentsList = function() {
    return this.getTypedRuleContext(ObjIdComponentsListContext,0);
};

ObjectIdentifierValueContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

ObjectIdentifierValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectIdentifierValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectIdentifierValueContext = ObjectIdentifierValueContext;

ASN_3gppParser.prototype.objectIdentifierValue = function() {

    var localctx = new ObjectIdentifierValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ASN_3gppParser.RULE_objectIdentifierValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1041;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 1042;
        this.objIdComponentsList();
        this.state = 1043;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjIdComponentsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objIdComponentsList;
    return this;
}

ObjIdComponentsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjIdComponentsListContext.prototype.constructor = ObjIdComponentsListContext;

ObjIdComponentsListContext.prototype.objIdComponents = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ObjIdComponentsContext);
    } else {
        return this.getTypedRuleContext(ObjIdComponentsContext,i);
    }
};

ObjIdComponentsListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjIdComponentsList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjIdComponentsListContext = ObjIdComponentsListContext;

ASN_3gppParser.prototype.objIdComponentsList = function() {

    var localctx = new ObjIdComponentsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ASN_3gppParser.RULE_objIdComponentsList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1045;
        this.objIdComponents();
        this.state = 1049;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.NUMBER || _la===ASN_3gppParser.IDENTIFIER) {
            this.state = 1046;
            this.objIdComponents();
            this.state = 1051;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjIdComponentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objIdComponents;
    return this;
}

ObjIdComponentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjIdComponentsContext.prototype.constructor = ObjIdComponentsContext;

ObjIdComponentsContext.prototype.NUMBER = function() {
    return this.getToken(ASN_3gppParser.NUMBER, 0);
};

ObjIdComponentsContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

ObjIdComponentsContext.prototype.L_PARAN = function() {
    return this.getToken(ASN_3gppParser.L_PARAN, 0);
};

ObjIdComponentsContext.prototype.R_PARAN = function() {
    return this.getToken(ASN_3gppParser.R_PARAN, 0);
};

ObjIdComponentsContext.prototype.definedValue = function() {
    return this.getTypedRuleContext(DefinedValueContext,0);
};

ObjIdComponentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjIdComponents(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjIdComponentsContext = ObjIdComponentsContext;

ASN_3gppParser.prototype.objIdComponents = function() {

    var localctx = new ObjIdComponentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ASN_3gppParser.RULE_objIdComponents);
    var _la = 0; // Token type
    try {
        this.state = 1063;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1052;
            this.match(ASN_3gppParser.NUMBER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1053;
            this.match(ASN_3gppParser.IDENTIFIER);
            this.state = 1060;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.L_PARAN) {
                this.state = 1054;
                this.match(ASN_3gppParser.L_PARAN);
                this.state = 1057;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case ASN_3gppParser.NUMBER:
                    this.state = 1055;
                    this.match(ASN_3gppParser.NUMBER);
                    break;
                case ASN_3gppParser.IDENTIFIER:
                    this.state = 1056;
                    this.definedValue();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1059;
                this.match(ASN_3gppParser.R_PARAN);
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1062;
            this.definedValue();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntegerValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_integerValue;
    return this;
}

IntegerValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerValueContext.prototype.constructor = IntegerValueContext;

IntegerValueContext.prototype.signedNumber = function() {
    return this.getTypedRuleContext(SignedNumberContext,0);
};

IntegerValueContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

IntegerValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitIntegerValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.IntegerValueContext = IntegerValueContext;

ASN_3gppParser.prototype.integerValue = function() {

    var localctx = new IntegerValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ASN_3gppParser.RULE_integerValue);
    try {
        this.state = 1067;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.MINUS:
        case ASN_3gppParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1065;
            this.signedNumber();
            break;
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1066;
            this.match(ASN_3gppParser.IDENTIFIER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChoiceValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_choiceValue;
    return this;
}

ChoiceValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoiceValueContext.prototype.constructor = ChoiceValueContext;

ChoiceValueContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

ChoiceValueContext.prototype.COLON = function() {
    return this.getToken(ASN_3gppParser.COLON, 0);
};

ChoiceValueContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ChoiceValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitChoiceValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ChoiceValueContext = ChoiceValueContext;

ASN_3gppParser.prototype.choiceValue = function() {

    var localctx = new ChoiceValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ASN_3gppParser.RULE_choiceValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1069;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 1070;
        this.match(ASN_3gppParser.COLON);
        this.state = 1071;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumeratedValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_enumeratedValue;
    return this;
}

EnumeratedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratedValueContext.prototype.constructor = EnumeratedValueContext;

EnumeratedValueContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

EnumeratedValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitEnumeratedValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.EnumeratedValueContext = EnumeratedValueContext;

ASN_3gppParser.prototype.enumeratedValue = function() {

    var localctx = new EnumeratedValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ASN_3gppParser.RULE_enumeratedValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1073;
        this.match(ASN_3gppParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignedNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_signedNumber;
    return this;
}

SignedNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignedNumberContext.prototype.constructor = SignedNumberContext;

SignedNumberContext.prototype.NUMBER = function() {
    return this.getToken(ASN_3gppParser.NUMBER, 0);
};

SignedNumberContext.prototype.MINUS = function() {
    return this.getToken(ASN_3gppParser.MINUS, 0);
};

SignedNumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSignedNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SignedNumberContext = SignedNumberContext;

ASN_3gppParser.prototype.signedNumber = function() {

    var localctx = new SignedNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ASN_3gppParser.RULE_signedNumber);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1076;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.MINUS) {
            this.state = 1075;
            this.match(ASN_3gppParser.MINUS);
        }

        this.state = 1078;
        this.match(ASN_3gppParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChoiceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_choiceType;
    return this;
}

ChoiceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoiceTypeContext.prototype.constructor = ChoiceTypeContext;

ChoiceTypeContext.prototype.CHOICE_LITERAL = function() {
    return this.getToken(ASN_3gppParser.CHOICE_LITERAL, 0);
};

ChoiceTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

ChoiceTypeContext.prototype.alternativeTypeLists = function() {
    return this.getTypedRuleContext(AlternativeTypeListsContext,0);
};

ChoiceTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

ChoiceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitChoiceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ChoiceTypeContext = ChoiceTypeContext;

ASN_3gppParser.prototype.choiceType = function() {

    var localctx = new ChoiceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ASN_3gppParser.RULE_choiceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1080;
        this.match(ASN_3gppParser.CHOICE_LITERAL);
        this.state = 1081;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 1082;
        this.alternativeTypeLists();
        this.state = 1083;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlternativeTypeListsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_alternativeTypeLists;
    return this;
}

AlternativeTypeListsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlternativeTypeListsContext.prototype.constructor = AlternativeTypeListsContext;

AlternativeTypeListsContext.prototype.rootAlternativeTypeList = function() {
    return this.getTypedRuleContext(RootAlternativeTypeListContext,0);
};

AlternativeTypeListsContext.prototype.COMMA = function() {
    return this.getToken(ASN_3gppParser.COMMA, 0);
};

AlternativeTypeListsContext.prototype.extensionAndException = function() {
    return this.getTypedRuleContext(ExtensionAndExceptionContext,0);
};

AlternativeTypeListsContext.prototype.extensionAdditionAlternatives = function() {
    return this.getTypedRuleContext(ExtensionAdditionAlternativesContext,0);
};

AlternativeTypeListsContext.prototype.optionalExtensionMarker = function() {
    return this.getTypedRuleContext(OptionalExtensionMarkerContext,0);
};

AlternativeTypeListsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitAlternativeTypeLists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.AlternativeTypeListsContext = AlternativeTypeListsContext;

ASN_3gppParser.prototype.alternativeTypeLists = function() {

    var localctx = new AlternativeTypeListsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ASN_3gppParser.RULE_alternativeTypeLists);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1085;
        this.rootAlternativeTypeList();
        this.state = 1091;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.COMMA) {
            this.state = 1086;
            this.match(ASN_3gppParser.COMMA);
            this.state = 1087;
            this.extensionAndException();
            this.state = 1088;
            this.extensionAdditionAlternatives();
            this.state = 1089;
            this.optionalExtensionMarker();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionAlternativesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionAdditionAlternatives;
    return this;
}

ExtensionAdditionAlternativesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionAlternativesContext.prototype.constructor = ExtensionAdditionAlternativesContext;

ExtensionAdditionAlternativesContext.prototype.COMMA = function() {
    return this.getToken(ASN_3gppParser.COMMA, 0);
};

ExtensionAdditionAlternativesContext.prototype.extensionAdditionAlternativesList = function() {
    return this.getTypedRuleContext(ExtensionAdditionAlternativesListContext,0);
};

ExtensionAdditionAlternativesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionAdditionAlternatives(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionAdditionAlternativesContext = ExtensionAdditionAlternativesContext;

ASN_3gppParser.prototype.extensionAdditionAlternatives = function() {

    var localctx = new ExtensionAdditionAlternativesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ASN_3gppParser.RULE_extensionAdditionAlternatives);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1095;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        if(la_===1) {
            this.state = 1093;
            this.match(ASN_3gppParser.COMMA);
            this.state = 1094;
            this.extensionAdditionAlternativesList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionAlternativesListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionAdditionAlternativesList;
    return this;
}

ExtensionAdditionAlternativesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionAlternativesListContext.prototype.constructor = ExtensionAdditionAlternativesListContext;

ExtensionAdditionAlternativesListContext.prototype.extensionAdditionAlternative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExtensionAdditionAlternativeContext);
    } else {
        return this.getTypedRuleContext(ExtensionAdditionAlternativeContext,i);
    }
};

ExtensionAdditionAlternativesListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ExtensionAdditionAlternativesListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionAdditionAlternativesList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionAdditionAlternativesListContext = ExtensionAdditionAlternativesListContext;

ASN_3gppParser.prototype.extensionAdditionAlternativesList = function() {

    var localctx = new ExtensionAdditionAlternativesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, ASN_3gppParser.RULE_extensionAdditionAlternativesList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1097;
        this.extensionAdditionAlternative();
        this.state = 1102;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1098;
                this.match(ASN_3gppParser.COMMA);
                this.state = 1099;
                this.extensionAdditionAlternative(); 
            }
            this.state = 1104;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionAlternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionAdditionAlternative;
    return this;
}

ExtensionAdditionAlternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionAlternativeContext.prototype.constructor = ExtensionAdditionAlternativeContext;

ExtensionAdditionAlternativeContext.prototype.extensionAdditionAlternativesGroup = function() {
    return this.getTypedRuleContext(ExtensionAdditionAlternativesGroupContext,0);
};

ExtensionAdditionAlternativeContext.prototype.namedType = function() {
    return this.getTypedRuleContext(NamedTypeContext,0);
};

ExtensionAdditionAlternativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionAdditionAlternative(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionAdditionAlternativeContext = ExtensionAdditionAlternativeContext;

ASN_3gppParser.prototype.extensionAdditionAlternative = function() {

    var localctx = new ExtensionAdditionAlternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ASN_3gppParser.RULE_extensionAdditionAlternative);
    try {
        this.state = 1107;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.DOUBLE_L_BRACKET:
            this.enterOuterAlt(localctx, 1);
            this.state = 1105;
            this.extensionAdditionAlternativesGroup();
            break;
        case ASN_3gppParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1106;
            this.namedType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionAlternativesGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_extensionAdditionAlternativesGroup;
    return this;
}

ExtensionAdditionAlternativesGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionAlternativesGroupContext.prototype.constructor = ExtensionAdditionAlternativesGroupContext;

ExtensionAdditionAlternativesGroupContext.prototype.DOUBLE_L_BRACKET = function() {
    return this.getToken(ASN_3gppParser.DOUBLE_L_BRACKET, 0);
};

ExtensionAdditionAlternativesGroupContext.prototype.versionNumber = function() {
    return this.getTypedRuleContext(VersionNumberContext,0);
};

ExtensionAdditionAlternativesGroupContext.prototype.alternativeTypeList = function() {
    return this.getTypedRuleContext(AlternativeTypeListContext,0);
};

ExtensionAdditionAlternativesGroupContext.prototype.DOUBLE_R_BRACKET = function() {
    return this.getToken(ASN_3gppParser.DOUBLE_R_BRACKET, 0);
};

ExtensionAdditionAlternativesGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExtensionAdditionAlternativesGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExtensionAdditionAlternativesGroupContext = ExtensionAdditionAlternativesGroupContext;

ASN_3gppParser.prototype.extensionAdditionAlternativesGroup = function() {

    var localctx = new ExtensionAdditionAlternativesGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, ASN_3gppParser.RULE_extensionAdditionAlternativesGroup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1109;
        this.match(ASN_3gppParser.DOUBLE_L_BRACKET);
        this.state = 1110;
        this.versionNumber();
        this.state = 1111;
        this.alternativeTypeList();
        this.state = 1112;
        this.match(ASN_3gppParser.DOUBLE_R_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RootAlternativeTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_rootAlternativeTypeList;
    return this;
}

RootAlternativeTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootAlternativeTypeListContext.prototype.constructor = RootAlternativeTypeListContext;

RootAlternativeTypeListContext.prototype.alternativeTypeList = function() {
    return this.getTypedRuleContext(AlternativeTypeListContext,0);
};

RootAlternativeTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitRootAlternativeTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.RootAlternativeTypeListContext = RootAlternativeTypeListContext;

ASN_3gppParser.prototype.rootAlternativeTypeList = function() {

    var localctx = new RootAlternativeTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, ASN_3gppParser.RULE_rootAlternativeTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1114;
        this.alternativeTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlternativeTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_alternativeTypeList;
    return this;
}

AlternativeTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlternativeTypeListContext.prototype.constructor = AlternativeTypeListContext;

AlternativeTypeListContext.prototype.namedType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedTypeContext);
    } else {
        return this.getTypedRuleContext(NamedTypeContext,i);
    }
};

AlternativeTypeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


AlternativeTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitAlternativeTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.AlternativeTypeListContext = AlternativeTypeListContext;

ASN_3gppParser.prototype.alternativeTypeList = function() {

    var localctx = new AlternativeTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, ASN_3gppParser.RULE_alternativeTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1116;
        this.namedType();
        this.state = 1121;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,127,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1117;
                this.match(ASN_3gppParser.COMMA);
                this.state = 1118;
                this.namedType(); 
            }
            this.state = 1123;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,127,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_namedType;
    return this;
}

NamedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedTypeContext.prototype.constructor = NamedTypeContext;

NamedTypeContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

NamedTypeContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

NamedTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitNamedType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.NamedTypeContext = NamedTypeContext;

ASN_3gppParser.prototype.namedType = function() {

    var localctx = new NamedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, ASN_3gppParser.RULE_namedType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1124;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 1125;
        this.asnType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumeratedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_enumeratedType;
    return this;
}

EnumeratedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratedTypeContext.prototype.constructor = EnumeratedTypeContext;

EnumeratedTypeContext.prototype.ENUMERATED_LITERAL = function() {
    return this.getToken(ASN_3gppParser.ENUMERATED_LITERAL, 0);
};

EnumeratedTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

EnumeratedTypeContext.prototype.enumerations = function() {
    return this.getTypedRuleContext(EnumerationsContext,0);
};

EnumeratedTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

EnumeratedTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitEnumeratedType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.EnumeratedTypeContext = EnumeratedTypeContext;

ASN_3gppParser.prototype.enumeratedType = function() {

    var localctx = new EnumeratedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, ASN_3gppParser.RULE_enumeratedType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1127;
        this.match(ASN_3gppParser.ENUMERATED_LITERAL);
        this.state = 1128;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 1129;
        this.enumerations();
        this.state = 1130;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_enumerations;
    return this;
}

EnumerationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationsContext.prototype.constructor = EnumerationsContext;

EnumerationsContext.prototype.rootEnumeration = function() {
    return this.getTypedRuleContext(RootEnumerationContext,0);
};

EnumerationsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


EnumerationsContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASN_3gppParser.ELLIPSIS, 0);
};

EnumerationsContext.prototype.exceptionSpec = function() {
    return this.getTypedRuleContext(ExceptionSpecContext,0);
};

EnumerationsContext.prototype.additionalEnumeration = function() {
    return this.getTypedRuleContext(AdditionalEnumerationContext,0);
};

EnumerationsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitEnumerations(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.EnumerationsContext = EnumerationsContext;

ASN_3gppParser.prototype.enumerations = function() {

    var localctx = new EnumerationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, ASN_3gppParser.RULE_enumerations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1132;
        this.rootEnumeration();
        this.state = 1142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.COMMA) {
            this.state = 1133;
            this.match(ASN_3gppParser.COMMA);
            this.state = 1134;
            this.match(ASN_3gppParser.ELLIPSIS);
            this.state = 1136;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.EXCLAM) {
                this.state = 1135;
                this.exceptionSpec();
            }

            this.state = 1140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASN_3gppParser.COMMA) {
                this.state = 1138;
                this.match(ASN_3gppParser.COMMA);
                this.state = 1139;
                this.additionalEnumeration();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RootEnumerationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_rootEnumeration;
    return this;
}

RootEnumerationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootEnumerationContext.prototype.constructor = RootEnumerationContext;

RootEnumerationContext.prototype.enumeration = function() {
    return this.getTypedRuleContext(EnumerationContext,0);
};

RootEnumerationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitRootEnumeration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.RootEnumerationContext = RootEnumerationContext;

ASN_3gppParser.prototype.rootEnumeration = function() {

    var localctx = new RootEnumerationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, ASN_3gppParser.RULE_rootEnumeration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1144;
        this.enumeration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_enumeration;
    return this;
}

EnumerationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationContext.prototype.constructor = EnumerationContext;

EnumerationContext.prototype.enumerationItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumerationItemContext);
    } else {
        return this.getTypedRuleContext(EnumerationItemContext,i);
    }
};

EnumerationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


EnumerationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitEnumeration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.EnumerationContext = EnumerationContext;

ASN_3gppParser.prototype.enumeration = function() {

    var localctx = new EnumerationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, ASN_3gppParser.RULE_enumeration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1146;
        this.enumerationItem();
        this.state = 1151;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,131,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1147;
                this.match(ASN_3gppParser.COMMA);
                this.state = 1148;
                this.enumerationItem(); 
            }
            this.state = 1153;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,131,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_enumerationItem;
    return this;
}

EnumerationItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationItemContext.prototype.constructor = EnumerationItemContext;

EnumerationItemContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

EnumerationItemContext.prototype.namedNumber = function() {
    return this.getTypedRuleContext(NamedNumberContext,0);
};

EnumerationItemContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

EnumerationItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitEnumerationItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.EnumerationItemContext = EnumerationItemContext;

ASN_3gppParser.prototype.enumerationItem = function() {

    var localctx = new EnumerationItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, ASN_3gppParser.RULE_enumerationItem);
    try {
        this.state = 1157;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1154;
            this.match(ASN_3gppParser.IDENTIFIER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1155;
            this.namedNumber();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1156;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_namedNumber;
    return this;
}

NamedNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedNumberContext.prototype.constructor = NamedNumberContext;

NamedNumberContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

NamedNumberContext.prototype.L_PARAN = function() {
    return this.getToken(ASN_3gppParser.L_PARAN, 0);
};

NamedNumberContext.prototype.R_PARAN = function() {
    return this.getToken(ASN_3gppParser.R_PARAN, 0);
};

NamedNumberContext.prototype.signedNumber = function() {
    return this.getTypedRuleContext(SignedNumberContext,0);
};

NamedNumberContext.prototype.definedValue = function() {
    return this.getTypedRuleContext(DefinedValueContext,0);
};

NamedNumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitNamedNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.NamedNumberContext = NamedNumberContext;

ASN_3gppParser.prototype.namedNumber = function() {

    var localctx = new NamedNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, ASN_3gppParser.RULE_namedNumber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1159;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 1160;
        this.match(ASN_3gppParser.L_PARAN);
        this.state = 1163;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.MINUS:
        case ASN_3gppParser.NUMBER:
            this.state = 1161;
            this.signedNumber();
            break;
        case ASN_3gppParser.IDENTIFIER:
            this.state = 1162;
            this.definedValue();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1165;
        this.match(ASN_3gppParser.R_PARAN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinedValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_definedValue;
    return this;
}

DefinedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinedValueContext.prototype.constructor = DefinedValueContext;

DefinedValueContext.prototype.parameterizedValue = function() {
    return this.getTypedRuleContext(ParameterizedValueContext,0);
};

DefinedValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitDefinedValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.DefinedValueContext = DefinedValueContext;

ASN_3gppParser.prototype.definedValue = function() {

    var localctx = new DefinedValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, ASN_3gppParser.RULE_definedValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1167;
        this.parameterizedValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterizedValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_parameterizedValue;
    return this;
}

ParameterizedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterizedValueContext.prototype.constructor = ParameterizedValueContext;

ParameterizedValueContext.prototype.simpleDefinedValue = function() {
    return this.getTypedRuleContext(SimpleDefinedValueContext,0);
};

ParameterizedValueContext.prototype.actualParameterList = function() {
    return this.getTypedRuleContext(ActualParameterListContext,0);
};

ParameterizedValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitParameterizedValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ParameterizedValueContext = ParameterizedValueContext;

ASN_3gppParser.prototype.parameterizedValue = function() {

    var localctx = new ParameterizedValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, ASN_3gppParser.RULE_parameterizedValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1169;
        this.simpleDefinedValue();
        this.state = 1171;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.L_BRACE) {
            this.state = 1170;
            this.actualParameterList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleDefinedValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_simpleDefinedValue;
    return this;
}

SimpleDefinedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleDefinedValueContext.prototype.constructor = SimpleDefinedValueContext;

SimpleDefinedValueContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.IDENTIFIER);
    } else {
        return this.getToken(ASN_3gppParser.IDENTIFIER, i);
    }
};


SimpleDefinedValueContext.prototype.DOT = function() {
    return this.getToken(ASN_3gppParser.DOT, 0);
};

SimpleDefinedValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitSimpleDefinedValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.SimpleDefinedValueContext = SimpleDefinedValueContext;

ASN_3gppParser.prototype.simpleDefinedValue = function() {

    var localctx = new SimpleDefinedValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, ASN_3gppParser.RULE_simpleDefinedValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1173;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 1176;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.DOT) {
            this.state = 1174;
            this.match(ASN_3gppParser.DOT);
            this.state = 1175;
            this.match(ASN_3gppParser.IDENTIFIER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActualParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_actualParameterList;
    return this;
}

ActualParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActualParameterListContext.prototype.constructor = ActualParameterListContext;

ActualParameterListContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

ActualParameterListContext.prototype.actualParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActualParameterContext);
    } else {
        return this.getTypedRuleContext(ActualParameterContext,i);
    }
};

ActualParameterListContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

ActualParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ActualParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitActualParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ActualParameterListContext = ActualParameterListContext;

ASN_3gppParser.prototype.actualParameterList = function() {

    var localctx = new ActualParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, ASN_3gppParser.RULE_actualParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1178;
        this.match(ASN_3gppParser.L_BRACE);
        this.state = 1179;
        this.actualParameter();
        this.state = 1184;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.COMMA) {
            this.state = 1180;
            this.match(ASN_3gppParser.COMMA);
            this.state = 1181;
            this.actualParameter();
            this.state = 1186;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1187;
        this.match(ASN_3gppParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActualParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_actualParameter;
    return this;
}

ActualParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActualParameterContext.prototype.constructor = ActualParameterContext;

ActualParameterContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ActualParameterContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ActualParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitActualParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ActualParameterContext = ActualParameterContext;

ASN_3gppParser.prototype.actualParameter = function() {

    var localctx = new ActualParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, ASN_3gppParser.RULE_actualParameter);
    try {
        this.state = 1191;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1189;
            this.asnType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1190;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptionSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_exceptionSpec;
    return this;
}

ExceptionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionSpecContext.prototype.constructor = ExceptionSpecContext;

ExceptionSpecContext.prototype.EXCLAM = function() {
    return this.getToken(ASN_3gppParser.EXCLAM, 0);
};

ExceptionSpecContext.prototype.exceptionIdentification = function() {
    return this.getTypedRuleContext(ExceptionIdentificationContext,0);
};

ExceptionSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExceptionSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExceptionSpecContext = ExceptionSpecContext;

ASN_3gppParser.prototype.exceptionSpec = function() {

    var localctx = new ExceptionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, ASN_3gppParser.RULE_exceptionSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1193;
        this.match(ASN_3gppParser.EXCLAM);
        this.state = 1194;
        this.exceptionIdentification();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptionIdentificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_exceptionIdentification;
    return this;
}

ExceptionIdentificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionIdentificationContext.prototype.constructor = ExceptionIdentificationContext;

ExceptionIdentificationContext.prototype.signedNumber = function() {
    return this.getTypedRuleContext(SignedNumberContext,0);
};

ExceptionIdentificationContext.prototype.definedValue = function() {
    return this.getTypedRuleContext(DefinedValueContext,0);
};

ExceptionIdentificationContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ExceptionIdentificationContext.prototype.COLON = function() {
    return this.getToken(ASN_3gppParser.COLON, 0);
};

ExceptionIdentificationContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ExceptionIdentificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitExceptionIdentification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ExceptionIdentificationContext = ExceptionIdentificationContext;

ASN_3gppParser.prototype.exceptionIdentification = function() {

    var localctx = new ExceptionIdentificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, ASN_3gppParser.RULE_exceptionIdentification);
    try {
        this.state = 1202;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1196;
            this.signedNumber();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1197;
            this.definedValue();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1198;
            this.asnType();
            this.state = 1199;
            this.match(ASN_3gppParser.COLON);
            this.state = 1200;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdditionalEnumerationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_additionalEnumeration;
    return this;
}

AdditionalEnumerationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditionalEnumerationContext.prototype.constructor = AdditionalEnumerationContext;

AdditionalEnumerationContext.prototype.enumeration = function() {
    return this.getTypedRuleContext(EnumerationContext,0);
};

AdditionalEnumerationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitAdditionalEnumeration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.AdditionalEnumerationContext = AdditionalEnumerationContext;

ASN_3gppParser.prototype.additionalEnumeration = function() {

    var localctx = new AdditionalEnumerationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, ASN_3gppParser.RULE_additionalEnumeration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1204;
        this.enumeration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntegerTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_integerType;
    return this;
}

IntegerTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerTypeContext.prototype.constructor = IntegerTypeContext;

IntegerTypeContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(ASN_3gppParser.INTEGER_LITERAL, 0);
};

IntegerTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

IntegerTypeContext.prototype.namedNumberList = function() {
    return this.getTypedRuleContext(NamedNumberListContext,0);
};

IntegerTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

IntegerTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitIntegerType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.IntegerTypeContext = IntegerTypeContext;

ASN_3gppParser.prototype.integerType = function() {

    var localctx = new IntegerTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, ASN_3gppParser.RULE_integerType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1206;
        this.match(ASN_3gppParser.INTEGER_LITERAL);
        this.state = 1211;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        if(la_===1) {
            this.state = 1207;
            this.match(ASN_3gppParser.L_BRACE);
            this.state = 1208;
            this.namedNumberList();
            this.state = 1209;
            this.match(ASN_3gppParser.R_BRACE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedNumberListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_namedNumberList;
    return this;
}

NamedNumberListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedNumberListContext.prototype.constructor = NamedNumberListContext;

NamedNumberListContext.prototype.namedNumber = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedNumberContext);
    } else {
        return this.getTypedRuleContext(NamedNumberContext,i);
    }
};

NamedNumberListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


NamedNumberListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitNamedNumberList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.NamedNumberListContext = NamedNumberListContext;

ASN_3gppParser.prototype.namedNumberList = function() {

    var localctx = new NamedNumberListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, ASN_3gppParser.RULE_namedNumberList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1213;
        this.namedNumber();
        this.state = 1218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.COMMA) {
            this.state = 1214;
            this.match(ASN_3gppParser.COMMA);
            this.state = 1215;
            this.namedNumber();
            this.state = 1220;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectidentifiertypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_objectidentifiertype;
    return this;
}

ObjectidentifiertypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectidentifiertypeContext.prototype.constructor = ObjectidentifiertypeContext;

ObjectidentifiertypeContext.prototype.OBJECT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OBJECT_LITERAL, 0);
};

ObjectidentifiertypeContext.prototype.IDENTIFIER_LITERAL = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER_LITERAL, 0);
};

ObjectidentifiertypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitObjectidentifiertype(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ObjectidentifiertypeContext = ObjectidentifiertypeContext;

ASN_3gppParser.prototype.objectidentifiertype = function() {

    var localctx = new ObjectidentifiertypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, ASN_3gppParser.RULE_objectidentifiertype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1221;
        this.match(ASN_3gppParser.OBJECT_LITERAL);
        this.state = 1222;
        this.match(ASN_3gppParser.IDENTIFIER_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentRelationConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_componentRelationConstraint;
    return this;
}

ComponentRelationConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentRelationConstraintContext.prototype.constructor = ComponentRelationConstraintContext;

ComponentRelationConstraintContext.prototype.L_BRACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.L_BRACE);
    } else {
        return this.getToken(ASN_3gppParser.L_BRACE, i);
    }
};


ComponentRelationConstraintContext.prototype.R_BRACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.R_BRACE);
    } else {
        return this.getToken(ASN_3gppParser.R_BRACE, i);
    }
};


ComponentRelationConstraintContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.IDENTIFIER);
    } else {
        return this.getToken(ASN_3gppParser.IDENTIFIER, i);
    }
};


ComponentRelationConstraintContext.prototype.atNotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AtNotationContext);
    } else {
        return this.getTypedRuleContext(AtNotationContext,i);
    }
};

ComponentRelationConstraintContext.prototype.DOT = function() {
    return this.getToken(ASN_3gppParser.DOT, 0);
};

ComponentRelationConstraintContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


ComponentRelationConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitComponentRelationConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ComponentRelationConstraintContext = ComponentRelationConstraintContext;

ASN_3gppParser.prototype.componentRelationConstraint = function() {

    var localctx = new ComponentRelationConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, ASN_3gppParser.RULE_componentRelationConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1224;
        this.match(ASN_3gppParser.L_BRACE);

        this.state = 1225;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 1228;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.DOT) {
            this.state = 1226;
            this.match(ASN_3gppParser.DOT);
            this.state = 1227;
            this.match(ASN_3gppParser.IDENTIFIER);
        }

        this.state = 1230;
        this.match(ASN_3gppParser.R_BRACE);
        this.state = 1242;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.L_BRACE) {
            this.state = 1231;
            this.match(ASN_3gppParser.L_BRACE);
            this.state = 1232;
            this.atNotation();
            this.state = 1237;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ASN_3gppParser.COMMA) {
                this.state = 1233;
                this.match(ASN_3gppParser.COMMA);
                this.state = 1234;
                this.atNotation();
                this.state = 1239;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1240;
            this.match(ASN_3gppParser.R_BRACE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AtNotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_atNotation;
    return this;
}

AtNotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtNotationContext.prototype.constructor = AtNotationContext;

AtNotationContext.prototype.componentIdList = function() {
    return this.getTypedRuleContext(ComponentIdListContext,0);
};

AtNotationContext.prototype.A_ROND = function() {
    return this.getToken(ASN_3gppParser.A_ROND, 0);
};

AtNotationContext.prototype.A_ROND_DOT = function() {
    return this.getToken(ASN_3gppParser.A_ROND_DOT, 0);
};

AtNotationContext.prototype.level = function() {
    return this.getTypedRuleContext(LevelContext,0);
};

AtNotationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitAtNotation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.AtNotationContext = AtNotationContext;

ASN_3gppParser.prototype.atNotation = function() {

    var localctx = new AtNotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, ASN_3gppParser.RULE_atNotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1247;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.A_ROND:
            this.state = 1244;
            this.match(ASN_3gppParser.A_ROND);
            break;
        case ASN_3gppParser.A_ROND_DOT:
            this.state = 1245;
            this.match(ASN_3gppParser.A_ROND_DOT);
            this.state = 1246;
            this.level();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1249;
        this.componentIdList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LevelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_level;
    return this;
}

LevelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LevelContext.prototype.constructor = LevelContext;

LevelContext.prototype.DOT = function() {
    return this.getToken(ASN_3gppParser.DOT, 0);
};

LevelContext.prototype.level = function() {
    return this.getTypedRuleContext(LevelContext,0);
};

LevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitLevel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.LevelContext = LevelContext;

ASN_3gppParser.prototype.level = function() {

    var localctx = new LevelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, ASN_3gppParser.RULE_level);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1253;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASN_3gppParser.DOT) {
            this.state = 1251;
            this.match(ASN_3gppParser.DOT);
            this.state = 1252;
            this.level();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentIdListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_componentIdList;
    return this;
}

ComponentIdListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentIdListContext.prototype.constructor = ComponentIdListContext;

ComponentIdListContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.IDENTIFIER);
    } else {
        return this.getToken(ASN_3gppParser.IDENTIFIER, i);
    }
};


ComponentIdListContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.DOT);
    } else {
        return this.getToken(ASN_3gppParser.DOT, i);
    }
};


ComponentIdListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitComponentIdList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.ComponentIdListContext = ComponentIdListContext;

ASN_3gppParser.prototype.componentIdList = function() {

    var localctx = new ComponentIdListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, ASN_3gppParser.RULE_componentIdList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1255;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 1260;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.DOT) {
            this.state = 1256;
            this.match(ASN_3gppParser.DOT);
            this.state = 1257;
            this.match(ASN_3gppParser.IDENTIFIER);
            this.state = 1262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OctetStringTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_octetStringType;
    return this;
}

OctetStringTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OctetStringTypeContext.prototype.constructor = OctetStringTypeContext;

OctetStringTypeContext.prototype.OCTET_LITERAL = function() {
    return this.getToken(ASN_3gppParser.OCTET_LITERAL, 0);
};

OctetStringTypeContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ASN_3gppParser.STRING_LITERAL, 0);
};

OctetStringTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitOctetStringType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.OctetStringTypeContext = OctetStringTypeContext;

ASN_3gppParser.prototype.octetStringType = function() {

    var localctx = new OctetStringTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, ASN_3gppParser.RULE_octetStringType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1263;
        this.match(ASN_3gppParser.OCTET_LITERAL);
        this.state = 1264;
        this.match(ASN_3gppParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitStringTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_bitStringType;
    return this;
}

BitStringTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitStringTypeContext.prototype.constructor = BitStringTypeContext;

BitStringTypeContext.prototype.BIT_LITERAL = function() {
    return this.getToken(ASN_3gppParser.BIT_LITERAL, 0);
};

BitStringTypeContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ASN_3gppParser.STRING_LITERAL, 0);
};

BitStringTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASN_3gppParser.L_BRACE, 0);
};

BitStringTypeContext.prototype.namedBitList = function() {
    return this.getTypedRuleContext(NamedBitListContext,0);
};

BitStringTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASN_3gppParser.R_BRACE, 0);
};

BitStringTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitBitStringType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.BitStringTypeContext = BitStringTypeContext;

ASN_3gppParser.prototype.bitStringType = function() {

    var localctx = new BitStringTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, ASN_3gppParser.RULE_bitStringType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1266;
        this.match(ASN_3gppParser.BIT_LITERAL);
        this.state = 1267;
        this.match(ASN_3gppParser.STRING_LITERAL);
        this.state = 1273;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
        if(la_===1) {
            this.state = 1269;
            this.match(ASN_3gppParser.L_BRACE);
            this.state = 1270;
            this.namedBitList();
            this.state = 1271;
            this.match(ASN_3gppParser.R_BRACE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedBitListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_namedBitList;
    return this;
}

NamedBitListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedBitListContext.prototype.constructor = NamedBitListContext;

NamedBitListContext.prototype.namedBit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedBitContext);
    } else {
        return this.getTypedRuleContext(NamedBitContext,i);
    }
};

NamedBitListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASN_3gppParser.COMMA);
    } else {
        return this.getToken(ASN_3gppParser.COMMA, i);
    }
};


NamedBitListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitNamedBitList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.NamedBitListContext = NamedBitListContext;

ASN_3gppParser.prototype.namedBitList = function() {

    var localctx = new NamedBitListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, ASN_3gppParser.RULE_namedBitList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1275;
        this.namedBit();
        this.state = 1280;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASN_3gppParser.COMMA) {
            this.state = 1276;
            this.match(ASN_3gppParser.COMMA);
            this.state = 1277;
            this.namedBit();
            this.state = 1282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedBitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_namedBit;
    return this;
}

NamedBitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedBitContext.prototype.constructor = NamedBitContext;

NamedBitContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASN_3gppParser.IDENTIFIER, 0);
};

NamedBitContext.prototype.L_PARAN = function() {
    return this.getToken(ASN_3gppParser.L_PARAN, 0);
};

NamedBitContext.prototype.R_PARAN = function() {
    return this.getToken(ASN_3gppParser.R_PARAN, 0);
};

NamedBitContext.prototype.NUMBER = function() {
    return this.getToken(ASN_3gppParser.NUMBER, 0);
};

NamedBitContext.prototype.definedValue = function() {
    return this.getTypedRuleContext(DefinedValueContext,0);
};

NamedBitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitNamedBit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.NamedBitContext = NamedBitContext;

ASN_3gppParser.prototype.namedBit = function() {

    var localctx = new NamedBitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, ASN_3gppParser.RULE_namedBit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1283;
        this.match(ASN_3gppParser.IDENTIFIER);
        this.state = 1284;
        this.match(ASN_3gppParser.L_PARAN);
        this.state = 1287;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASN_3gppParser.NUMBER:
            this.state = 1285;
            this.match(ASN_3gppParser.NUMBER);
            break;
        case ASN_3gppParser.IDENTIFIER:
            this.state = 1286;
            this.definedValue();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1289;
        this.match(ASN_3gppParser.R_PARAN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASN_3gppParser.RULE_booleanValue;
    return this;
}

BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.TRUE_LITERAL = function() {
    return this.getToken(ASN_3gppParser.TRUE_LITERAL, 0);
};

BooleanValueContext.prototype.FALSE_LITERAL = function() {
    return this.getToken(ASN_3gppParser.FALSE_LITERAL, 0);
};

BooleanValueContext.prototype.TRUE_SMALL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.TRUE_SMALL_LITERAL, 0);
};

BooleanValueContext.prototype.FALSE_SMALL_LITERAL = function() {
    return this.getToken(ASN_3gppParser.FALSE_SMALL_LITERAL, 0);
};

BooleanValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ASN_3gppVisitor ) {
        return visitor.visitBooleanValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ASN_3gppParser.BooleanValueContext = BooleanValueContext;

ASN_3gppParser.prototype.booleanValue = function() {

    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, ASN_3gppParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1291;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASN_3gppParser.TRUE_LITERAL) | (1 << ASN_3gppParser.FALSE_LITERAL) | (1 << ASN_3gppParser.TRUE_SMALL_LITERAL) | (1 << ASN_3gppParser.FALSE_SMALL_LITERAL))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.ASN_3gppParser = ASN_3gppParser;
