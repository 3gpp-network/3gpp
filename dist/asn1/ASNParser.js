// Generated from src/asn1/ASN.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ASNListener = require('./ASNListener').ASNListener;
var grammarFileName = "ASN.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003j\u04ef\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004",
    "y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004\u007f\t",
    "\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t\u0082\u0004",
    "\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004\u0086\t",
    "\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t\u0089\u0004",
    "\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004\u008d\t",
    "\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t\u0090\u0004",
    "\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004\u0094\t",
    "\u0094\u0003\u0002\u0006\u0002\u012a\n\u0002\r\u0002\u000e\u0002\u012b",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0007\u0003\u0134\n\u0003\f\u0003\u000e\u0003\u0137\u000b\u0003\u0003",
    "\u0003\u0005\u0003\u013a\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u0146\n\u0004\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u014a\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u0150\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0159\n\u0007",
    "\u0003\b\u0005\b\u015c\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0162",
    "\n\t\u0003\n\u0005\n\u0165\n\n\u0003\u000b\u0003\u000b\u0007\u000b\u0169",
    "\n\u000b\f\u000b\u000e\u000b\u016c\u000b\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0007\u000f\u017a\n\u000f\f\u000f\u000e\u000f",
    "\u017d\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0182",
    "\n\u0010\u0003\u0011\u0003\u0011\u0007\u0011\u0186\n\u0011\f\u0011\u000e",
    "\u0011\u0189\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u0190\n\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0198\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0005\u0014\u019e\n",
    "\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u01a2\n\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u01ac\n\u0016\u0005\u0016\u01ae\n\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u01b6\n\u0016\u0005\u0016\u01b8\n\u0016\u0003\u0017\u0003\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u01bf\n\u0018\f\u0018",
    "\u000e\u0018\u01c2\u000b\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u01c8\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u01cd\n\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u01d1",
    "\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u01d6\n\u001b",
    "\f\u001b\u000e\u001b\u01d9\u000b\u001b\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u01dd\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u01e6\n\u001e\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u01ec\n\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u01f0\n\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0005\u001f\u01f5\n\u001f\u0003 \u0003 \u0003 \u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0005!\u01ff\n!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0005!\u0206\n!\u0005!\u0208\n!\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0007\"\u020e\n\"\f\"\u000e\"\u0211\u000b\"\u0003\"\u0003\"\u0003",
    "#\u0003#\u0003#\u0005#\u0218\n#\u0003#\u0003#\u0003$\u0003$\u0005$\u021e",
    "\n$\u0003%\u0003%\u0005%\u0222\n%\u0003&\u0003&\u0003&\u0003\'\u0003",
    "\'\u0005\'\u0229\n\'\u0003(\u0003(\u0005(\u022d\n(\u0003(\u0003(\u0003",
    "(\u0005(\u0232\n(\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0007+\u023f\n+\f+\u000e+\u0242\u000b+\u0003",
    "+\u0003+\u0005+\u0246\n+\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0006",
    "-\u024e\n-\r-\u000e-\u024f\u0003-\u0003-\u0003.\u0003.\u0005.\u0256",
    "\n.\u0003/\u0003/\u0006/\u025a\n/\r/\u000e/\u025b\u0003/\u0003/\u0003",
    "0\u00030\u00050\u0262\n0\u00031\u00031\u00032\u00032\u00032\u00033\u0003",
    "3\u00033\u00053\u026c\n3\u00033\u00033\u00053\u0270\n3\u00033\u0005",
    "3\u0273\n3\u00033\u00053\u0276\n3\u00053\u0278\n3\u00033\u00033\u0003",
    "3\u00033\u00033\u00053\u027f\n3\u00053\u0281\n3\u00033\u00033\u0003",
    "3\u00033\u00033\u00053\u0288\n3\u00053\u028a\n3\u00053\u028c\n3\u0003",
    "4\u00034\u00034\u00054\u0291\n4\u00035\u00035\u00035\u00055\u0296\n",
    "5\u00036\u00036\u00036\u00036\u00056\u029c\n6\u00036\u00056\u029f\n",
    "6\u00037\u00037\u00037\u00057\u02a4\n7\u00038\u00038\u00038\u00038\u0005",
    "8\u02aa\n8\u00039\u00039\u00039\u00039\u00059\u02b0\n9\u0003:\u0003",
    ":\u0003:\u0005:\u02b5\n:\u0003;\u0003;\u0005;\u02b9\n;\u0003<\u0003",
    "<\u0003<\u0003=\u0003=\u0005=\u02c0\n=\u0003>\u0003>\u0003>\u0003>\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0005?\u02cb\n?\u0005?\u02cd\n?\u0003",
    "?\u0003?\u0003?\u0005?\u02d2\n?\u0005?\u02d4\n?\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0007@\u02dc\n@\f@\u000e@\u02df\u000b@\u0003",
    "A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u02ea",
    "\nB\u0005B\u02ec\nB\u0003C\u0003C\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0005E\u02f5\nE\u0003F\u0003F\u0003F\u0003F\u0007F\u02fb\nF\fF\u000e",
    "F\u02fe\u000bF\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0007",
    "H\u0307\nH\fH\u000eH\u030a\u000bH\u0003I\u0003I\u0003J\u0003J\u0003",
    "K\u0003K\u0003L\u0003L\u0005L\u0314\nL\u0003M\u0003M\u0005M\u0318\n",
    "M\u0003N\u0003N\u0005N\u031c\nN\u0003N\u0005N\u031f\nN\u0003N\u0003",
    "N\u0005N\u0323\nN\u0003N\u0003N\u0005N\u0327\nN\u0003N\u0003N\u0003",
    "N\u0003N\u0005N\u032d\nN\u0003O\u0003O\u0003O\u0003O\u0005O\u0333\n",
    "O\u0003P\u0003P\u0003P\u0003P\u0005P\u0339\nP\u0003Q\u0003Q\u0003Q\u0005",
    "Q\u033e\nQ\u0003R\u0003R\u0003R\u0003R\u0005R\u0344\nR\u0003S\u0003",
    "S\u0003S\u0005S\u0349\nS\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003",
    "U\u0003V\u0003V\u0005V\u0354\nV\u0003V\u0007V\u0357\nV\fV\u000eV\u035a",
    "\u000bV\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0005W\u0369\nW\u0003X\u0003X\u0003X\u0003",
    "X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0375\nY\u0003Y\u0003",
    "Y\u0003Z\u0003Z\u0003Z\u0005Z\u037c\nZ\u0003Z\u0003Z\u0003Z\u0005Z\u0381",
    "\nZ\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0005\\\u0388\n\\\u0003\\",
    "\u0005\\\u038b\n\\\u0003]\u0003]\u0003]\u0005]\u0390\n]\u0003]\u0003",
    "]\u0003^\u0003^\u0005^\u0396\n^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0007_\u039e\n_\f_\u000e_\u03a1\u000b_\u0003_\u0003_\u0003`\u0003",
    "`\u0003`\u0005`\u03a8\n`\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005",
    "a\u03b0\na\u0003b\u0003b\u0003c\u0003c\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0005d\u03c7\nd\u0003e\u0005e\u03ca\ne\u0003e\u0003",
    "e\u0003e\u0003e\u0005e\u03d0\ne\u0005e\u03d2\ne\u0003e\u0003e\u0003",
    "e\u0005e\u03d7\ne\u0005e\u03d9\ne\u0003f\u0003f\u0003f\u0007f\u03de",
    "\nf\ff\u000ef\u03e1\u000bf\u0003g\u0003g\u0003g\u0003h\u0003h\u0003",
    "i\u0003i\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u03f1",
    "\nj\u0003k\u0003k\u0003k\u0003k\u0003l\u0003l\u0007l\u03f9\nl\fl\u000e",
    "l\u03fc\u000bl\u0003m\u0003m\u0003m\u0003m\u0003m\u0005m\u0403\nm\u0003",
    "m\u0005m\u0406\nm\u0003m\u0005m\u0409\nm\u0003n\u0003n\u0005n\u040d",
    "\nn\u0003o\u0003o\u0003o\u0003o\u0003p\u0003p\u0003q\u0005q\u0416\n",
    "q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003r\u0003r\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0003s\u0005s\u0425\ns\u0003t\u0003t\u0005t\u0429\n",
    "t\u0003u\u0003u\u0003u\u0007u\u042e\nu\fu\u000eu\u0431\u000bu\u0003",
    "v\u0003v\u0005v\u0435\nv\u0003w\u0003w\u0003w\u0003w\u0003w\u0003x\u0003",
    "x\u0003y\u0003y\u0003y\u0007y\u0441\ny\fy\u000ey\u0444\u000by\u0003",
    "z\u0003z\u0003z\u0003{\u0003{\u0003{\u0003{\u0003{\u0003|\u0003|\u0003",
    "|\u0003|\u0005|\u0452\n|\u0003|\u0003|\u0005|\u0456\n|\u0005|\u0458",
    "\n|\u0003}\u0003}\u0003~\u0003~\u0003~\u0007~\u045f\n~\f~\u000e~\u0462",
    "\u000b~\u0003\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u0467\n\u007f",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u046d\n",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0082\u0003",
    "\u0082\u0005\u0082\u0475\n\u0082\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0005\u0083\u047a\n\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0007\u0084\u0480\n\u0084\f\u0084\u000e\u0084\u0483\u000b\u0084",
    "\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0005\u0085\u0489\n",
    "\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u0494\n\u0087",
    "\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0005\u0089\u049d\n\u0089\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0007\u008a\u04a2\n\u008a\f\u008a\u000e\u008a\u04a5\u000b\u008a",
    "\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0005\u008c\u04ae\n\u008c\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0003\u008c\u0003\u008c\u0007\u008c\u04b5\n\u008c\f\u008c\u000e",
    "\u008c\u04b8\u000b\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u04bc\n",
    "\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u04c1\n\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0005\u008e\u04c7\n",
    "\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0007\u008f\u04cc\n\u008f",
    "\f\u008f\u000e\u008f\u04cf\u000b\u008f\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003",
    "\u0091\u0003\u0091\u0005\u0091\u04db\n\u0091\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0007\u0092\u04e0\n\u0092\f\u0092\u000e\u0092\u04e3\u000b",
    "\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u04e9",
    "\n\u0093\u0003\u0093\u0003\u0093\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0002\u0002\u0095\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2",
    "\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da",
    "\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2",
    "\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a",
    "\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122",
    "\u0124\u0126\u0002\t\u0004\u0002HHJK\u0003\u0002;<\u0004\u0002\u0017",
    "\u0017jj\u0003\u0002./\u0004\u0002--00\u0003\u000289\u0004\u0002\u0007",
    "\b\u0012\u0013\u0002\u0514\u0002\u0129\u0003\u0002\u0002\u0002\u0004",
    "\u012d\u0003\u0002\u0002\u0002\u0006\u0145\u0003\u0002\u0002\u0002\b",
    "\u0149\u0003\u0002\u0002\u0002\n\u014f\u0003\u0002\u0002\u0002\f\u0158",
    "\u0003\u0002\u0002\u0002\u000e\u015b\u0003\u0002\u0002\u0002\u0010\u0161",
    "\u0003\u0002\u0002\u0002\u0012\u0164\u0003\u0002\u0002\u0002\u0014\u0166",
    "\u0003\u0002\u0002\u0002\u0016\u016d\u0003\u0002\u0002\u0002\u0018\u0171",
    "\u0003\u0002\u0002\u0002\u001a\u0174\u0003\u0002\u0002\u0002\u001c\u0176",
    "\u0003\u0002\u0002\u0002\u001e\u017e\u0003\u0002\u0002\u0002 \u0183",
    "\u0003\u0002\u0002\u0002\"\u018a\u0003\u0002\u0002\u0002$\u0191\u0003",
    "\u0002\u0002\u0002&\u019b\u0003\u0002\u0002\u0002(\u01a1\u0003\u0002",
    "\u0002\u0002*\u01b7\u0003\u0002\u0002\u0002,\u01b9\u0003\u0002\u0002",
    "\u0002.\u01bb\u0003\u0002\u0002\u00020\u01cc\u0003\u0002\u0002\u0002",
    "2\u01d0\u0003\u0002\u0002\u00024\u01d2\u0003\u0002\u0002\u00026\u01dc",
    "\u0003\u0002\u0002\u00028\u01de\u0003\u0002\u0002\u0002:\u01e5\u0003",
    "\u0002\u0002\u0002<\u01e7\u0003\u0002\u0002\u0002>\u01f6\u0003\u0002",
    "\u0002\u0002@\u0207\u0003\u0002\u0002\u0002B\u0209\u0003\u0002\u0002",
    "\u0002D\u0217\u0003\u0002\u0002\u0002F\u021d\u0003\u0002\u0002\u0002",
    "H\u0221\u0003\u0002\u0002\u0002J\u0223\u0003\u0002\u0002\u0002L\u0228",
    "\u0003\u0002\u0002\u0002N\u0231\u0003\u0002\u0002\u0002P\u0233\u0003",
    "\u0002\u0002\u0002R\u0235\u0003\u0002\u0002\u0002T\u0239\u0003\u0002",
    "\u0002\u0002V\u0247\u0003\u0002\u0002\u0002X\u024b\u0003\u0002\u0002",
    "\u0002Z\u0255\u0003\u0002\u0002\u0002\\\u0257\u0003\u0002\u0002\u0002",
    "^\u0261\u0003\u0002\u0002\u0002`\u0263\u0003\u0002\u0002\u0002b\u0265",
    "\u0003\u0002\u0002\u0002d\u0268\u0003\u0002\u0002\u0002f\u028d\u0003",
    "\u0002\u0002\u0002h\u0295\u0003\u0002\u0002\u0002j\u0297\u0003\u0002",
    "\u0002\u0002l\u02a3\u0003\u0002\u0002\u0002n\u02a5\u0003\u0002\u0002",
    "\u0002p\u02ab\u0003\u0002\u0002\u0002r\u02b4\u0003\u0002\u0002\u0002",
    "t\u02b8\u0003\u0002\u0002\u0002v\u02ba\u0003\u0002\u0002\u0002x\u02bd",
    "\u0003\u0002\u0002\u0002z\u02c1\u0003\u0002\u0002\u0002|\u02d3\u0003",
    "\u0002\u0002\u0002~\u02d5\u0003\u0002\u0002\u0002\u0080\u02e0\u0003",
    "\u0002\u0002\u0002\u0082\u02e4\u0003\u0002\u0002\u0002\u0084\u02ed\u0003",
    "\u0002\u0002\u0002\u0086\u02ef\u0003\u0002\u0002\u0002\u0088\u02f4\u0003",
    "\u0002\u0002\u0002\u008a\u02f6\u0003\u0002\u0002\u0002\u008c\u02ff\u0003",
    "\u0002\u0002\u0002\u008e\u0302\u0003\u0002\u0002\u0002\u0090\u030b\u0003",
    "\u0002\u0002\u0002\u0092\u030d\u0003\u0002\u0002\u0002\u0094\u030f\u0003",
    "\u0002\u0002\u0002\u0096\u0313\u0003\u0002\u0002\u0002\u0098\u0315\u0003",
    "\u0002\u0002\u0002\u009a\u032c\u0003\u0002\u0002\u0002\u009c\u032e\u0003",
    "\u0002\u0002\u0002\u009e\u0334\u0003\u0002\u0002\u0002\u00a0\u033d\u0003",
    "\u0002\u0002\u0002\u00a2\u033f\u0003\u0002\u0002\u0002\u00a4\u0348\u0003",
    "\u0002\u0002\u0002\u00a6\u034a\u0003\u0002\u0002\u0002\u00a8\u034d\u0003",
    "\u0002\u0002\u0002\u00aa\u0353\u0003\u0002\u0002\u0002\u00ac\u0368\u0003",
    "\u0002\u0002\u0002\u00ae\u036a\u0003\u0002\u0002\u0002\u00b0\u036e\u0003",
    "\u0002\u0002\u0002\u00b2\u0378\u0003\u0002\u0002\u0002\u00b4\u0382\u0003",
    "\u0002\u0002\u0002\u00b6\u0384\u0003\u0002\u0002\u0002\u00b8\u038c\u0003",
    "\u0002\u0002\u0002\u00ba\u0395\u0003\u0002\u0002\u0002\u00bc\u0397\u0003",
    "\u0002\u0002\u0002\u00be\u03a7\u0003\u0002\u0002\u0002\u00c0\u03a9\u0003",
    "\u0002\u0002\u0002\u00c2\u03b1\u0003\u0002\u0002\u0002\u00c4\u03b3\u0003",
    "\u0002\u0002\u0002\u00c6\u03c6\u0003\u0002\u0002\u0002\u00c8\u03d8\u0003",
    "\u0002\u0002\u0002\u00ca\u03da\u0003\u0002\u0002\u0002\u00cc\u03e2\u0003",
    "\u0002\u0002\u0002\u00ce\u03e5\u0003\u0002\u0002\u0002\u00d0\u03e7\u0003",
    "\u0002\u0002\u0002\u00d2\u03f0\u0003\u0002\u0002\u0002\u00d4\u03f2\u0003",
    "\u0002\u0002\u0002\u00d6\u03f6\u0003\u0002\u0002\u0002\u00d8\u0408\u0003",
    "\u0002\u0002\u0002\u00da\u040c\u0003\u0002\u0002\u0002\u00dc\u040e\u0003",
    "\u0002\u0002\u0002\u00de\u0412\u0003\u0002\u0002\u0002\u00e0\u0415\u0003",
    "\u0002\u0002\u0002\u00e2\u0419\u0003\u0002\u0002\u0002\u00e4\u041e\u0003",
    "\u0002\u0002\u0002\u00e6\u0428\u0003\u0002\u0002\u0002\u00e8\u042a\u0003",
    "\u0002\u0002\u0002\u00ea\u0434\u0003\u0002\u0002\u0002\u00ec\u0436\u0003",
    "\u0002\u0002\u0002\u00ee\u043b\u0003\u0002\u0002\u0002\u00f0\u043d\u0003",
    "\u0002\u0002\u0002\u00f2\u0445\u0003\u0002\u0002\u0002\u00f4\u0448\u0003",
    "\u0002\u0002\u0002\u00f6\u044d\u0003\u0002\u0002\u0002\u00f8\u0459\u0003",
    "\u0002\u0002\u0002\u00fa\u045b\u0003\u0002\u0002\u0002\u00fc\u0466\u0003",
    "\u0002\u0002\u0002\u00fe\u0468\u0003\u0002\u0002\u0002\u0100\u0470\u0003",
    "\u0002\u0002\u0002\u0102\u0472\u0003\u0002\u0002\u0002\u0104\u0476\u0003",
    "\u0002\u0002\u0002\u0106\u047b\u0003\u0002\u0002\u0002\u0108\u0488\u0003",
    "\u0002\u0002\u0002\u010a\u048a\u0003\u0002\u0002\u0002\u010c\u0493\u0003",
    "\u0002\u0002\u0002\u010e\u0495\u0003\u0002\u0002\u0002\u0110\u0497\u0003",
    "\u0002\u0002\u0002\u0112\u049e\u0003\u0002\u0002\u0002\u0114\u04a6\u0003",
    "\u0002\u0002\u0002\u0116\u04a9\u0003\u0002\u0002\u0002\u0118\u04c0\u0003",
    "\u0002\u0002\u0002\u011a\u04c6\u0003\u0002\u0002\u0002\u011c\u04c8\u0003",
    "\u0002\u0002\u0002\u011e\u04d0\u0003\u0002\u0002\u0002\u0120\u04d3\u0003",
    "\u0002\u0002\u0002\u0122\u04dc\u0003\u0002\u0002\u0002\u0124\u04e4\u0003",
    "\u0002\u0002\u0002\u0126\u04ec\u0003\u0002\u0002\u0002\u0128\u012a\u0005",
    "\u0004\u0003\u0002\u0129\u0128\u0003\u0002\u0002\u0002\u012a\u012b\u0003",
    "\u0002\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012b\u012c\u0003",
    "\u0002\u0002\u0002\u012c\u0003\u0003\u0002\u0002\u0002\u012d\u0139\u0007",
    "j\u0002\u0002\u012e\u0135\u0007\u0015\u0002\u0002\u012f\u0130\u0007",
    "j\u0002\u0002\u0130\u0131\u0007\u0018\u0002\u0002\u0131\u0132\u0007",
    "d\u0002\u0002\u0132\u0134\u0007\u0019\u0002\u0002\u0133\u012f\u0003",
    "\u0002\u0002\u0002\u0134\u0137\u0003\u0002\u0002\u0002\u0135\u0133\u0003",
    "\u0002\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0138\u0003",
    "\u0002\u0002\u0002\u0137\u0135\u0003\u0002\u0002\u0002\u0138\u013a\u0007",
    "\u0016\u0002\u0002\u0139\u012e\u0003\u0002\u0002\u0002\u0139\u013a\u0003",
    "\u0002\u0002\u0002\u013a\u013b\u0003\u0002\u0002\u0002\u013b\u013c\u0007",
    "L\u0002\u0002\u013c\u013d\u0005\u0006\u0004\u0002\u013d\u013e\u0005",
    "\b\u0005\u0002\u013e\u013f\u0007\u0005\u0002\u0002\u013f\u0140\u0007",
    "M\u0002\u0002\u0140\u0141\u0005\n\u0006\u0002\u0141\u0142\u0007N\u0002",
    "\u0002\u0142\u0005\u0003\u0002\u0002\u0002\u0143\u0144\t\u0002\u0002",
    "\u0002\u0144\u0146\u0007I\u0002\u0002\u0145\u0143\u0003\u0002\u0002",
    "\u0002\u0145\u0146\u0003\u0002\u0002\u0002\u0146\u0007\u0003\u0002\u0002",
    "\u0002\u0147\u0148\u0007F\u0002\u0002\u0148\u014a\u0007G\u0002\u0002",
    "\u0149\u0147\u0003\u0002\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002",
    "\u014a\t\u0003\u0002\u0002\u0002\u014b\u014c\u0005\f\u0007\u0002\u014c",
    "\u014d\u0005\u0010\t\u0002\u014d\u014e\u0005 \u0011\u0002\u014e\u0150",
    "\u0003\u0002\u0002\u0002\u014f\u014b\u0003\u0002\u0002\u0002\u014f\u0150",
    "\u0003\u0002\u0002\u0002\u0150\u000b\u0003\u0002\u0002\u0002\u0151\u0152",
    "\u0007E\u0002\u0002\u0152\u0153\u0005\u000e\b\u0002\u0153\u0154\u0007",
    "C\u0002\u0002\u0154\u0159\u0003\u0002\u0002\u0002\u0155\u0156\u0007",
    "E\u0002\u0002\u0156\u0157\u0007+\u0002\u0002\u0157\u0159\u0007C\u0002",
    "\u0002\u0158\u0151\u0003\u0002\u0002\u0002\u0158\u0155\u0003\u0002\u0002",
    "\u0002\u0158\u0159\u0003\u0002\u0002\u0002\u0159\r\u0003\u0002\u0002",
    "\u0002\u015a\u015c\u0005\u001c\u000f\u0002\u015b\u015a\u0003\u0002\u0002",
    "\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u000f\u0003\u0002\u0002",
    "\u0002\u015d\u015e\u0007D\u0002\u0002\u015e\u015f\u0005\u0012\n\u0002",
    "\u015f\u0160\u0007C\u0002\u0002\u0160\u0162\u0003\u0002\u0002\u0002",
    "\u0161\u015d\u0003\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002",
    "\u0162\u0011\u0003\u0002\u0002\u0002\u0163\u0165\u0005\u0014\u000b\u0002",
    "\u0164\u0163\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002\u0002\u0002",
    "\u0165\u0013\u0003\u0002\u0002\u0002\u0166\u016a\u0005\u0016\f\u0002",
    "\u0167\u0169\u0005\u0016\f\u0002\u0168\u0167\u0003\u0002\u0002\u0002",
    "\u0169\u016c\u0003\u0002\u0002\u0002\u016a\u0168\u0003\u0002\u0002\u0002",
    "\u016a\u016b\u0003\u0002\u0002\u0002\u016b\u0015\u0003\u0002\u0002\u0002",
    "\u016c\u016a\u0003\u0002\u0002\u0002\u016d\u016e\u0005\u001c\u000f\u0002",
    "\u016e\u016f\u00075\u0002\u0002\u016f\u0170\u0005\u0018\r\u0002\u0170",
    "\u0017\u0003\u0002\u0002\u0002\u0171\u0172\u0007j\u0002\u0002\u0172",
    "\u0173\u0005\u001a\u000e\u0002\u0173\u0019\u0003\u0002\u0002\u0002\u0174",
    "\u0175\u0003\u0002\u0002\u0002\u0175\u001b\u0003\u0002\u0002\u0002\u0176",
    "\u017b\u0005\u001e\u0010\u0002\u0177\u0178\u0007\u0017\u0002\u0002\u0178",
    "\u017a\u0005\u001e\u0010\u0002\u0179\u0177\u0003\u0002\u0002\u0002\u017a",
    "\u017d\u0003\u0002\u0002\u0002\u017b\u0179\u0003\u0002\u0002\u0002\u017b",
    "\u017c\u0003\u0002\u0002\u0002\u017c\u001d\u0003\u0002\u0002\u0002\u017d",
    "\u017b\u0003\u0002\u0002\u0002\u017e\u0181\u0007j\u0002\u0002\u017f",
    "\u0180\u0007\u0015\u0002\u0002\u0180\u0182\u0007\u0016\u0002\u0002\u0181",
    "\u017f\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182",
    "\u001f\u0003\u0002\u0002\u0002\u0183\u0187\u0005\"\u0012\u0002\u0184",
    "\u0186\u0005\"\u0012\u0002\u0185\u0184\u0003\u0002\u0002\u0002\u0186",
    "\u0189\u0003\u0002\u0002\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0187",
    "\u0188\u0003\u0002\u0002\u0002\u0188!\u0003\u0002\u0002\u0002\u0189",
    "\u0187\u0003\u0002\u0002\u0002\u018a\u018f\u0007j\u0002\u0002\u018b",
    "\u0190\u0005\u00a8U\u0002\u018c\u0190\u0005\u00a6T\u0002\u018d\u0190",
    "\u0005@!\u0002\u018e\u0190\u0005J&\u0002\u018f\u018b\u0003\u0002\u0002",
    "\u0002\u018f\u018c\u0003\u0002\u0002\u0002\u018f\u018d\u0003\u0002\u0002",
    "\u0002\u018f\u018e\u0003\u0002\u0002\u0002\u0190#\u0003\u0002\u0002",
    "\u0002\u0191\u0192\u0007$\u0002\u0002\u0192\u0197\u0007\u0015\u0002",
    "\u0002\u0193\u0194\u0005&\u0014\u0002\u0194\u0195\u0005(\u0015\u0002",
    "\u0195\u0198\u0003\u0002\u0002\u0002\u0196\u0198\u0005*\u0016\u0002",
    "\u0197\u0193\u0003\u0002\u0002\u0002\u0197\u0196\u0003\u0002\u0002\u0002",
    "\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002\u0002\u0002",
    "\u0199\u019a\u0007\u0016\u0002\u0002\u019a%\u0003\u0002\u0002\u0002",
    "\u019b\u019d\u0007\u000b\u0002\u0002\u019c\u019e\u0005\u010a\u0086\u0002",
    "\u019d\u019c\u0003\u0002\u0002\u0002\u019d\u019e\u0003\u0002\u0002\u0002",
    "\u019e\'\u0003\u0002\u0002\u0002\u019f\u01a0\u0007\u0017\u0002\u0002",
    "\u01a0\u01a2\u0007\u000b\u0002\u0002\u01a1\u019f\u0003\u0002\u0002\u0002",
    "\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2)\u0003\u0002\u0002\u0002",
    "\u01a3\u01ad\u0005,\u0017\u0002\u01a4\u01a5\u0007\u0017\u0002\u0002",
    "\u01a5\u01a6\u0005&\u0014\u0002\u01a6\u01ab\u00052\u001a\u0002\u01a7",
    "\u01ac\u0005(\u0015\u0002\u01a8\u01a9\u0007c\u0002\u0002\u01a9\u01aa",
    "\u0007\u0017\u0002\u0002\u01aa\u01ac\u0005,\u0017\u0002\u01ab\u01a7",
    "\u0003\u0002\u0002\u0002\u01ab\u01a8\u0003\u0002\u0002\u0002\u01ac\u01ae",
    "\u0003\u0002\u0002\u0002\u01ad\u01a4\u0003\u0002\u0002\u0002\u01ad\u01ae",
    "\u0003\u0002\u0002\u0002\u01ae\u01b8\u0003\u0002\u0002\u0002\u01af\u01b0",
    "\u0005&\u0014\u0002\u01b0\u01b5\u00052\u001a\u0002\u01b1\u01b6\u0005",
    "(\u0015\u0002\u01b2\u01b3\u0007c\u0002\u0002\u01b3\u01b4\u0007\u0017",
    "\u0002\u0002\u01b4\u01b6\u0005,\u0017\u0002\u01b5\u01b1\u0003\u0002",
    "\u0002\u0002\u01b5\u01b2\u0003\u0002\u0002\u0002\u01b6\u01b8\u0003\u0002",
    "\u0002\u0002\u01b7\u01a3\u0003\u0002\u0002\u0002\u01b7\u01af\u0003\u0002",
    "\u0002\u0002\u01b8+\u0003\u0002\u0002\u0002\u01b9\u01ba\u0005.\u0018",
    "\u0002\u01ba-\u0003\u0002\u0002\u0002\u01bb\u01c0\u00050\u0019\u0002",
    "\u01bc\u01bd\u0007\u0017\u0002\u0002\u01bd\u01bf\u00050\u0019\u0002",
    "\u01be\u01bc\u0003\u0002\u0002\u0002\u01bf\u01c2\u0003\u0002\u0002\u0002",
    "\u01c0\u01be\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002",
    "\u01c1/\u0003\u0002\u0002\u0002\u01c2\u01c0\u0003\u0002\u0002\u0002",
    "\u01c3\u01c7\u0005\u00f2z\u0002\u01c4\u01c8\u0007%\u0002\u0002\u01c5",
    "\u01c6\u0007&\u0002\u0002\u01c6\u01c8\u0005\u00d0i\u0002\u01c7\u01c4",
    "\u0003\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002\u0002\u01c7\u01c8",
    "\u0003\u0002\u0002\u0002\u01c8\u01cd\u0003\u0002\u0002\u0002\u01c9\u01ca",
    "\u0007\'\u0002\u0002\u01ca\u01cb\u0007(\u0002\u0002\u01cb\u01cd\u0005",
    "\u00aaV\u0002\u01cc\u01c3\u0003\u0002\u0002\u0002\u01cc\u01c9\u0003",
    "\u0002\u0002\u0002\u01cd1\u0003\u0002\u0002\u0002\u01ce\u01cf\u0007",
    "\u0017\u0002\u0002\u01cf\u01d1\u00054\u001b\u0002\u01d0\u01ce\u0003",
    "\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d13\u0003",
    "\u0002\u0002\u0002\u01d2\u01d7\u00056\u001c\u0002\u01d3\u01d4\u0007",
    "\u0017\u0002\u0002\u01d4\u01d6\u00056\u001c\u0002\u01d5\u01d3\u0003",
    "\u0002\u0002\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002\u01d7\u01d5\u0003",
    "\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d85\u0003",
    "\u0002\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01da\u01dd\u0005",
    "0\u0019\u0002\u01db\u01dd\u00058\u001d\u0002\u01dc\u01da\u0003\u0002",
    "\u0002\u0002\u01dc\u01db\u0003\u0002\u0002\u0002\u01dd7\u0003\u0002",
    "\u0002\u0002\u01de\u01df\u0007O\u0002\u0002\u01df\u01e0\u0005:\u001e",
    "\u0002\u01e0\u01e1\u0005.\u0018\u0002\u01e1\u01e2\u0007P\u0002\u0002",
    "\u01e29\u0003\u0002\u0002\u0002\u01e3\u01e4\u0007d\u0002\u0002\u01e4",
    "\u01e6\u0007Q\u0002\u0002\u01e5\u01e3\u0003\u0002\u0002\u0002\u01e5",
    "\u01e6\u0003\u0002\u0002\u0002\u01e6;\u0003\u0002\u0002\u0002\u01e7",
    "\u01ef\u0007$\u0002\u0002\u01e8\u01eb\u0007\u0018\u0002\u0002\u01e9",
    "\u01ec\u0005\u00b8]\u0002\u01ea\u01ec\u0005> \u0002\u01eb\u01e9\u0003",
    "\u0002\u0002\u0002\u01eb\u01ea\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003",
    "\u0002\u0002\u0002\u01ed\u01ee\u0007\u0019\u0002\u0002\u01ee\u01f0\u0003",
    "\u0002\u0002\u0002\u01ef\u01e8\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003",
    "\u0002\u0002\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1\u01f4\u0007",
    "(\u0002\u0002\u01f2\u01f5\u0005\u00aaV\u0002\u01f3\u01f5\u0005\u00f2",
    "z\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f4\u01f3\u0003\u0002",
    "\u0002\u0002\u01f5=\u0003\u0002\u0002\u0002\u01f6\u01f7\u00074\u0002",
    "\u0002\u01f7\u01f8\u0005\u00b8]\u0002\u01f8?\u0003\u0002\u0002\u0002",
    "\u01f9\u01fa\u0005B\"\u0002\u01fa\u01fe\u0007\u0005\u0002\u0002\u01fb",
    "\u01ff\u0005\u00aaV\u0002\u01fc\u01ff\u0005\u00d0i\u0002\u01fd\u01ff",
    "\u0005\u0080A\u0002\u01fe\u01fb\u0003\u0002\u0002\u0002\u01fe\u01fc",
    "\u0003\u0002\u0002\u0002\u01fe\u01fd\u0003\u0002\u0002\u0002\u01ff\u0208",
    "\u0003\u0002\u0002\u0002\u0200\u0201\u0005N(\u0002\u0201\u0205\u0007",
    "\u0005\u0002\u0002\u0202\u0206\u0005t;\u0002\u0203\u0206\u0005L\'\u0002",
    "\u0204\u0206\u0005z>\u0002\u0205\u0202\u0003\u0002\u0002\u0002\u0205",
    "\u0203\u0003\u0002\u0002\u0002\u0205\u0204\u0003\u0002\u0002\u0002\u0206",
    "\u0208\u0003\u0002\u0002\u0002\u0207\u01f9\u0003\u0002\u0002\u0002\u0207",
    "\u0200\u0003\u0002\u0002\u0002\u0208A\u0003\u0002\u0002\u0002\u0209",
    "\u020a\u0007\u0015\u0002\u0002\u020a\u020f\u0005D#\u0002\u020b\u020c",
    "\u0007\u0017\u0002\u0002\u020c\u020e\u0005D#\u0002\u020d\u020b\u0003",
    "\u0002\u0002\u0002\u020e\u0211\u0003\u0002\u0002\u0002\u020f\u020d\u0003",
    "\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210\u0212\u0003",
    "\u0002\u0002\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0212\u0213\u0007",
    "\u0016\u0002\u0002\u0213C\u0003\u0002\u0002\u0002\u0214\u0215\u0005",
    "F$\u0002\u0215\u0216\u0007Q\u0002\u0002\u0216\u0218\u0003\u0002\u0002",
    "\u0002\u0217\u0214\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002",
    "\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021a\u0007j\u0002",
    "\u0002\u021aE\u0003\u0002\u0002\u0002\u021b\u021e\u0005H%\u0002\u021c",
    "\u021e\u0007j\u0002\u0002\u021d\u021b\u0003\u0002\u0002\u0002\u021d",
    "\u021c\u0003\u0002\u0002\u0002\u021eG\u0003\u0002\u0002\u0002\u021f",
    "\u0222\u0005\u00aaV\u0002\u0220\u0222\u0005N(\u0002\u0221\u021f\u0003",
    "\u0002\u0002\u0002\u0221\u0220\u0003\u0002\u0002\u0002\u0222I\u0003",
    "\u0002\u0002\u0002\u0223\u0224\u0007\u0005\u0002\u0002\u0224\u0225\u0005",
    "L\'\u0002\u0225K\u0003\u0002\u0002\u0002\u0226\u0229\u0005N(\u0002\u0227",
    "\u0229\u0005T+\u0002\u0228\u0226\u0003\u0002\u0002\u0002\u0228\u0227",
    "\u0003\u0002\u0002\u0002\u0229M\u0003\u0002\u0002\u0002\u022a\u022b",
    "\u0007j\u0002\u0002\u022b\u022d\u0007\t\u0002\u0002\u022c\u022a\u0003",
    "\u0002\u0002\u0002\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u022e\u0003",
    "\u0002\u0002\u0002\u022e\u0232\u0007j\u0002\u0002\u022f\u0232\u0007",
    ";\u0002\u0002\u0230\u0232\u0007<\u0002\u0002\u0231\u022c\u0003\u0002",
    "\u0002\u0002\u0231\u022f\u0003\u0002\u0002\u0002\u0231\u0230\u0003\u0002",
    "\u0002\u0002\u0232O\u0003\u0002\u0002\u0002\u0233\u0234\t\u0003\u0002",
    "\u0002\u0234Q\u0003\u0002\u0002\u0002\u0235\u0236\u0007j\u0002\u0002",
    "\u0236\u0237\u0007\t\u0002\u0002\u0237\u0238\u0007j\u0002\u0002\u0238",
    "S\u0003\u0002\u0002\u0002\u0239\u023a\u0007=\u0002\u0002\u023a\u023b",
    "\u0007\u0015\u0002\u0002\u023b\u0240\u0005d3\u0002\u023c\u023d\u0007",
    "\u0017\u0002\u0002\u023d\u023f\u0005d3\u0002\u023e\u023c\u0003\u0002",
    "\u0002\u0002\u023f\u0242\u0003\u0002\u0002\u0002\u0240\u023e\u0003\u0002",
    "\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241\u0243\u0003\u0002",
    "\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0243\u0245\u0007\u0016",
    "\u0002\u0002\u0244\u0246\u0005V,\u0002\u0245\u0244\u0003\u0002\u0002",
    "\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246U\u0003\u0002\u0002",
    "\u0002\u0247\u0248\u00076\u0002\u0002\u0248\u0249\u0007?\u0002\u0002",
    "\u0249\u024a\u0005X-\u0002\u024aW\u0003\u0002\u0002\u0002\u024b\u024d",
    "\u0007\u0015\u0002\u0002\u024c\u024e\u0005Z.\u0002\u024d\u024c\u0003",
    "\u0002\u0002\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u024d\u0003",
    "\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u0251\u0003",
    "\u0002\u0002\u0002\u0251\u0252\u0007\u0016\u0002\u0002\u0252Y\u0003",
    "\u0002\u0002\u0002\u0253\u0256\u0005^0\u0002\u0254\u0256\u0005\\/\u0002",
    "\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0254\u0003\u0002\u0002\u0002",
    "\u0256[\u0003\u0002\u0002\u0002\u0257\u0259\u0007@\u0002\u0002\u0258",
    "\u025a\u0005Z.\u0002\u0259\u0258\u0003\u0002\u0002\u0002\u025a\u025b",
    "\u0003\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002\u0002\u025b\u025c",
    "\u0003\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d\u025e",
    "\u0007A\u0002\u0002\u025e]\u0003\u0002\u0002\u0002\u025f\u0262\u0005",
    "`1\u0002\u0260\u0262\u0005b2\u0002\u0261\u025f\u0003\u0002\u0002\u0002",
    "\u0261\u0260\u0003\u0002\u0002\u0002\u0262_\u0003\u0002\u0002\u0002",
    "\u0263\u0264\t\u0004\u0002\u0002\u0264a\u0003\u0002\u0002\u0002\u0265",
    "\u0266\u0007\r\u0002\u0002\u0266\u0267\u0007j\u0002\u0002\u0267c\u0003",
    "\u0002\u0002\u0002\u0268\u0269\u0007\r\u0002\u0002\u0269\u028b\u0007",
    "j\u0002\u0002\u026a\u026c\u0005h5\u0002\u026b\u026a\u0003\u0002\u0002",
    "\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u028c\u0003\u0002\u0002",
    "\u0002\u026d\u0277\u0005\u00aaV\u0002\u026e\u0270\u0005r:\u0002\u026f",
    "\u026e\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002\u0002\u0002\u0270",
    "\u0278\u0003\u0002\u0002\u0002\u0271\u0273\u0007>\u0002\u0002\u0272",
    "\u0271\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273",
    "\u0275\u0003\u0002\u0002\u0002\u0274\u0276\u0005l7\u0002\u0275\u0274",
    "\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002\u0002\u0002\u0276\u0278",
    "\u0003\u0002\u0002\u0002\u0277\u026f\u0003\u0002\u0002\u0002\u0277\u0272",
    "\u0003\u0002\u0002\u0002\u0278\u028c\u0003\u0002\u0002\u0002\u0279\u0280",
    "\u0005~@\u0002\u027a\u0281\u0007%\u0002\u0002\u027b\u027e\u0007&\u0002",
    "\u0002\u027c\u027f\u0005\u0080A\u0002\u027d\u027f\u0005\u00d0i\u0002",
    "\u027e\u027c\u0003\u0002\u0002\u0002\u027e\u027d\u0003\u0002\u0002\u0002",
    "\u027f\u0281\u0003\u0002\u0002\u0002\u0280\u027a\u0003\u0002\u0002\u0002",
    "\u0280\u027b\u0003\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002",
    "\u0281\u028c\u0003\u0002\u0002\u0002\u0282\u0289\u0005N(\u0002\u0283",
    "\u028a\u0007%\u0002\u0002\u0284\u0287\u0007&\u0002\u0002\u0285\u0288",
    "\u0005z>\u0002\u0286\u0288\u0005t;\u0002\u0287\u0285\u0003\u0002\u0002",
    "\u0002\u0287\u0286\u0003\u0002\u0002\u0002\u0288\u028a\u0003\u0002\u0002",
    "\u0002\u0289\u0283\u0003\u0002\u0002\u0002\u0289\u0284\u0003\u0002\u0002",
    "\u0002\u0289\u028a\u0003\u0002\u0002\u0002\u028a\u028c\u0003\u0002\u0002",
    "\u0002\u028b\u026b\u0003\u0002\u0002\u0002\u028b\u026d\u0003\u0002\u0002",
    "\u0002\u028b\u0279\u0003\u0002\u0002\u0002\u028b\u0282\u0003\u0002\u0002",
    "\u0002\u028ce\u0003\u0002\u0002\u0002\u028d\u028e\u0007\r\u0002\u0002",
    "\u028e\u0290\u0007j\u0002\u0002\u028f\u0291\u0005h5\u0002\u0290\u028f",
    "\u0003\u0002\u0002\u0002\u0290\u0291\u0003\u0002\u0002\u0002\u0291g",
    "\u0003\u0002\u0002\u0002\u0292\u0296\u0007%\u0002\u0002\u0293\u0294",
    "\u0007&\u0002\u0002\u0294\u0296\u0005\u00aaV\u0002\u0295\u0292\u0003",
    "\u0002\u0002\u0002\u0295\u0293\u0003\u0002\u0002\u0002\u0296i\u0003",
    "\u0002\u0002\u0002\u0297\u0298\u0007\r\u0002\u0002\u0298\u0299\u0007",
    "j\u0002\u0002\u0299\u029b\u0005\u00aaV\u0002\u029a\u029c\u0007>\u0002",
    "\u0002\u029b\u029a\u0003\u0002\u0002\u0002\u029b\u029c\u0003\u0002\u0002",
    "\u0002\u029c\u029e\u0003\u0002\u0002\u0002\u029d\u029f\u0005l7\u0002",
    "\u029e\u029d\u0003\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002",
    "\u029fk\u0003\u0002\u0002\u0002\u02a0\u02a4\u0007%\u0002\u0002\u02a1",
    "\u02a2\u0007&\u0002\u0002\u02a2\u02a4\u0005\u00d0i\u0002\u02a3\u02a0",
    "\u0003\u0002\u0002\u0002\u02a3\u02a1\u0003\u0002\u0002\u0002\u02a4m",
    "\u0003\u0002\u0002\u0002\u02a5\u02a6\u0007\r\u0002\u0002\u02a6\u02a7",
    "\u0007j\u0002\u0002\u02a7\u02a9\u0005~@\u0002\u02a8\u02aa\u0005l7\u0002",
    "\u02a9\u02a8\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003\u0002\u0002\u0002",
    "\u02aao\u0003\u0002\u0002\u0002\u02ab\u02ac\u0007\r\u0002\u0002\u02ac",
    "\u02ad\u0007j\u0002\u0002\u02ad\u02af\u0005\u00aaV\u0002\u02ae\u02b0",
    "\u0005r:\u0002\u02af\u02ae\u0003\u0002\u0002\u0002\u02af\u02b0\u0003",
    "\u0002\u0002\u0002\u02b0q\u0003\u0002\u0002\u0002\u02b1\u02b5\u0007",
    "%\u0002\u0002\u02b2\u02b3\u0007&\u0002\u0002\u02b3\u02b5\u0005\u0080",
    "A\u0002\u02b4\u02b1\u0003\u0002\u0002\u0002\u02b4\u02b2\u0003\u0002",
    "\u0002\u0002\u02b5s\u0003\u0002\u0002\u0002\u02b6\u02b9\u0005x=\u0002",
    "\u02b7\u02b9\u0005v<\u0002\u02b8\u02b6\u0003\u0002\u0002\u0002\u02b8",
    "\u02b7\u0003\u0002\u0002\u0002\u02b9u\u0003\u0002\u0002\u0002\u02ba",
    "\u02bb\u0005x=\u0002\u02bb\u02bc\u0005\u0106\u0084\u0002\u02bcw\u0003",
    "\u0002\u0002\u0002\u02bd\u02bf\u0007j\u0002\u0002\u02be\u02c0\u0007",
    "\t\u0002\u0002\u02bf\u02be\u0003\u0002\u0002\u0002\u02bf\u02c0\u0003",
    "\u0002\u0002\u0002\u02c0y\u0003\u0002\u0002\u0002\u02c1\u02c2\u0007",
    "\u0015\u0002\u0002\u02c2\u02c3\u0005|?\u0002\u02c3\u02c4\u0007\u0016",
    "\u0002\u0002\u02c4{\u0003\u0002\u0002\u0002\u02c5\u02cc\u0005\u0084",
    "C\u0002\u02c6\u02c7\u0007\u0017\u0002\u0002\u02c7\u02ca\u0007\u000b",
    "\u0002\u0002\u02c8\u02c9\u0007\u0017\u0002\u0002\u02c9\u02cb\u0005\u0086",
    "D\u0002\u02ca\u02c8\u0003\u0002\u0002\u0002\u02ca\u02cb\u0003\u0002",
    "\u0002\u0002\u02cb\u02cd\u0003\u0002\u0002\u0002\u02cc\u02c6\u0003\u0002",
    "\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd\u02d4\u0003\u0002",
    "\u0002\u0002\u02ce\u02d1\u0007\u000b\u0002\u0002\u02cf\u02d0\u0007\u0017",
    "\u0002\u0002\u02d0\u02d2\u0005\u0086D\u0002\u02d1\u02cf\u0003\u0002",
    "\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u02d4\u0003\u0002",
    "\u0002\u0002\u02d3\u02c5\u0003\u0002\u0002\u0002\u02d3\u02ce\u0003\u0002",
    "\u0002\u0002\u02d4}\u0003\u0002\u0002\u0002\u02d5\u02d6\u0007\r\u0002",
    "\u0002\u02d6\u02d7\u0007j\u0002\u0002\u02d7\u02dd\u0003\u0002\u0002",
    "\u0002\u02d8\u02d9\u0007\r\u0002\u0002\u02d9\u02da\u0007j\u0002\u0002",
    "\u02da\u02dc\u0007\t\u0002\u0002\u02db\u02d8\u0003\u0002\u0002\u0002",
    "\u02dc\u02df\u0003\u0002\u0002\u0002\u02dd\u02db\u0003\u0002\u0002\u0002",
    "\u02dd\u02de\u0003\u0002\u0002\u0002\u02de\u007f\u0003\u0002\u0002\u0002",
    "\u02df\u02dd\u0003\u0002\u0002\u0002\u02e0\u02e1\u0007\u0015\u0002\u0002",
    "\u02e1\u02e2\u0005\u0082B\u0002\u02e2\u02e3\u0007\u0016\u0002\u0002",
    "\u02e3\u0081\u0003\u0002\u0002\u0002\u02e4\u02eb\u0005\u0084C\u0002",
    "\u02e5\u02e6\u0007\u0017\u0002\u0002\u02e6\u02e9\u0007\u000b\u0002\u0002",
    "\u02e7\u02e8\u0007\u0017\u0002\u0002\u02e8\u02ea\u0005\u0086D\u0002",
    "\u02e9\u02e7\u0003\u0002\u0002\u0002\u02e9\u02ea\u0003\u0002\u0002\u0002",
    "\u02ea\u02ec\u0003\u0002\u0002\u0002\u02eb\u02e5\u0003\u0002\u0002\u0002",
    "\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u0083\u0003\u0002\u0002\u0002",
    "\u02ed\u02ee\u0005\u0088E\u0002\u02ee\u0085\u0003\u0002\u0002\u0002",
    "\u02ef\u02f0\u0005\u0088E\u0002\u02f0\u0087\u0003\u0002\u0002\u0002",
    "\u02f1\u02f5\u0005\u008aF\u0002\u02f2\u02f3\u0007+\u0002\u0002\u02f3",
    "\u02f5\u0005\u008cG\u0002\u02f4\u02f1\u0003\u0002\u0002\u0002\u02f4",
    "\u02f2\u0003\u0002\u0002\u0002\u02f5\u0089\u0003\u0002\u0002\u0002\u02f6",
    "\u02fc\u0005\u008eH\u0002\u02f7\u02f8\u0005\u0090I\u0002\u02f8\u02f9",
    "\u0005\u008eH\u0002\u02f9\u02fb\u0003\u0002\u0002\u0002\u02fa\u02f7",
    "\u0003\u0002\u0002\u0002\u02fb\u02fe\u0003\u0002\u0002\u0002\u02fc\u02fa",
    "\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002\u0002\u0002\u02fd\u008b",
    "\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02ff\u0300",
    "\u0007,\u0002\u0002\u0300\u0301\u0005\u0094K\u0002\u0301\u008d\u0003",
    "\u0002\u0002\u0002\u0302\u0308\u0005\u0098M\u0002\u0303\u0304\u0005",
    "\u0092J\u0002\u0304\u0305\u0005\u0098M\u0002\u0305\u0307\u0003\u0002",
    "\u0002\u0002\u0306\u0303\u0003\u0002\u0002\u0002\u0307\u030a\u0003\u0002",
    "\u0002\u0002\u0308\u0306\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002",
    "\u0002\u0002\u0309\u008f\u0003\u0002\u0002\u0002\u030a\u0308\u0003\u0002",
    "\u0002\u0002\u030b\u030c\t\u0005\u0002\u0002\u030c\u0091\u0003\u0002",
    "\u0002\u0002\u030d\u030e\t\u0006\u0002\u0002\u030e\u0093\u0003\u0002",
    "\u0002\u0002\u030f\u0310\u0005\u009aN\u0002\u0310\u0095\u0003\u0002",
    "\u0002\u0002\u0311\u0314\u0005t;\u0002\u0312\u0314\u0005x=\u0002\u0313",
    "\u0311\u0003\u0002\u0002\u0002\u0313\u0312\u0003\u0002\u0002\u0002\u0314",
    "\u0097\u0003\u0002\u0002\u0002\u0315\u0317\u0005\u0094K\u0002\u0316",
    "\u0318\u0005\u008cG\u0002\u0317\u0316\u0003\u0002\u0002\u0002\u0317",
    "\u0318\u0003\u0002\u0002\u0002\u0318\u0099\u0003\u0002\u0002\u0002\u0319",
    "\u031c\u0005\u00d0i\u0002\u031a\u031c\u00072\u0002\u0002\u031b\u0319",
    "\u0003\u0002\u0002\u0002\u031b\u031a\u0003\u0002\u0002\u0002\u031c\u031e",
    "\u0003\u0002\u0002\u0002\u031d\u031f\u0007\u000e\u0002\u0002\u031e\u031d",
    "\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f\u0320",
    "\u0003\u0002\u0002\u0002\u0320\u0322\u0007\n\u0002\u0002\u0321\u0323",
    "\u0007\u000e\u0002\u0002\u0322\u0321\u0003\u0002\u0002\u0002\u0322\u0323",
    "\u0003\u0002\u0002\u0002\u0323\u0326\u0003\u0002\u0002\u0002\u0324\u0327",
    "\u0005\u00d0i\u0002\u0325\u0327\u00073\u0002\u0002\u0326\u0324\u0003",
    "\u0002\u0002\u0002\u0326\u0325\u0003\u0002\u0002\u0002\u0327\u032d\u0003",
    "\u0002\u0002\u0002\u0328\u032d\u0005> \u0002\u0329\u032a\u0007:\u0002",
    "\u0002\u032a\u032d\u0005\u00d0i\u0002\u032b\u032d\u0005\u00d0i\u0002",
    "\u032c\u031b\u0003\u0002\u0002\u0002\u032c\u0328\u0003\u0002\u0002\u0002",
    "\u032c\u0329\u0003\u0002\u0002\u0002\u032c\u032b\u0003\u0002\u0002\u0002",
    "\u032d\u009b\u0003\u0002\u0002\u0002\u032e\u032f\u0007\r\u0002\u0002",
    "\u032f\u0330\u0007j\u0002\u0002\u0330\u0332\u0005~@\u0002\u0331\u0333",
    "\u0005r:\u0002\u0332\u0331\u0003\u0002\u0002\u0002\u0332\u0333\u0003",
    "\u0002\u0002\u0002\u0333\u009d\u0003\u0002\u0002\u0002\u0334\u0335\u0007",
    "\r\u0002\u0002\u0335\u0336\u0007j\u0002\u0002\u0336\u0338\u0005N(\u0002",
    "\u0337\u0339\u0005\u00a0Q\u0002\u0338\u0337\u0003\u0002\u0002\u0002",
    "\u0338\u0339\u0003\u0002\u0002\u0002\u0339\u009f\u0003\u0002\u0002\u0002",
    "\u033a\u033e\u0007%\u0002\u0002\u033b\u033c\u0007&\u0002\u0002\u033c",
    "\u033e\u0005t;\u0002\u033d\u033a\u0003\u0002\u0002\u0002\u033d\u033b",
    "\u0003\u0002\u0002\u0002\u033e\u00a1\u0003\u0002\u0002\u0002\u033f\u0340",
    "\u0007\r\u0002\u0002\u0340\u0341\u0007j\u0002\u0002\u0341\u0343\u0005",
    "N(\u0002\u0342\u0344\u0005\u00a4S\u0002\u0343\u0342\u0003\u0002\u0002",
    "\u0002\u0343\u0344\u0003\u0002\u0002\u0002\u0344\u00a3\u0003\u0002\u0002",
    "\u0002\u0345\u0349\u0007%\u0002\u0002\u0346\u0347\u0007&\u0002\u0002",
    "\u0347\u0349\u0005z>\u0002\u0348\u0345\u0003\u0002\u0002\u0002\u0348",
    "\u0346\u0003\u0002\u0002\u0002\u0349\u00a5\u0003\u0002\u0002\u0002\u034a",
    "\u034b\u0007\u0005\u0002\u0002\u034b\u034c\u0005\u00aaV\u0002\u034c",
    "\u00a7\u0003\u0002\u0002\u0002\u034d\u034e\u0005\u00aaV\u0002\u034e",
    "\u034f\u0007\u0005\u0002\u0002\u034f\u0350\u0005\u00d0i\u0002\u0350",
    "\u00a9\u0003\u0002\u0002\u0002\u0351\u0354\u0005\u00acW\u0002\u0352",
    "\u0354\u0005\u00b4[\u0002\u0353\u0351\u0003\u0002\u0002\u0002\u0353",
    "\u0352\u0003\u0002\u0002\u0002\u0354\u0358\u0003\u0002\u0002\u0002\u0355",
    "\u0357\u0005\u00b8]\u0002\u0356\u0355\u0003\u0002\u0002\u0002\u0357",
    "\u035a\u0003\u0002\u0002\u0002\u0358\u0356\u0003\u0002\u0002\u0002\u0358",
    "\u0359\u0003\u0002\u0002\u0002\u0359\u00ab\u0003\u0002\u0002\u0002\u035a",
    "\u0358\u0003\u0002\u0002\u0002\u035b\u0369\u0005\u011e\u0090\u0002\u035c",
    "\u0369\u0005\u0120\u0091\u0002\u035d\u0369\u0005\u00e2r\u0002\u035e",
    "\u0369\u0005\u00f4{\u0002\u035f\u0369\u0005\u0110\u0089\u0002\u0360",
    "\u0369\u0005$\u0013\u0002\u0361\u0369\u0005<\u001f\u0002\u0362\u0369",
    "\u0005\u00b0Y\u0002\u0363\u0369\u0005\u00b2Z\u0002\u0364\u0369\u0005",
    "\u0114\u008b\u0002\u0365\u0369\u0005\u00aeX\u0002\u0366\u0369\u0007",
    "\u0006\u0002\u0002\u0367\u0369\u0007#\u0002\u0002\u0368\u035b\u0003",
    "\u0002\u0002\u0002\u0368\u035c\u0003\u0002\u0002\u0002\u0368\u035d\u0003",
    "\u0002\u0002\u0002\u0368\u035e\u0003\u0002\u0002\u0002\u0368\u035f\u0003",
    "\u0002\u0002\u0002\u0368\u0360\u0003\u0002\u0002\u0002\u0368\u0361\u0003",
    "\u0002\u0002\u0002\u0368\u0362\u0003\u0002\u0002\u0002\u0368\u0363\u0003",
    "\u0002\u0002\u0002\u0368\u0364\u0003\u0002\u0002\u0002\u0368\u0365\u0003",
    "\u0002\u0002\u0002\u0368\u0366\u0003\u0002\u0002\u0002\u0368\u0367\u0003",
    "\u0002\u0002\u0002\u0369\u00ad\u0003\u0002\u0002\u0002\u036a\u036b\u0005",
    "N(\u0002\u036b\u036c\u0007\t\u0002\u0002\u036c\u036d\u0005~@\u0002\u036d",
    "\u00af\u0003\u0002\u0002\u0002\u036e\u036f\u0007)\u0002\u0002\u036f",
    "\u0374\u0007\u0015\u0002\u0002\u0370\u0371\u0005&\u0014\u0002\u0371",
    "\u0372\u0005(\u0015\u0002\u0372\u0375\u0003\u0002\u0002\u0002\u0373",
    "\u0375\u0005*\u0016\u0002\u0374\u0370\u0003\u0002\u0002\u0002\u0374",
    "\u0373\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002\u0002\u0002\u0375",
    "\u0376\u0003\u0002\u0002\u0002\u0376\u0377\u0007\u0016\u0002\u0002\u0377",
    "\u00b1\u0003\u0002\u0002\u0002\u0378\u037b\u0007)\u0002\u0002\u0379",
    "\u037c\u0005\u00b8]\u0002\u037a\u037c\u0005> \u0002\u037b\u0379\u0003",
    "\u0002\u0002\u0002\u037b\u037a\u0003\u0002\u0002\u0002\u037b\u037c\u0003",
    "\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002\u0002\u037d\u0380\u0007",
    "(\u0002\u0002\u037e\u0381\u0005\u00aaV\u0002\u037f\u0381\u0005\u00f2",
    "z\u0002\u0380\u037e\u0003\u0002\u0002\u0002\u0380\u037f\u0003\u0002",
    "\u0002\u0002\u0381\u00b3\u0003\u0002\u0002\u0002\u0382\u0383\u0005\u00b6",
    "\\\u0002\u0383\u00b5\u0003\u0002\u0002\u0002\u0384\u0387\u0007j\u0002",
    "\u0002\u0385\u0386\u0007\t\u0002\u0002\u0386\u0388\u0007j\u0002\u0002",
    "\u0387\u0385\u0003\u0002\u0002\u0002\u0387\u0388\u0003\u0002\u0002\u0002",
    "\u0388\u038a\u0003\u0002\u0002\u0002\u0389\u038b\u0005\u0106\u0084\u0002",
    "\u038a\u0389\u0003\u0002\u0002\u0002\u038a\u038b\u0003\u0002\u0002\u0002",
    "\u038b\u00b7\u0003\u0002\u0002\u0002\u038c\u038d\u0007\u0018\u0002\u0002",
    "\u038d\u038f\u0005\u00ba^\u0002\u038e\u0390\u0005\u010a\u0086\u0002",
    "\u038f\u038e\u0003\u0002\u0002\u0002\u038f\u0390\u0003\u0002\u0002\u0002",
    "\u0390\u0391\u0003\u0002\u0002\u0002\u0391\u0392\u0007\u0019\u0002\u0002",
    "\u0392\u00b9\u0003\u0002\u0002\u0002\u0393\u0396\u0005\u00be`\u0002",
    "\u0394\u0396\u0005\u00ceh\u0002\u0395\u0393\u0003\u0002\u0002\u0002",
    "\u0395\u0394\u0003\u0002\u0002\u0002\u0396\u00bb\u0003\u0002\u0002\u0002",
    "\u0397\u0398\u0007]\u0002\u0002\u0398\u0399\u0007^\u0002\u0002\u0399",
    "\u039a\u0007\u0015\u0002\u0002\u039a\u039f\u0005\u00c0a\u0002\u039b",
    "\u039c\u0007\u0017\u0002\u0002\u039c\u039e\u0005\u00c0a\u0002\u039d",
    "\u039b\u0003\u0002\u0002\u0002\u039e\u03a1\u0003\u0002\u0002\u0002\u039f",
    "\u039d\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0",
    "\u03a2\u0003\u0002\u0002\u0002\u03a1\u039f\u0003\u0002\u0002\u0002\u03a2",
    "\u03a3\u0007\u0016\u0002\u0002\u03a3\u00bd\u0003\u0002\u0002\u0002\u03a4",
    "\u03a8\u0005\u00bc_\u0002\u03a5\u03a8\u0005\u00c2b\u0002\u03a6\u03a8",
    "\u0005\u00c6d\u0002\u03a7\u03a4\u0003\u0002\u0002\u0002\u03a7\u03a5",
    "\u0003\u0002\u0002\u0002\u03a7\u03a6\u0003\u0002\u0002\u0002\u03a8\u00bf",
    "\u0003\u0002\u0002\u0002\u03a9\u03af\u0005H%\u0002\u03aa\u03ab\u0007",
    "Q\u0002\u0002\u03ab\u03b0\u0005\u00d0i\u0002\u03ac\u03b0\u0005\u0080",
    "A\u0002\u03ad\u03b0\u0005t;\u0002\u03ae\u03b0\u0005z>\u0002\u03af\u03aa",
    "\u0003\u0002\u0002\u0002\u03af\u03ac\u0003\u0002\u0002\u0002\u03af\u03ad",
    "\u0003\u0002\u0002\u0002\u03af\u03ae\u0003\u0002\u0002\u0002\u03af\u03b0",
    "\u0003\u0002\u0002\u0002\u03b0\u00c1\u0003\u0002\u0002\u0002\u03b1\u03b2",
    "\u0005\u0116\u008c\u0002\u03b2\u00c3\u0003\u0002\u0002\u0002\u03b3\u03b4",
    "\u0005z>\u0002\u03b4\u00c5\u0003\u0002\u0002\u0002\u03b5\u03b6\u0007",
    "!\u0002\u0002\u03b6\u03c7\u0005\u00aaV\u0002\u03b7\u03b8\u0007`\u0002",
    "\u0002\u03b8\u03b9\u0007^\u0002\u0002\u03b9\u03c7\u0005\u00d0i\u0002",
    "\u03ba\u03bb\u0007!\u0002\u0002\u03bb\u03bc\u0005\u00aaV\u0002\u03bc",
    "\u03bd\u0007`\u0002\u0002\u03bd\u03be\u0007^\u0002\u0002\u03be\u03bf",
    "\u0005\u00d0i\u0002\u03bf\u03c7\u0003\u0002\u0002\u0002\u03c0\u03c1",
    "\u00076\u0002\u0002\u03c1\u03c2\u0007\'\u0002\u0002\u03c2\u03c3\u0007",
    "\u0015\u0002\u0002\u03c3\u03c4\u0005\u00c8e\u0002\u03c4\u03c5\u0007",
    "\u0016\u0002\u0002\u03c5\u03c7\u0003\u0002\u0002\u0002\u03c6\u03b5\u0003",
    "\u0002\u0002\u0002\u03c6\u03b7\u0003\u0002\u0002\u0002\u03c6\u03ba\u0003",
    "\u0002\u0002\u0002\u03c6\u03c0\u0003\u0002\u0002\u0002\u03c7\u00c7\u0003",
    "\u0002\u0002\u0002\u03c8\u03ca\u0005\u00caf\u0002\u03c9\u03c8\u0003",
    "\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002\u03ca\u03d1\u0003",
    "\u0002\u0002\u0002\u03cb\u03cc\u0007\u0017\u0002\u0002\u03cc\u03cf\u0007",
    "\u000b\u0002\u0002\u03cd\u03ce\u0007\u0017\u0002\u0002\u03ce\u03d0\u0005",
    "\u00caf\u0002\u03cf\u03cd\u0003\u0002\u0002\u0002\u03cf\u03d0\u0003",
    "\u0002\u0002\u0002\u03d0\u03d2\u0003\u0002\u0002\u0002\u03d1\u03cb\u0003",
    "\u0002\u0002\u0002\u03d1\u03d2\u0003\u0002\u0002\u0002\u03d2\u03d9\u0003",
    "\u0002\u0002\u0002\u03d3\u03d6\u0007\u000b\u0002\u0002\u03d4\u03d5\u0007",
    "\u0017\u0002\u0002\u03d5\u03d7\u0005\u00caf\u0002\u03d6\u03d4\u0003",
    "\u0002\u0002\u0002\u03d6\u03d7\u0003\u0002\u0002\u0002\u03d7\u03d9\u0003",
    "\u0002\u0002\u0002\u03d8\u03c9\u0003\u0002\u0002\u0002\u03d8\u03d3\u0003",
    "\u0002\u0002\u0002\u03d9\u00c9\u0003\u0002\u0002\u0002\u03da\u03df\u0005",
    "\u00ccg\u0002\u03db\u03dc\u0007\u0017\u0002\u0002\u03dc\u03de\u0005",
    "\u00ccg\u0002\u03dd\u03db\u0003\u0002\u0002\u0002\u03de\u03e1\u0003",
    "\u0002\u0002\u0002\u03df\u03dd\u0003\u0002\u0002\u0002\u03df\u03e0\u0003",
    "\u0002\u0002\u0002\u03e0\u00cb\u0003\u0002\u0002\u0002\u03e1\u03df\u0003",
    "\u0002\u0002\u0002\u03e2\u03e3\u0007j\u0002\u0002\u03e3\u03e4\t\u0007",
    "\u0002\u0002\u03e4\u00cd\u0003\u0002\u0002\u0002\u03e5\u03e6\u0005\u0082",
    "B\u0002\u03e6\u00cf\u0003\u0002\u0002\u0002\u03e7\u03e8\u0005\u00d2",
    "j\u0002\u03e8\u00d1\u0003\u0002\u0002\u0002\u03e9\u03f1\u0005\u00de",
    "p\u0002\u03ea\u03f1\u0005\u00dan\u0002\u03eb\u03f1\u0005\u00dco\u0002",
    "\u03ec\u03f1\u0005\u00d4k\u0002\u03ed\u03f1\u0005\u0126\u0094\u0002",
    "\u03ee\u03f1\u0007i\u0002\u0002\u03ef\u03f1\u0007g\u0002\u0002\u03f0",
    "\u03e9\u0003\u0002\u0002\u0002\u03f0\u03ea\u0003\u0002\u0002\u0002\u03f0",
    "\u03eb\u0003\u0002\u0002\u0002\u03f0\u03ec\u0003\u0002\u0002\u0002\u03f0",
    "\u03ed\u0003\u0002\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f0",
    "\u03ef\u0003\u0002\u0002\u0002\u03f1\u00d3\u0003\u0002\u0002\u0002\u03f2",
    "\u03f3\u0007\u0015\u0002\u0002\u03f3\u03f4\u0005\u00d6l\u0002\u03f4",
    "\u03f5\u0007\u0016\u0002\u0002\u03f5\u00d5\u0003\u0002\u0002\u0002\u03f6",
    "\u03fa\u0005\u00d8m\u0002\u03f7\u03f9\u0005\u00d8m\u0002\u03f8\u03f7",
    "\u0003\u0002\u0002\u0002\u03f9\u03fc\u0003\u0002\u0002\u0002\u03fa\u03f8",
    "\u0003\u0002\u0002\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002\u03fb\u00d7",
    "\u0003\u0002\u0002\u0002\u03fc\u03fa\u0003\u0002\u0002\u0002\u03fd\u0409",
    "\u0007d\u0002\u0002\u03fe\u0405\u0007j\u0002\u0002\u03ff\u0402\u0007",
    "\u0018\u0002\u0002\u0400\u0403\u0007d\u0002\u0002\u0401\u0403\u0005",
    "\u0100\u0081\u0002\u0402\u0400\u0003\u0002\u0002\u0002\u0402\u0401\u0003",
    "\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002\u0404\u0406\u0007",
    "\u0019\u0002\u0002\u0405\u03ff\u0003\u0002\u0002\u0002\u0405\u0406\u0003",
    "\u0002\u0002\u0002\u0406\u0409\u0003\u0002\u0002\u0002\u0407\u0409\u0005",
    "\u0100\u0081\u0002\u0408\u03fd\u0003\u0002\u0002\u0002\u0408\u03fe\u0003",
    "\u0002\u0002\u0002\u0408\u0407\u0003\u0002\u0002\u0002\u0409\u00d9\u0003",
    "\u0002\u0002\u0002\u040a\u040d\u0005\u00e0q\u0002\u040b\u040d\u0007",
    "j\u0002\u0002\u040c\u040a\u0003\u0002\u0002\u0002\u040c\u040b\u0003",
    "\u0002\u0002\u0002\u040d\u00db\u0003\u0002\u0002\u0002\u040e\u040f\u0007",
    "j\u0002\u0002\u040f\u0410\u0007Q\u0002\u0002\u0410\u0411\u0005\u00d0",
    "i\u0002\u0411\u00dd\u0003\u0002\u0002\u0002\u0412\u0413\u0007j\u0002",
    "\u0002\u0413\u00df\u0003\u0002\u0002\u0002\u0414\u0416\u0007\u001a\u0002",
    "\u0002\u0415\u0414\u0003\u0002\u0002\u0002\u0415\u0416\u0003\u0002\u0002",
    "\u0002\u0416\u0417\u0003\u0002\u0002\u0002\u0417\u0418\u0007d\u0002",
    "\u0002\u0418\u00e1\u0003\u0002\u0002\u0002\u0419\u041a\u0007R\u0002",
    "\u0002\u041a\u041b\u0007\u0015\u0002\u0002\u041b\u041c\u0005\u00e4s",
    "\u0002\u041c\u041d\u0007\u0016\u0002\u0002\u041d\u00e3\u0003\u0002\u0002",
    "\u0002\u041e\u0424\u0005\u00eex\u0002\u041f\u0420\u0007\u0017\u0002",
    "\u0002\u0420\u0421\u0005&\u0014\u0002\u0421\u0422\u0005\u00e6t\u0002",
    "\u0422\u0423\u0005(\u0015\u0002\u0423\u0425\u0003\u0002\u0002\u0002",
    "\u0424\u041f\u0003\u0002\u0002\u0002\u0424\u0425\u0003\u0002\u0002\u0002",
    "\u0425\u00e5\u0003\u0002\u0002\u0002\u0426\u0427\u0007\u0017\u0002\u0002",
    "\u0427\u0429\u0005\u00e8u\u0002\u0428\u0426\u0003\u0002\u0002\u0002",
    "\u0428\u0429\u0003\u0002\u0002\u0002\u0429\u00e7\u0003\u0002\u0002\u0002",
    "\u042a\u042f\u0005\u00eav\u0002\u042b\u042c\u0007\u0017\u0002\u0002",
    "\u042c\u042e\u0005\u00eav\u0002\u042d\u042b\u0003\u0002\u0002\u0002",
    "\u042e\u0431\u0003\u0002\u0002\u0002\u042f\u042d\u0003\u0002\u0002\u0002",
    "\u042f\u0430\u0003\u0002\u0002\u0002\u0430\u00e9\u0003\u0002\u0002\u0002",
    "\u0431\u042f\u0003\u0002\u0002\u0002\u0432\u0435\u0005\u00ecw\u0002",
    "\u0433\u0435\u0005\u00f2z\u0002\u0434\u0432\u0003\u0002\u0002\u0002",
    "\u0434\u0433\u0003\u0002\u0002\u0002\u0435\u00eb\u0003\u0002\u0002\u0002",
    "\u0436\u0437\u0007O\u0002\u0002\u0437\u0438\u0005:\u001e\u0002\u0438",
    "\u0439\u0005\u00f0y\u0002\u0439\u043a\u0007P\u0002\u0002\u043a\u00ed",
    "\u0003\u0002\u0002\u0002\u043b\u043c\u0005\u00f0y\u0002\u043c\u00ef",
    "\u0003\u0002\u0002\u0002\u043d\u0442\u0005\u00f2z\u0002\u043e\u043f",
    "\u0007\u0017\u0002\u0002\u043f\u0441\u0005\u00f2z\u0002\u0440\u043e",
    "\u0003\u0002\u0002\u0002\u0441\u0444\u0003\u0002\u0002\u0002\u0442\u0440",
    "\u0003\u0002\u0002\u0002\u0442\u0443\u0003\u0002\u0002\u0002\u0443\u00f1",
    "\u0003\u0002\u0002\u0002\u0444\u0442\u0003\u0002\u0002\u0002\u0445\u0446",
    "\u0007j\u0002\u0002\u0446\u0447\u0005\u00aaV\u0002\u0447\u00f3\u0003",
    "\u0002\u0002\u0002\u0448\u0449\u0007\u001b\u0002\u0002\u0449\u044a\u0007",
    "\u0015\u0002\u0002\u044a\u044b\u0005\u00f6|\u0002\u044b\u044c\u0007",
    "\u0016\u0002\u0002\u044c\u00f5\u0003\u0002\u0002\u0002\u044d\u0457\u0005",
    "\u00f8}\u0002\u044e\u044f\u0007\u0017\u0002\u0002\u044f\u0451\u0007",
    "\u000b\u0002\u0002\u0450\u0452\u0005\u010a\u0086\u0002\u0451\u0450\u0003",
    "\u0002\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452\u0455\u0003",
    "\u0002\u0002\u0002\u0453\u0454\u0007\u0017\u0002\u0002\u0454\u0456\u0005",
    "\u010e\u0088\u0002\u0455\u0453\u0003\u0002\u0002\u0002\u0455\u0456\u0003",
    "\u0002\u0002\u0002\u0456\u0458\u0003\u0002\u0002\u0002\u0457\u044e\u0003",
    "\u0002\u0002\u0002\u0457\u0458\u0003\u0002\u0002\u0002\u0458\u00f7\u0003",
    "\u0002\u0002\u0002\u0459\u045a\u0005\u00fa~\u0002\u045a\u00f9\u0003",
    "\u0002\u0002\u0002\u045b\u0460\u0005\u00fc\u007f\u0002\u045c\u045d\u0007",
    "\u0017\u0002\u0002\u045d\u045f\u0005\u00fc\u007f\u0002\u045e\u045c\u0003",
    "\u0002\u0002\u0002\u045f\u0462\u0003\u0002\u0002\u0002\u0460\u045e\u0003",
    "\u0002\u0002\u0002\u0460\u0461\u0003\u0002\u0002\u0002\u0461\u00fb\u0003",
    "\u0002\u0002\u0002\u0462\u0460\u0003\u0002\u0002\u0002\u0463\u0467\u0007",
    "j\u0002\u0002\u0464\u0467\u0005\u00fe\u0080\u0002\u0465\u0467\u0005",
    "\u00d0i\u0002\u0466\u0463\u0003\u0002\u0002\u0002\u0466\u0464\u0003",
    "\u0002\u0002\u0002\u0466\u0465\u0003\u0002\u0002\u0002\u0467\u00fd\u0003",
    "\u0002\u0002\u0002\u0468\u0469\u0007j\u0002\u0002\u0469\u046c\u0007",
    "\u0018\u0002\u0002\u046a\u046d\u0005\u00e0q\u0002\u046b\u046d\u0005",
    "\u0100\u0081\u0002\u046c\u046a\u0003\u0002\u0002\u0002\u046c\u046b\u0003",
    "\u0002\u0002\u0002\u046d\u046e\u0003\u0002\u0002\u0002\u046e\u046f\u0007",
    "\u0019\u0002\u0002\u046f\u00ff\u0003\u0002\u0002\u0002\u0470\u0471\u0005",
    "\u0102\u0082\u0002\u0471\u0101\u0003\u0002\u0002\u0002\u0472\u0474\u0005",
    "\u0104\u0083\u0002\u0473\u0475\u0005\u0106\u0084\u0002\u0474\u0473\u0003",
    "\u0002\u0002\u0002\u0474\u0475\u0003\u0002\u0002\u0002\u0475\u0103\u0003",
    "\u0002\u0002\u0002\u0476\u0479\u0007j\u0002\u0002\u0477\u0478\u0007",
    "\t\u0002\u0002\u0478\u047a\u0007j\u0002\u0002\u0479\u0477\u0003\u0002",
    "\u0002\u0002\u0479\u047a\u0003\u0002\u0002\u0002\u047a\u0105\u0003\u0002",
    "\u0002\u0002\u047b\u047c\u0007\u0015\u0002\u0002\u047c\u0481\u0005\u0108",
    "\u0085\u0002\u047d\u047e\u0007\u0017\u0002\u0002\u047e\u0480\u0005\u0108",
    "\u0085\u0002\u047f\u047d\u0003\u0002\u0002\u0002\u0480\u0483\u0003\u0002",
    "\u0002\u0002\u0481\u047f\u0003\u0002\u0002\u0002\u0481\u0482\u0003\u0002",
    "\u0002\u0002\u0482\u0484\u0003\u0002\u0002\u0002\u0483\u0481\u0003\u0002",
    "\u0002\u0002\u0484\u0485\u0007\u0016\u0002\u0002\u0485\u0107\u0003\u0002",
    "\u0002\u0002\u0486\u0489\u0005\u00aaV\u0002\u0487\u0489\u0005\u00d0",
    "i\u0002\u0488\u0486\u0003\u0002\u0002\u0002\u0488\u0487\u0003\u0002",
    "\u0002\u0002\u0489\u0109\u0003\u0002\u0002\u0002\u048a\u048b\u0007*",
    "\u0002\u0002\u048b\u048c\u0005\u010c\u0087\u0002\u048c\u010b\u0003\u0002",
    "\u0002\u0002\u048d\u0494\u0005\u00e0q\u0002\u048e\u0494\u0005\u0100",
    "\u0081\u0002\u048f\u0490\u0005\u00aaV\u0002\u0490\u0491\u0007Q\u0002",
    "\u0002\u0491\u0492\u0005\u00d0i\u0002\u0492\u0494\u0003\u0002\u0002",
    "\u0002\u0493\u048d\u0003\u0002\u0002\u0002\u0493\u048e\u0003\u0002\u0002",
    "\u0002\u0493\u048f\u0003\u0002\u0002\u0002\u0494\u010d\u0003\u0002\u0002",
    "\u0002\u0495\u0496\u0005\u00fa~\u0002\u0496\u010f\u0003\u0002\u0002",
    "\u0002\u0497\u049c\u0007\u0014\u0002\u0002\u0498\u0499\u0007\u0015\u0002",
    "\u0002\u0499\u049a\u0005\u0112\u008a\u0002\u049a\u049b\u0007\u0016\u0002",
    "\u0002\u049b\u049d\u0003\u0002\u0002\u0002\u049c\u0498\u0003\u0002\u0002",
    "\u0002\u049c\u049d\u0003\u0002\u0002\u0002\u049d\u0111\u0003\u0002\u0002",
    "\u0002\u049e\u04a3\u0005\u00fe\u0080\u0002\u049f\u04a0\u0007\u0017\u0002",
    "\u0002\u04a0\u04a2\u0005\u00fe\u0080\u0002\u04a1\u049f\u0003\u0002\u0002",
    "\u0002\u04a2\u04a5\u0003\u0002\u0002\u0002\u04a3\u04a1\u0003\u0002\u0002",
    "\u0002\u04a3\u04a4\u0003\u0002\u0002\u0002\u04a4\u0113\u0003\u0002\u0002",
    "\u0002\u04a5\u04a3\u0003\u0002\u0002\u0002\u04a6\u04a7\u0007Y\u0002",
    "\u0002\u04a7\u04a8\u0007Z\u0002\u0002\u04a8\u0115\u0003\u0002\u0002",
    "\u0002\u04a9\u04aa\u0007\u0015\u0002\u0002\u04aa\u04ad\u0007j\u0002",
    "\u0002\u04ab\u04ac\u0007\t\u0002\u0002\u04ac\u04ae\u0007j\u0002\u0002",
    "\u04ad\u04ab\u0003\u0002\u0002\u0002\u04ad\u04ae\u0003\u0002\u0002\u0002",
    "\u04ae\u04af\u0003\u0002\u0002\u0002\u04af\u04bb\u0007\u0016\u0002\u0002",
    "\u04b0\u04b1\u0007\u0015\u0002\u0002\u04b1\u04b6\u0005\u0118\u008d\u0002",
    "\u04b2\u04b3\u0007\u0017\u0002\u0002\u04b3\u04b5\u0005\u0118\u008d\u0002",
    "\u04b4\u04b2\u0003\u0002\u0002\u0002\u04b5\u04b8\u0003\u0002\u0002\u0002",
    "\u04b6\u04b4\u0003\u0002\u0002\u0002\u04b6\u04b7\u0003\u0002\u0002\u0002",
    "\u04b7\u04b9\u0003\u0002\u0002\u0002\u04b8\u04b6\u0003\u0002\u0002\u0002",
    "\u04b9\u04ba\u0007\u0016\u0002\u0002\u04ba\u04bc\u0003\u0002\u0002\u0002",
    "\u04bb\u04b0\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002",
    "\u04bc\u0117\u0003\u0002\u0002\u0002\u04bd\u04c1\u0007\u0003\u0002\u0002",
    "\u04be\u04bf\u0007_\u0002\u0002\u04bf\u04c1\u0005\u011a\u008e\u0002",
    "\u04c0\u04bd\u0003\u0002\u0002\u0002\u04c0\u04be\u0003\u0002\u0002\u0002",
    "\u04c1\u04c2\u0003\u0002\u0002\u0002\u04c2\u04c3\u0005\u011c\u008f\u0002",
    "\u04c3\u0119\u0003\u0002\u0002\u0002\u04c4\u04c5\u0007\t\u0002\u0002",
    "\u04c5\u04c7\u0005\u011a\u008e\u0002\u04c6\u04c4\u0003\u0002\u0002\u0002",
    "\u04c6\u04c7\u0003\u0002\u0002\u0002\u04c7\u011b\u0003\u0002\u0002\u0002",
    "\u04c8\u04cd\u0007j\u0002\u0002\u04c9\u04ca\u0007\t\u0002\u0002\u04ca",
    "\u04cc\u0007j\u0002\u0002\u04cb\u04c9\u0003\u0002\u0002\u0002\u04cc",
    "\u04cf\u0003\u0002\u0002\u0002\u04cd\u04cb\u0003\u0002\u0002\u0002\u04cd",
    "\u04ce\u0003\u0002\u0002\u0002\u04ce\u011d\u0003\u0002\u0002\u0002\u04cf",
    "\u04cd\u0003\u0002\u0002\u0002\u04d0\u04d1\u0007\"\u0002\u0002\u04d1",
    "\u04d2\u0007 \u0002\u0002\u04d2\u011f\u0003\u0002\u0002\u0002\u04d3",
    "\u04d4\u0007\u001f\u0002\u0002\u04d4\u04d5\u0007 \u0002\u0002\u04d5",
    "\u04da\u0003\u0002\u0002\u0002\u04d6\u04d7\u0007\u0015\u0002\u0002\u04d7",
    "\u04d8\u0005\u0122\u0092\u0002\u04d8\u04d9\u0007\u0016\u0002\u0002\u04d9",
    "\u04db\u0003\u0002\u0002\u0002\u04da\u04d6\u0003\u0002\u0002\u0002\u04da",
    "\u04db\u0003\u0002\u0002\u0002\u04db\u0121\u0003\u0002\u0002\u0002\u04dc",
    "\u04e1\u0005\u0124\u0093\u0002\u04dd\u04de\u0007\u0017\u0002\u0002\u04de",
    "\u04e0\u0005\u0124\u0093\u0002\u04df\u04dd\u0003\u0002\u0002\u0002\u04e0",
    "\u04e3\u0003\u0002\u0002\u0002\u04e1\u04df\u0003\u0002\u0002\u0002\u04e1",
    "\u04e2\u0003\u0002\u0002\u0002\u04e2\u0123\u0003\u0002\u0002\u0002\u04e3",
    "\u04e1\u0003\u0002\u0002\u0002\u04e4\u04e5\u0007j\u0002\u0002\u04e5",
    "\u04e8\u0007\u0018\u0002\u0002\u04e6\u04e9\u0007d\u0002\u0002\u04e7",
    "\u04e9\u0005\u0100\u0081\u0002\u04e8\u04e6\u0003\u0002\u0002\u0002\u04e8",
    "\u04e7\u0003\u0002\u0002\u0002\u04e9\u04ea\u0003\u0002\u0002\u0002\u04ea",
    "\u04eb\u0007\u0019\u0002\u0002\u04eb\u0125\u0003\u0002\u0002\u0002\u04ec",
    "\u04ed\t\b\u0002\u0002\u04ed\u0127\u0003\u0002\u0002\u0002\u0092\u012b",
    "\u0135\u0139\u0145\u0149\u014f\u0158\u015b\u0161\u0164\u016a\u017b\u0181",
    "\u0187\u018f\u0197\u019d\u01a1\u01ab\u01ad\u01b5\u01b7\u01c0\u01c7\u01cc",
    "\u01d0\u01d7\u01dc\u01e5\u01eb\u01ef\u01f4\u01fe\u0205\u0207\u020f\u0217",
    "\u021d\u0221\u0228\u022c\u0231\u0240\u0245\u024f\u0255\u025b\u0261\u026b",
    "\u026f\u0272\u0275\u0277\u027e\u0280\u0287\u0289\u028b\u0290\u0295\u029b",
    "\u029e\u02a3\u02a9\u02af\u02b4\u02b8\u02bf\u02ca\u02cc\u02d1\u02d3\u02dd",
    "\u02e9\u02eb\u02f4\u02fc\u0308\u0313\u0317\u031b\u031e\u0322\u0326\u032c",
    "\u0332\u0338\u033d\u0343\u0348\u0353\u0358\u0368\u0374\u037b\u0380\u0387",
    "\u038a\u038f\u0395\u039f\u03a7\u03af\u03c6\u03c9\u03cf\u03d1\u03d6\u03d8",
    "\u03df\u03f0\u03fa\u0402\u0405\u0408\u040c\u0415\u0424\u0428\u042f\u0434",
    "\u0442\u0451\u0455\u0457\u0460\u0466\u046c\u0474\u0479\u0481\u0488\u0493",
    "\u049c\u04a3\u04ad\u04b6\u04bb\u04c0\u04c6\u04cd\u04da\u04e1\u04e8"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'@'", "'*'", "'::='", "'BOOLEAN'", "'TRUE'", 
                     "'FALSE'", "'.'", "'..'", "'...'", "'''", "'&'", "'<'", 
                     "'>'", "'</'", "'/>'", "'true'", "'false'", "'INTEGER'", 
                     "'{'", "'}'", "','", "'('", "')'", "'-'", "'ENUMERATED'", 
                     "'REAL'", "'PLUS-INFINITY'", "'MINUS-INFINITY'", "'BIT'", 
                     "'STRING'", "'CONTAINING'", "'OCTET'", "'NULL'", "'SEQUENCE'", 
                     "'OPTIONAL'", "'DEFAULT'", "'COMPONENTS'", "'OF'", 
                     "'SET'", "'!'", "'ALL'", "'EXCEPT'", "'^'", "'|'", 
                     "'UNION'", "'INTERSECTION'", "'INCLUDES'", "'MIN'", 
                     "'MAX'", "'SIZE'", "'FROM'", "'WITH'", "'COMPONENT'", 
                     "'PRESENT'", "'ABSENT'", "'PATTERN'", "'TYPE-Identifier'", 
                     "'ABSTRACT-SYNTAX'", "'CLASS'", "'UNIQUE'", "'SYNTAX'", 
                     "'['", "']'", "'INSTANCE'", "';'", "'IMPORTS'", "'EXPORTS'", 
                     "'EXTENSIBILITY'", "'IMPLIED'", "'EXPLICIT'", "'TAGS'", 
                     "'IMPLICIT'", "'AUTOMATIC'", "'DEFINITIONS'", "'BEGIN'", 
                     "'END'", "'[['", "']]'", "':'", "'CHOICE'", "'UNIVERSAL'", 
                     "'APPLICATION'", "'PRIVATE'", "'EMBEDDED'", "'PDV'", 
                     "'EXTERNAL'", "'OBJECT'", "'IDENTIFIER'", "'RELATIVE-OID'", 
                     "'CHARACTER'", "'CONSTRAINED'", "'BY'", "'@.'", "'ENCODED'", 
                     "'--'" ];

var symbolicNames = [ null, "A_ROND", "STAR", "ASSIGN_OP", "BOOLEAN_LITERAL", 
                      "TRUE_LITERAL", "FALSE_LITERAL", "DOT", "DOUBLE_DOT", 
                      "ELLIPSIS", "APOSTROPHE", "AMPERSAND", "LESS_THAN", 
                      "GREATER_THAN", "LESS_THAN_SLASH", "SLASH_GREATER_THAN", 
                      "TRUE_SMALL_LITERAL", "FALSE_SMALL_LITERAL", "INTEGER_LITERAL", 
                      "L_BRACE", "R_BRACE", "COMMA", "L_PARAN", "R_PARAN", 
                      "MINUS", "ENUMERATED_LITERAL", "REAL_LITERAL", "PLUS_INFINITY_LITERAL", 
                      "MINUS_INFINITY_LITERAL", "BIT_LITERAL", "STRING_LITERAL", 
                      "CONTAINING_LITERAL", "OCTET_LITERAL", "NULL_LITERAL", 
                      "SEQUENCE_LITERAL", "OPTIONAL_LITERAL", "DEFAULT_LITERAL", 
                      "COMPONENTS_LITERAL", "OF_LITERAL", "SET_LITERAL", 
                      "EXCLAM", "ALL_LITERAL", "EXCEPT_LITERAL", "POWER", 
                      "PIPE", "UNION_LITERAL", "INTERSECTION_LITERAL", "INCLUDES_LITERAL", 
                      "MIN_LITERAL", "MAX_LITERAL", "SIZE_LITERAL", "FROM_LITERAL", 
                      "WITH_LITERAL", "COMPONENT_LITERAL", "PRESENT_LITERAL", 
                      "ABSENT_LITERAL", "PATTERN_LITERAL", "TYPE_IDENTIFIER_LITERAL", 
                      "ABSTRACT_SYNTAX_LITERAL", "CLASS_LITERAL", "UNIQUE_LITERAL", 
                      "SYNTAX_LITERAL", "L_BRACKET", "R_BRACKET", "INSTANCE_LITERAL", 
                      "SEMI_COLON", "IMPORTS_LITERAL", "EXPORTS_LITERAL", 
                      "EXTENSIBILITY_LITERAL", "IMPLIED_LITERAL", "EXPLICIT_LITERAL", 
                      "TAGS_LITERAL", "IMPLICIT_LITERAL", "AUTOMATIC_LITERAL", 
                      "DEFINITIONS_LITERAL", "BEGIN_LITERAL", "END_LITERAL", 
                      "DOUBLE_L_BRACKET", "DOUBLE_R_BRACKET", "COLON", "CHOICE_LITERAL", 
                      "UNIVERSAL_LITERAL", "APPLICATION_LITERAL", "PRIVATE_LITERAL", 
                      "EMBEDDED_LITERAL", "PDV_LITERAL", "EXTERNAL_LITERAL", 
                      "OBJECT_LITERAL", "IDENTIFIER_LITERAL", "RELATIVE_OID_LITERAL", 
                      "CHARACTER_LITERAL", "CONSTRAINED_LITERAL", "BY_LITERAL", 
                      "A_ROND_DOT", "ENCODED_LITERAL", "COMMENT", "UNRESTRICTEDCHARACTERSTRINGTYPE", 
                      "EXTENSTIONENDMARKER", "NUMBER", "WS", "LINE_COMMENT", 
                      "BSTRING", "HSTRING", "CSTRING", "IDENTIFIER" ];

var ruleNames =  [ "modules", "moduleDefinition", "tagDefault", "extensionDefault", 
                   "moduleBody", "exports", "symbolsExported", "imports", 
                   "symbolsImported", "symbolsFromModuleList", "symbolsFromModule", 
                   "globalModuleReference", "assignedIdentifier", "symbolList", 
                   "symbol", "assignmentList", "assignment", "sequenceType", 
                   "extensionAndException", "optionalExtensionMarker", "componentTypeLists", 
                   "rootComponentTypeList", "componentTypeList", "componentType", 
                   "extensionAdditions", "extensionAdditionList", "extensionAddition", 
                   "extensionAdditionGroup", "versionNumber", "sequenceOfType", 
                   "sizeConstraint", "parameterizedAssignment", "parameterList", 
                   "parameter", "paramGovernor", "governor", "objectClassAssignment", 
                   "objectClass", "definedObjectClass", "usefulObjectClassReference", 
                   "externalObjectClassReference", "objectClassDefn", "withSyntaxSpec", 
                   "syntaxList", "tokenOrGroupSpec", "optionalGroup", "requiredToken", 
                   "literal", "primitiveFieldName", "fieldSpec", "typeFieldSpec", 
                   "typeOptionalitySpec", "fixedTypeValueFieldSpec", "valueOptionalitySpec", 
                   "variableTypeValueFieldSpec", "fixedTypeValueSetFieldSpec", 
                   "valueSetOptionalitySpec", "object", "parameterizedObject", 
                   "definedObject", "objectSet", "objectSetSpec", "fieldName", 
                   "valueSet", "elementSetSpecs", "rootElementSetSpec", 
                   "additionalElementSetSpec", "elementSetSpec", "unions", 
                   "exclusions", "intersections", "unionMark", "intersectionMark", 
                   "elements", "objectSetElements", "intersectionElements", 
                   "subtypeElements", "variableTypeValueSetFieldSpec", "objectFieldSpec", 
                   "objectOptionalitySpec", "objectSetFieldSpec", "objectSetOptionalitySpec", 
                   "typeAssignment", "valueAssignment", "asnType", "builtinType", 
                   "objectClassFieldType", "setType", "setOfType", "referencedType", 
                   "definedType", "constraint", "constraintSpec", "userDefinedConstraint", 
                   "generalConstraint", "userDefinedConstraintParameter", 
                   "tableConstraint", "simpleTableConstraint", "contentsConstraint", 
                   "componentPresenceLists", "componentPresenceList", "componentPresence", 
                   "subtypeConstraint", "value", "builtinValue", "objectIdentifierValue", 
                   "objIdComponentsList", "objIdComponents", "integerValue", 
                   "choiceValue", "enumeratedValue", "signedNumber", "choiceType", 
                   "alternativeTypeLists", "extensionAdditionAlternatives", 
                   "extensionAdditionAlternativesList", "extensionAdditionAlternative", 
                   "extensionAdditionAlternativesGroup", "rootAlternativeTypeList", 
                   "alternativeTypeList", "namedType", "enumeratedType", 
                   "enumerations", "rootEnumeration", "enumeration", "enumerationItem", 
                   "namedNumber", "definedValue", "parameterizedValue", 
                   "simpleDefinedValue", "actualParameterList", "actualParameter", 
                   "exceptionSpec", "exceptionIdentification", "additionalEnumeration", 
                   "integerType", "namedNumberList", "objectidentifiertype", 
                   "componentRelationConstraint", "atNotation", "level", 
                   "componentIdList", "octetStringType", "bitStringType", 
                   "namedBitList", "namedBit", "booleanValue" ];

function ASNParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ASNParser.prototype = Object.create(antlr4.Parser.prototype);
ASNParser.prototype.constructor = ASNParser;

Object.defineProperty(ASNParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ASNParser.EOF = antlr4.Token.EOF;
ASNParser.A_ROND = 1;
ASNParser.STAR = 2;
ASNParser.ASSIGN_OP = 3;
ASNParser.BOOLEAN_LITERAL = 4;
ASNParser.TRUE_LITERAL = 5;
ASNParser.FALSE_LITERAL = 6;
ASNParser.DOT = 7;
ASNParser.DOUBLE_DOT = 8;
ASNParser.ELLIPSIS = 9;
ASNParser.APOSTROPHE = 10;
ASNParser.AMPERSAND = 11;
ASNParser.LESS_THAN = 12;
ASNParser.GREATER_THAN = 13;
ASNParser.LESS_THAN_SLASH = 14;
ASNParser.SLASH_GREATER_THAN = 15;
ASNParser.TRUE_SMALL_LITERAL = 16;
ASNParser.FALSE_SMALL_LITERAL = 17;
ASNParser.INTEGER_LITERAL = 18;
ASNParser.L_BRACE = 19;
ASNParser.R_BRACE = 20;
ASNParser.COMMA = 21;
ASNParser.L_PARAN = 22;
ASNParser.R_PARAN = 23;
ASNParser.MINUS = 24;
ASNParser.ENUMERATED_LITERAL = 25;
ASNParser.REAL_LITERAL = 26;
ASNParser.PLUS_INFINITY_LITERAL = 27;
ASNParser.MINUS_INFINITY_LITERAL = 28;
ASNParser.BIT_LITERAL = 29;
ASNParser.STRING_LITERAL = 30;
ASNParser.CONTAINING_LITERAL = 31;
ASNParser.OCTET_LITERAL = 32;
ASNParser.NULL_LITERAL = 33;
ASNParser.SEQUENCE_LITERAL = 34;
ASNParser.OPTIONAL_LITERAL = 35;
ASNParser.DEFAULT_LITERAL = 36;
ASNParser.COMPONENTS_LITERAL = 37;
ASNParser.OF_LITERAL = 38;
ASNParser.SET_LITERAL = 39;
ASNParser.EXCLAM = 40;
ASNParser.ALL_LITERAL = 41;
ASNParser.EXCEPT_LITERAL = 42;
ASNParser.POWER = 43;
ASNParser.PIPE = 44;
ASNParser.UNION_LITERAL = 45;
ASNParser.INTERSECTION_LITERAL = 46;
ASNParser.INCLUDES_LITERAL = 47;
ASNParser.MIN_LITERAL = 48;
ASNParser.MAX_LITERAL = 49;
ASNParser.SIZE_LITERAL = 50;
ASNParser.FROM_LITERAL = 51;
ASNParser.WITH_LITERAL = 52;
ASNParser.COMPONENT_LITERAL = 53;
ASNParser.PRESENT_LITERAL = 54;
ASNParser.ABSENT_LITERAL = 55;
ASNParser.PATTERN_LITERAL = 56;
ASNParser.TYPE_IDENTIFIER_LITERAL = 57;
ASNParser.ABSTRACT_SYNTAX_LITERAL = 58;
ASNParser.CLASS_LITERAL = 59;
ASNParser.UNIQUE_LITERAL = 60;
ASNParser.SYNTAX_LITERAL = 61;
ASNParser.L_BRACKET = 62;
ASNParser.R_BRACKET = 63;
ASNParser.INSTANCE_LITERAL = 64;
ASNParser.SEMI_COLON = 65;
ASNParser.IMPORTS_LITERAL = 66;
ASNParser.EXPORTS_LITERAL = 67;
ASNParser.EXTENSIBILITY_LITERAL = 68;
ASNParser.IMPLIED_LITERAL = 69;
ASNParser.EXPLICIT_LITERAL = 70;
ASNParser.TAGS_LITERAL = 71;
ASNParser.IMPLICIT_LITERAL = 72;
ASNParser.AUTOMATIC_LITERAL = 73;
ASNParser.DEFINITIONS_LITERAL = 74;
ASNParser.BEGIN_LITERAL = 75;
ASNParser.END_LITERAL = 76;
ASNParser.DOUBLE_L_BRACKET = 77;
ASNParser.DOUBLE_R_BRACKET = 78;
ASNParser.COLON = 79;
ASNParser.CHOICE_LITERAL = 80;
ASNParser.UNIVERSAL_LITERAL = 81;
ASNParser.APPLICATION_LITERAL = 82;
ASNParser.PRIVATE_LITERAL = 83;
ASNParser.EMBEDDED_LITERAL = 84;
ASNParser.PDV_LITERAL = 85;
ASNParser.EXTERNAL_LITERAL = 86;
ASNParser.OBJECT_LITERAL = 87;
ASNParser.IDENTIFIER_LITERAL = 88;
ASNParser.RELATIVE_OID_LITERAL = 89;
ASNParser.CHARACTER_LITERAL = 90;
ASNParser.CONSTRAINED_LITERAL = 91;
ASNParser.BY_LITERAL = 92;
ASNParser.A_ROND_DOT = 93;
ASNParser.ENCODED_LITERAL = 94;
ASNParser.COMMENT = 95;
ASNParser.UNRESTRICTEDCHARACTERSTRINGTYPE = 96;
ASNParser.EXTENSTIONENDMARKER = 97;
ASNParser.NUMBER = 98;
ASNParser.WS = 99;
ASNParser.LINE_COMMENT = 100;
ASNParser.BSTRING = 101;
ASNParser.HSTRING = 102;
ASNParser.CSTRING = 103;
ASNParser.IDENTIFIER = 104;

ASNParser.RULE_modules = 0;
ASNParser.RULE_moduleDefinition = 1;
ASNParser.RULE_tagDefault = 2;
ASNParser.RULE_extensionDefault = 3;
ASNParser.RULE_moduleBody = 4;
ASNParser.RULE_exports = 5;
ASNParser.RULE_symbolsExported = 6;
ASNParser.RULE_imports = 7;
ASNParser.RULE_symbolsImported = 8;
ASNParser.RULE_symbolsFromModuleList = 9;
ASNParser.RULE_symbolsFromModule = 10;
ASNParser.RULE_globalModuleReference = 11;
ASNParser.RULE_assignedIdentifier = 12;
ASNParser.RULE_symbolList = 13;
ASNParser.RULE_symbol = 14;
ASNParser.RULE_assignmentList = 15;
ASNParser.RULE_assignment = 16;
ASNParser.RULE_sequenceType = 17;
ASNParser.RULE_extensionAndException = 18;
ASNParser.RULE_optionalExtensionMarker = 19;
ASNParser.RULE_componentTypeLists = 20;
ASNParser.RULE_rootComponentTypeList = 21;
ASNParser.RULE_componentTypeList = 22;
ASNParser.RULE_componentType = 23;
ASNParser.RULE_extensionAdditions = 24;
ASNParser.RULE_extensionAdditionList = 25;
ASNParser.RULE_extensionAddition = 26;
ASNParser.RULE_extensionAdditionGroup = 27;
ASNParser.RULE_versionNumber = 28;
ASNParser.RULE_sequenceOfType = 29;
ASNParser.RULE_sizeConstraint = 30;
ASNParser.RULE_parameterizedAssignment = 31;
ASNParser.RULE_parameterList = 32;
ASNParser.RULE_parameter = 33;
ASNParser.RULE_paramGovernor = 34;
ASNParser.RULE_governor = 35;
ASNParser.RULE_objectClassAssignment = 36;
ASNParser.RULE_objectClass = 37;
ASNParser.RULE_definedObjectClass = 38;
ASNParser.RULE_usefulObjectClassReference = 39;
ASNParser.RULE_externalObjectClassReference = 40;
ASNParser.RULE_objectClassDefn = 41;
ASNParser.RULE_withSyntaxSpec = 42;
ASNParser.RULE_syntaxList = 43;
ASNParser.RULE_tokenOrGroupSpec = 44;
ASNParser.RULE_optionalGroup = 45;
ASNParser.RULE_requiredToken = 46;
ASNParser.RULE_literal = 47;
ASNParser.RULE_primitiveFieldName = 48;
ASNParser.RULE_fieldSpec = 49;
ASNParser.RULE_typeFieldSpec = 50;
ASNParser.RULE_typeOptionalitySpec = 51;
ASNParser.RULE_fixedTypeValueFieldSpec = 52;
ASNParser.RULE_valueOptionalitySpec = 53;
ASNParser.RULE_variableTypeValueFieldSpec = 54;
ASNParser.RULE_fixedTypeValueSetFieldSpec = 55;
ASNParser.RULE_valueSetOptionalitySpec = 56;
ASNParser.RULE_object = 57;
ASNParser.RULE_parameterizedObject = 58;
ASNParser.RULE_definedObject = 59;
ASNParser.RULE_objectSet = 60;
ASNParser.RULE_objectSetSpec = 61;
ASNParser.RULE_fieldName = 62;
ASNParser.RULE_valueSet = 63;
ASNParser.RULE_elementSetSpecs = 64;
ASNParser.RULE_rootElementSetSpec = 65;
ASNParser.RULE_additionalElementSetSpec = 66;
ASNParser.RULE_elementSetSpec = 67;
ASNParser.RULE_unions = 68;
ASNParser.RULE_exclusions = 69;
ASNParser.RULE_intersections = 70;
ASNParser.RULE_unionMark = 71;
ASNParser.RULE_intersectionMark = 72;
ASNParser.RULE_elements = 73;
ASNParser.RULE_objectSetElements = 74;
ASNParser.RULE_intersectionElements = 75;
ASNParser.RULE_subtypeElements = 76;
ASNParser.RULE_variableTypeValueSetFieldSpec = 77;
ASNParser.RULE_objectFieldSpec = 78;
ASNParser.RULE_objectOptionalitySpec = 79;
ASNParser.RULE_objectSetFieldSpec = 80;
ASNParser.RULE_objectSetOptionalitySpec = 81;
ASNParser.RULE_typeAssignment = 82;
ASNParser.RULE_valueAssignment = 83;
ASNParser.RULE_asnType = 84;
ASNParser.RULE_builtinType = 85;
ASNParser.RULE_objectClassFieldType = 86;
ASNParser.RULE_setType = 87;
ASNParser.RULE_setOfType = 88;
ASNParser.RULE_referencedType = 89;
ASNParser.RULE_definedType = 90;
ASNParser.RULE_constraint = 91;
ASNParser.RULE_constraintSpec = 92;
ASNParser.RULE_userDefinedConstraint = 93;
ASNParser.RULE_generalConstraint = 94;
ASNParser.RULE_userDefinedConstraintParameter = 95;
ASNParser.RULE_tableConstraint = 96;
ASNParser.RULE_simpleTableConstraint = 97;
ASNParser.RULE_contentsConstraint = 98;
ASNParser.RULE_componentPresenceLists = 99;
ASNParser.RULE_componentPresenceList = 100;
ASNParser.RULE_componentPresence = 101;
ASNParser.RULE_subtypeConstraint = 102;
ASNParser.RULE_value = 103;
ASNParser.RULE_builtinValue = 104;
ASNParser.RULE_objectIdentifierValue = 105;
ASNParser.RULE_objIdComponentsList = 106;
ASNParser.RULE_objIdComponents = 107;
ASNParser.RULE_integerValue = 108;
ASNParser.RULE_choiceValue = 109;
ASNParser.RULE_enumeratedValue = 110;
ASNParser.RULE_signedNumber = 111;
ASNParser.RULE_choiceType = 112;
ASNParser.RULE_alternativeTypeLists = 113;
ASNParser.RULE_extensionAdditionAlternatives = 114;
ASNParser.RULE_extensionAdditionAlternativesList = 115;
ASNParser.RULE_extensionAdditionAlternative = 116;
ASNParser.RULE_extensionAdditionAlternativesGroup = 117;
ASNParser.RULE_rootAlternativeTypeList = 118;
ASNParser.RULE_alternativeTypeList = 119;
ASNParser.RULE_namedType = 120;
ASNParser.RULE_enumeratedType = 121;
ASNParser.RULE_enumerations = 122;
ASNParser.RULE_rootEnumeration = 123;
ASNParser.RULE_enumeration = 124;
ASNParser.RULE_enumerationItem = 125;
ASNParser.RULE_namedNumber = 126;
ASNParser.RULE_definedValue = 127;
ASNParser.RULE_parameterizedValue = 128;
ASNParser.RULE_simpleDefinedValue = 129;
ASNParser.RULE_actualParameterList = 130;
ASNParser.RULE_actualParameter = 131;
ASNParser.RULE_exceptionSpec = 132;
ASNParser.RULE_exceptionIdentification = 133;
ASNParser.RULE_additionalEnumeration = 134;
ASNParser.RULE_integerType = 135;
ASNParser.RULE_namedNumberList = 136;
ASNParser.RULE_objectidentifiertype = 137;
ASNParser.RULE_componentRelationConstraint = 138;
ASNParser.RULE_atNotation = 139;
ASNParser.RULE_level = 140;
ASNParser.RULE_componentIdList = 141;
ASNParser.RULE_octetStringType = 142;
ASNParser.RULE_bitStringType = 143;
ASNParser.RULE_namedBitList = 144;
ASNParser.RULE_namedBit = 145;
ASNParser.RULE_booleanValue = 146;


function ModulesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_modules;
    return this;
}

ModulesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModulesContext.prototype.constructor = ModulesContext;

ModulesContext.prototype.moduleDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleDefinitionContext);
    } else {
        return this.getTypedRuleContext(ModuleDefinitionContext,i);
    }
};

ModulesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterModules(this);
	}
};

ModulesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitModules(this);
	}
};




ASNParser.ModulesContext = ModulesContext;

ASNParser.prototype.modules = function() {

    var localctx = new ModulesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ASNParser.RULE_modules);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 295; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 294;
            this.moduleDefinition();
            this.state = 297; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ASNParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_moduleDefinition;
    return this;
}

ModuleDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleDefinitionContext.prototype.constructor = ModuleDefinitionContext;

ModuleDefinitionContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.IDENTIFIER);
    } else {
        return this.getToken(ASNParser.IDENTIFIER, i);
    }
};


ModuleDefinitionContext.prototype.DEFINITIONS_LITERAL = function() {
    return this.getToken(ASNParser.DEFINITIONS_LITERAL, 0);
};

ModuleDefinitionContext.prototype.tagDefault = function() {
    return this.getTypedRuleContext(TagDefaultContext,0);
};

ModuleDefinitionContext.prototype.extensionDefault = function() {
    return this.getTypedRuleContext(ExtensionDefaultContext,0);
};

ModuleDefinitionContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASNParser.ASSIGN_OP, 0);
};

ModuleDefinitionContext.prototype.BEGIN_LITERAL = function() {
    return this.getToken(ASNParser.BEGIN_LITERAL, 0);
};

ModuleDefinitionContext.prototype.moduleBody = function() {
    return this.getTypedRuleContext(ModuleBodyContext,0);
};

ModuleDefinitionContext.prototype.END_LITERAL = function() {
    return this.getToken(ASNParser.END_LITERAL, 0);
};

ModuleDefinitionContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

ModuleDefinitionContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

ModuleDefinitionContext.prototype.L_PARAN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.L_PARAN);
    } else {
        return this.getToken(ASNParser.L_PARAN, i);
    }
};


ModuleDefinitionContext.prototype.NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.NUMBER);
    } else {
        return this.getToken(ASNParser.NUMBER, i);
    }
};


ModuleDefinitionContext.prototype.R_PARAN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.R_PARAN);
    } else {
        return this.getToken(ASNParser.R_PARAN, i);
    }
};


ModuleDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterModuleDefinition(this);
	}
};

ModuleDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitModuleDefinition(this);
	}
};




ASNParser.ModuleDefinitionContext = ModuleDefinitionContext;

ASNParser.prototype.moduleDefinition = function() {

    var localctx = new ModuleDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ASNParser.RULE_moduleDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this.match(ASNParser.IDENTIFIER);
        this.state = 311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.L_BRACE) {
            this.state = 300;
            this.match(ASNParser.L_BRACE);
            this.state = 307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ASNParser.IDENTIFIER) {
                this.state = 301;
                this.match(ASNParser.IDENTIFIER);
                this.state = 302;
                this.match(ASNParser.L_PARAN);
                this.state = 303;
                this.match(ASNParser.NUMBER);
                this.state = 304;
                this.match(ASNParser.R_PARAN);
                this.state = 309;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 310;
            this.match(ASNParser.R_BRACE);
        }

        this.state = 313;
        this.match(ASNParser.DEFINITIONS_LITERAL);
        this.state = 314;
        this.tagDefault();
        this.state = 315;
        this.extensionDefault();
        this.state = 316;
        this.match(ASNParser.ASSIGN_OP);
        this.state = 317;
        this.match(ASNParser.BEGIN_LITERAL);
        this.state = 318;
        this.moduleBody();
        this.state = 319;
        this.match(ASNParser.END_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TagDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_tagDefault;
    return this;
}

TagDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TagDefaultContext.prototype.constructor = TagDefaultContext;

TagDefaultContext.prototype.TAGS_LITERAL = function() {
    return this.getToken(ASNParser.TAGS_LITERAL, 0);
};

TagDefaultContext.prototype.EXPLICIT_LITERAL = function() {
    return this.getToken(ASNParser.EXPLICIT_LITERAL, 0);
};

TagDefaultContext.prototype.IMPLICIT_LITERAL = function() {
    return this.getToken(ASNParser.IMPLICIT_LITERAL, 0);
};

TagDefaultContext.prototype.AUTOMATIC_LITERAL = function() {
    return this.getToken(ASNParser.AUTOMATIC_LITERAL, 0);
};

TagDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterTagDefault(this);
	}
};

TagDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitTagDefault(this);
	}
};




ASNParser.TagDefaultContext = TagDefaultContext;

ASNParser.prototype.tagDefault = function() {

    var localctx = new TagDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ASNParser.RULE_tagDefault);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ASNParser.EXPLICIT_LITERAL - 70)) | (1 << (ASNParser.IMPLICIT_LITERAL - 70)) | (1 << (ASNParser.AUTOMATIC_LITERAL - 70)))) !== 0)) {
            this.state = 321;
            _la = this._input.LA(1);
            if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (ASNParser.EXPLICIT_LITERAL - 70)) | (1 << (ASNParser.IMPLICIT_LITERAL - 70)) | (1 << (ASNParser.AUTOMATIC_LITERAL - 70)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 322;
            this.match(ASNParser.TAGS_LITERAL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionDefault;
    return this;
}

ExtensionDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionDefaultContext.prototype.constructor = ExtensionDefaultContext;

ExtensionDefaultContext.prototype.EXTENSIBILITY_LITERAL = function() {
    return this.getToken(ASNParser.EXTENSIBILITY_LITERAL, 0);
};

ExtensionDefaultContext.prototype.IMPLIED_LITERAL = function() {
    return this.getToken(ASNParser.IMPLIED_LITERAL, 0);
};

ExtensionDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionDefault(this);
	}
};

ExtensionDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionDefault(this);
	}
};




ASNParser.ExtensionDefaultContext = ExtensionDefaultContext;

ASNParser.prototype.extensionDefault = function() {

    var localctx = new ExtensionDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ASNParser.RULE_extensionDefault);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.EXTENSIBILITY_LITERAL) {
            this.state = 325;
            this.match(ASNParser.EXTENSIBILITY_LITERAL);
            this.state = 326;
            this.match(ASNParser.IMPLIED_LITERAL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_moduleBody;
    return this;
}

ModuleBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleBodyContext.prototype.constructor = ModuleBodyContext;

ModuleBodyContext.prototype.exports = function() {
    return this.getTypedRuleContext(ExportsContext,0);
};

ModuleBodyContext.prototype.imports = function() {
    return this.getTypedRuleContext(ImportsContext,0);
};

ModuleBodyContext.prototype.assignmentList = function() {
    return this.getTypedRuleContext(AssignmentListContext,0);
};

ModuleBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterModuleBody(this);
	}
};

ModuleBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitModuleBody(this);
	}
};




ASNParser.ModuleBodyContext = ModuleBodyContext;

ASNParser.prototype.moduleBody = function() {

    var localctx = new ModuleBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ASNParser.RULE_moduleBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.IMPORTS_LITERAL || _la===ASNParser.EXPORTS_LITERAL || _la===ASNParser.IDENTIFIER) {
            this.state = 329;
            this.exports();
            this.state = 330;
            this.imports();
            this.state = 331;
            this.assignmentList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_exports;
    return this;
}

ExportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportsContext.prototype.constructor = ExportsContext;

ExportsContext.prototype.EXPORTS_LITERAL = function() {
    return this.getToken(ASNParser.EXPORTS_LITERAL, 0);
};

ExportsContext.prototype.symbolsExported = function() {
    return this.getTypedRuleContext(SymbolsExportedContext,0);
};

ExportsContext.prototype.SEMI_COLON = function() {
    return this.getToken(ASNParser.SEMI_COLON, 0);
};

ExportsContext.prototype.ALL_LITERAL = function() {
    return this.getToken(ASNParser.ALL_LITERAL, 0);
};

ExportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExports(this);
	}
};

ExportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExports(this);
	}
};




ASNParser.ExportsContext = ExportsContext;

ASNParser.prototype.exports = function() {

    var localctx = new ExportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ASNParser.RULE_exports);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 342;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        if(la_===1) {
            this.state = 335;
            this.match(ASNParser.EXPORTS_LITERAL);
            this.state = 336;
            this.symbolsExported();
            this.state = 337;
            this.match(ASNParser.SEMI_COLON);

        } else if(la_===2) {
            this.state = 339;
            this.match(ASNParser.EXPORTS_LITERAL);
            this.state = 340;
            this.match(ASNParser.ALL_LITERAL);
            this.state = 341;
            this.match(ASNParser.SEMI_COLON);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolsExportedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_symbolsExported;
    return this;
}

SymbolsExportedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsExportedContext.prototype.constructor = SymbolsExportedContext;

SymbolsExportedContext.prototype.symbolList = function() {
    return this.getTypedRuleContext(SymbolListContext,0);
};

SymbolsExportedContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSymbolsExported(this);
	}
};

SymbolsExportedContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSymbolsExported(this);
	}
};




ASNParser.SymbolsExportedContext = SymbolsExportedContext;

ASNParser.prototype.symbolsExported = function() {

    var localctx = new SymbolsExportedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ASNParser.RULE_symbolsExported);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.IDENTIFIER) {
            this.state = 344;
            this.symbolList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_imports;
    return this;
}

ImportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportsContext.prototype.constructor = ImportsContext;

ImportsContext.prototype.IMPORTS_LITERAL = function() {
    return this.getToken(ASNParser.IMPORTS_LITERAL, 0);
};

ImportsContext.prototype.symbolsImported = function() {
    return this.getTypedRuleContext(SymbolsImportedContext,0);
};

ImportsContext.prototype.SEMI_COLON = function() {
    return this.getToken(ASNParser.SEMI_COLON, 0);
};

ImportsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterImports(this);
	}
};

ImportsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitImports(this);
	}
};




ASNParser.ImportsContext = ImportsContext;

ASNParser.prototype.imports = function() {

    var localctx = new ImportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ASNParser.RULE_imports);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.IMPORTS_LITERAL) {
            this.state = 347;
            this.match(ASNParser.IMPORTS_LITERAL);
            this.state = 348;
            this.symbolsImported();
            this.state = 349;
            this.match(ASNParser.SEMI_COLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolsImportedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_symbolsImported;
    return this;
}

SymbolsImportedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsImportedContext.prototype.constructor = SymbolsImportedContext;

SymbolsImportedContext.prototype.symbolsFromModuleList = function() {
    return this.getTypedRuleContext(SymbolsFromModuleListContext,0);
};

SymbolsImportedContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSymbolsImported(this);
	}
};

SymbolsImportedContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSymbolsImported(this);
	}
};




ASNParser.SymbolsImportedContext = SymbolsImportedContext;

ASNParser.prototype.symbolsImported = function() {

    var localctx = new SymbolsImportedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ASNParser.RULE_symbolsImported);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 354;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.IDENTIFIER) {
            this.state = 353;
            this.symbolsFromModuleList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolsFromModuleListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_symbolsFromModuleList;
    return this;
}

SymbolsFromModuleListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsFromModuleListContext.prototype.constructor = SymbolsFromModuleListContext;

SymbolsFromModuleListContext.prototype.symbolsFromModule = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolsFromModuleContext);
    } else {
        return this.getTypedRuleContext(SymbolsFromModuleContext,i);
    }
};

SymbolsFromModuleListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSymbolsFromModuleList(this);
	}
};

SymbolsFromModuleListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSymbolsFromModuleList(this);
	}
};




ASNParser.SymbolsFromModuleListContext = SymbolsFromModuleListContext;

ASNParser.prototype.symbolsFromModuleList = function() {

    var localctx = new SymbolsFromModuleListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ASNParser.RULE_symbolsFromModuleList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 356;
        this.symbolsFromModule();
        this.state = 360;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.IDENTIFIER) {
            this.state = 357;
            this.symbolsFromModule();
            this.state = 362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolsFromModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_symbolsFromModule;
    return this;
}

SymbolsFromModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolsFromModuleContext.prototype.constructor = SymbolsFromModuleContext;

SymbolsFromModuleContext.prototype.symbolList = function() {
    return this.getTypedRuleContext(SymbolListContext,0);
};

SymbolsFromModuleContext.prototype.FROM_LITERAL = function() {
    return this.getToken(ASNParser.FROM_LITERAL, 0);
};

SymbolsFromModuleContext.prototype.globalModuleReference = function() {
    return this.getTypedRuleContext(GlobalModuleReferenceContext,0);
};

SymbolsFromModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSymbolsFromModule(this);
	}
};

SymbolsFromModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSymbolsFromModule(this);
	}
};




ASNParser.SymbolsFromModuleContext = SymbolsFromModuleContext;

ASNParser.prototype.symbolsFromModule = function() {

    var localctx = new SymbolsFromModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ASNParser.RULE_symbolsFromModule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 363;
        this.symbolList();
        this.state = 364;
        this.match(ASNParser.FROM_LITERAL);
        this.state = 365;
        this.globalModuleReference();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GlobalModuleReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_globalModuleReference;
    return this;
}

GlobalModuleReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalModuleReferenceContext.prototype.constructor = GlobalModuleReferenceContext;

GlobalModuleReferenceContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

GlobalModuleReferenceContext.prototype.assignedIdentifier = function() {
    return this.getTypedRuleContext(AssignedIdentifierContext,0);
};

GlobalModuleReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterGlobalModuleReference(this);
	}
};

GlobalModuleReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitGlobalModuleReference(this);
	}
};




ASNParser.GlobalModuleReferenceContext = GlobalModuleReferenceContext;

ASNParser.prototype.globalModuleReference = function() {

    var localctx = new GlobalModuleReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ASNParser.RULE_globalModuleReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 367;
        this.match(ASNParser.IDENTIFIER);
        this.state = 368;
        this.assignedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_assignedIdentifier;
    return this;
}

AssignedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignedIdentifierContext.prototype.constructor = AssignedIdentifierContext;


AssignedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterAssignedIdentifier(this);
	}
};

AssignedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitAssignedIdentifier(this);
	}
};




ASNParser.AssignedIdentifierContext = AssignedIdentifierContext;

ASNParser.prototype.assignedIdentifier = function() {

    var localctx = new AssignedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ASNParser.RULE_assignedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_symbolList;
    return this;
}

SymbolListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolListContext.prototype.constructor = SymbolListContext;

SymbolListContext.prototype.symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SymbolContext);
    } else {
        return this.getTypedRuleContext(SymbolContext,i);
    }
};

SymbolListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


SymbolListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSymbolList(this);
	}
};

SymbolListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSymbolList(this);
	}
};




ASNParser.SymbolListContext = SymbolListContext;

ASNParser.prototype.symbolList = function() {

    var localctx = new SymbolListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ASNParser.RULE_symbolList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 372;
        this.symbol();
        this.state = 377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.COMMA) {
            this.state = 373;
            this.match(ASNParser.COMMA);
            this.state = 374;
            this.symbol();
            this.state = 379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SymbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_symbol;
    return this;
}

SymbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SymbolContext.prototype.constructor = SymbolContext;

SymbolContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

SymbolContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

SymbolContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

SymbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSymbol(this);
	}
};

SymbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSymbol(this);
	}
};




ASNParser.SymbolContext = SymbolContext;

ASNParser.prototype.symbol = function() {

    var localctx = new SymbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ASNParser.RULE_symbol);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 380;
        this.match(ASNParser.IDENTIFIER);
        this.state = 383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.L_BRACE) {
            this.state = 381;
            this.match(ASNParser.L_BRACE);
            this.state = 382;
            this.match(ASNParser.R_BRACE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_assignmentList;
    return this;
}

AssignmentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentListContext.prototype.constructor = AssignmentListContext;

AssignmentListContext.prototype.assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentContext);
    } else {
        return this.getTypedRuleContext(AssignmentContext,i);
    }
};

AssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterAssignmentList(this);
	}
};

AssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitAssignmentList(this);
	}
};




ASNParser.AssignmentListContext = AssignmentListContext;

ASNParser.prototype.assignmentList = function() {

    var localctx = new AssignmentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ASNParser.RULE_assignmentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 385;
        this.assignment();
        this.state = 389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.IDENTIFIER) {
            this.state = 386;
            this.assignment();
            this.state = 391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

AssignmentContext.prototype.valueAssignment = function() {
    return this.getTypedRuleContext(ValueAssignmentContext,0);
};

AssignmentContext.prototype.typeAssignment = function() {
    return this.getTypedRuleContext(TypeAssignmentContext,0);
};

AssignmentContext.prototype.parameterizedAssignment = function() {
    return this.getTypedRuleContext(ParameterizedAssignmentContext,0);
};

AssignmentContext.prototype.objectClassAssignment = function() {
    return this.getTypedRuleContext(ObjectClassAssignmentContext,0);
};

AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitAssignment(this);
	}
};




ASNParser.AssignmentContext = AssignmentContext;

ASNParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ASNParser.RULE_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this.match(ASNParser.IDENTIFIER);
        this.state = 397;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.state = 393;
            this.valueAssignment();
            break;

        case 2:
            this.state = 394;
            this.typeAssignment();
            break;

        case 3:
            this.state = 395;
            this.parameterizedAssignment();
            break;

        case 4:
            this.state = 396;
            this.objectClassAssignment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SequenceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_sequenceType;
    return this;
}

SequenceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SequenceTypeContext.prototype.constructor = SequenceTypeContext;

SequenceTypeContext.prototype.SEQUENCE_LITERAL = function() {
    return this.getToken(ASNParser.SEQUENCE_LITERAL, 0);
};

SequenceTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

SequenceTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

SequenceTypeContext.prototype.extensionAndException = function() {
    return this.getTypedRuleContext(ExtensionAndExceptionContext,0);
};

SequenceTypeContext.prototype.optionalExtensionMarker = function() {
    return this.getTypedRuleContext(OptionalExtensionMarkerContext,0);
};

SequenceTypeContext.prototype.componentTypeLists = function() {
    return this.getTypedRuleContext(ComponentTypeListsContext,0);
};

SequenceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSequenceType(this);
	}
};

SequenceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSequenceType(this);
	}
};




ASNParser.SequenceTypeContext = SequenceTypeContext;

ASNParser.prototype.sequenceType = function() {

    var localctx = new SequenceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ASNParser.RULE_sequenceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 399;
        this.match(ASNParser.SEQUENCE_LITERAL);
        this.state = 400;
        this.match(ASNParser.L_BRACE);
        this.state = 405;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        if(la_===1) {
            this.state = 401;
            this.extensionAndException();
            this.state = 402;
            this.optionalExtensionMarker();

        } else if(la_===2) {
            this.state = 404;
            this.componentTypeLists();

        }
        this.state = 407;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAndExceptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionAndException;
    return this;
}

ExtensionAndExceptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAndExceptionContext.prototype.constructor = ExtensionAndExceptionContext;

ExtensionAndExceptionContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASNParser.ELLIPSIS, 0);
};

ExtensionAndExceptionContext.prototype.exceptionSpec = function() {
    return this.getTypedRuleContext(ExceptionSpecContext,0);
};

ExtensionAndExceptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionAndException(this);
	}
};

ExtensionAndExceptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionAndException(this);
	}
};




ASNParser.ExtensionAndExceptionContext = ExtensionAndExceptionContext;

ASNParser.prototype.extensionAndException = function() {

    var localctx = new ExtensionAndExceptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ASNParser.RULE_extensionAndException);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 409;
        this.match(ASNParser.ELLIPSIS);
        this.state = 411;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.EXCLAM) {
            this.state = 410;
            this.exceptionSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalExtensionMarkerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_optionalExtensionMarker;
    return this;
}

OptionalExtensionMarkerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalExtensionMarkerContext.prototype.constructor = OptionalExtensionMarkerContext;

OptionalExtensionMarkerContext.prototype.COMMA = function() {
    return this.getToken(ASNParser.COMMA, 0);
};

OptionalExtensionMarkerContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASNParser.ELLIPSIS, 0);
};

OptionalExtensionMarkerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterOptionalExtensionMarker(this);
	}
};

OptionalExtensionMarkerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitOptionalExtensionMarker(this);
	}
};




ASNParser.OptionalExtensionMarkerContext = OptionalExtensionMarkerContext;

ASNParser.prototype.optionalExtensionMarker = function() {

    var localctx = new OptionalExtensionMarkerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ASNParser.RULE_optionalExtensionMarker);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 415;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.COMMA) {
            this.state = 413;
            this.match(ASNParser.COMMA);
            this.state = 414;
            this.match(ASNParser.ELLIPSIS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentTypeListsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_componentTypeLists;
    return this;
}

ComponentTypeListsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentTypeListsContext.prototype.constructor = ComponentTypeListsContext;

ComponentTypeListsContext.prototype.rootComponentTypeList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RootComponentTypeListContext);
    } else {
        return this.getTypedRuleContext(RootComponentTypeListContext,i);
    }
};

ComponentTypeListsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ComponentTypeListsContext.prototype.extensionAndException = function() {
    return this.getTypedRuleContext(ExtensionAndExceptionContext,0);
};

ComponentTypeListsContext.prototype.extensionAdditions = function() {
    return this.getTypedRuleContext(ExtensionAdditionsContext,0);
};

ComponentTypeListsContext.prototype.optionalExtensionMarker = function() {
    return this.getTypedRuleContext(OptionalExtensionMarkerContext,0);
};

ComponentTypeListsContext.prototype.EXTENSTIONENDMARKER = function() {
    return this.getToken(ASNParser.EXTENSTIONENDMARKER, 0);
};

ComponentTypeListsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterComponentTypeLists(this);
	}
};

ComponentTypeListsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitComponentTypeLists(this);
	}
};




ASNParser.ComponentTypeListsContext = ComponentTypeListsContext;

ASNParser.prototype.componentTypeLists = function() {

    var localctx = new ComponentTypeListsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ASNParser.RULE_componentTypeLists);
    var _la = 0; // Token type
    try {
        this.state = 437;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.COMPONENTS_LITERAL:
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 417;
            this.rootComponentTypeList();
            this.state = 427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.COMMA) {
                this.state = 418;
                this.match(ASNParser.COMMA);
                this.state = 419;
                this.extensionAndException();
                this.state = 420;
                this.extensionAdditions();
                this.state = 425;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case ASNParser.R_BRACE:
                case ASNParser.COMMA:
                    this.state = 421;
                    this.optionalExtensionMarker();
                    break;
                case ASNParser.EXTENSTIONENDMARKER:
                    this.state = 422;
                    this.match(ASNParser.EXTENSTIONENDMARKER);
                    this.state = 423;
                    this.match(ASNParser.COMMA);
                    this.state = 424;
                    this.rootComponentTypeList();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;
        case ASNParser.ELLIPSIS:
            this.enterOuterAlt(localctx, 2);
            this.state = 429;
            this.extensionAndException();
            this.state = 430;
            this.extensionAdditions();
            this.state = 435;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ASNParser.R_BRACE:
            case ASNParser.COMMA:
                this.state = 431;
                this.optionalExtensionMarker();
                break;
            case ASNParser.EXTENSTIONENDMARKER:
                this.state = 432;
                this.match(ASNParser.EXTENSTIONENDMARKER);
                this.state = 433;
                this.match(ASNParser.COMMA);
                this.state = 434;
                this.rootComponentTypeList();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RootComponentTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_rootComponentTypeList;
    return this;
}

RootComponentTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootComponentTypeListContext.prototype.constructor = RootComponentTypeListContext;

RootComponentTypeListContext.prototype.componentTypeList = function() {
    return this.getTypedRuleContext(ComponentTypeListContext,0);
};

RootComponentTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterRootComponentTypeList(this);
	}
};

RootComponentTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitRootComponentTypeList(this);
	}
};




ASNParser.RootComponentTypeListContext = RootComponentTypeListContext;

ASNParser.prototype.rootComponentTypeList = function() {

    var localctx = new RootComponentTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ASNParser.RULE_rootComponentTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 439;
        this.componentTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_componentTypeList;
    return this;
}

ComponentTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentTypeListContext.prototype.constructor = ComponentTypeListContext;

ComponentTypeListContext.prototype.componentType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentTypeContext);
    } else {
        return this.getTypedRuleContext(ComponentTypeContext,i);
    }
};

ComponentTypeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ComponentTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterComponentTypeList(this);
	}
};

ComponentTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitComponentTypeList(this);
	}
};




ASNParser.ComponentTypeListContext = ComponentTypeListContext;

ASNParser.prototype.componentTypeList = function() {

    var localctx = new ComponentTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ASNParser.RULE_componentTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 441;
        this.componentType();
        this.state = 446;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 442;
                this.match(ASNParser.COMMA);
                this.state = 443;
                this.componentType(); 
            }
            this.state = 448;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_componentType;
    return this;
}

ComponentTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentTypeContext.prototype.constructor = ComponentTypeContext;

ComponentTypeContext.prototype.namedType = function() {
    return this.getTypedRuleContext(NamedTypeContext,0);
};

ComponentTypeContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASNParser.OPTIONAL_LITERAL, 0);
};

ComponentTypeContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASNParser.DEFAULT_LITERAL, 0);
};

ComponentTypeContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ComponentTypeContext.prototype.COMPONENTS_LITERAL = function() {
    return this.getToken(ASNParser.COMPONENTS_LITERAL, 0);
};

ComponentTypeContext.prototype.OF_LITERAL = function() {
    return this.getToken(ASNParser.OF_LITERAL, 0);
};

ComponentTypeContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ComponentTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterComponentType(this);
	}
};

ComponentTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitComponentType(this);
	}
};




ASNParser.ComponentTypeContext = ComponentTypeContext;

ASNParser.prototype.componentType = function() {

    var localctx = new ComponentTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ASNParser.RULE_componentType);
    try {
        this.state = 458;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 449;
            this.namedType();
            this.state = 453;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case ASNParser.OPTIONAL_LITERAL:
            	this.state = 450;
            	this.match(ASNParser.OPTIONAL_LITERAL);
            	break;
            case ASNParser.DEFAULT_LITERAL:
            	this.state = 451;
            	this.match(ASNParser.DEFAULT_LITERAL);
            	this.state = 452;
            	this.value();
            	break;
            case ASNParser.R_BRACE:
            case ASNParser.COMMA:
            case ASNParser.DOUBLE_R_BRACKET:
            case ASNParser.EXTENSTIONENDMARKER:
            	break;
            default:
            	break;
            }
            break;
        case ASNParser.COMPONENTS_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 455;
            this.match(ASNParser.COMPONENTS_LITERAL);
            this.state = 456;
            this.match(ASNParser.OF_LITERAL);
            this.state = 457;
            this.asnType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionAdditions;
    return this;
}

ExtensionAdditionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionsContext.prototype.constructor = ExtensionAdditionsContext;

ExtensionAdditionsContext.prototype.COMMA = function() {
    return this.getToken(ASNParser.COMMA, 0);
};

ExtensionAdditionsContext.prototype.extensionAdditionList = function() {
    return this.getTypedRuleContext(ExtensionAdditionListContext,0);
};

ExtensionAdditionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionAdditions(this);
	}
};

ExtensionAdditionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionAdditions(this);
	}
};




ASNParser.ExtensionAdditionsContext = ExtensionAdditionsContext;

ASNParser.prototype.extensionAdditions = function() {

    var localctx = new ExtensionAdditionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ASNParser.RULE_extensionAdditions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 462;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 460;
            this.match(ASNParser.COMMA);
            this.state = 461;
            this.extensionAdditionList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionAdditionList;
    return this;
}

ExtensionAdditionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionListContext.prototype.constructor = ExtensionAdditionListContext;

ExtensionAdditionListContext.prototype.extensionAddition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExtensionAdditionContext);
    } else {
        return this.getTypedRuleContext(ExtensionAdditionContext,i);
    }
};

ExtensionAdditionListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ExtensionAdditionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionAdditionList(this);
	}
};

ExtensionAdditionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionAdditionList(this);
	}
};




ASNParser.ExtensionAdditionListContext = ExtensionAdditionListContext;

ASNParser.prototype.extensionAdditionList = function() {

    var localctx = new ExtensionAdditionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ASNParser.RULE_extensionAdditionList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 464;
        this.extensionAddition();
        this.state = 469;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 465;
                this.match(ASNParser.COMMA);
                this.state = 466;
                this.extensionAddition(); 
            }
            this.state = 471;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionAddition;
    return this;
}

ExtensionAdditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionContext.prototype.constructor = ExtensionAdditionContext;

ExtensionAdditionContext.prototype.componentType = function() {
    return this.getTypedRuleContext(ComponentTypeContext,0);
};

ExtensionAdditionContext.prototype.extensionAdditionGroup = function() {
    return this.getTypedRuleContext(ExtensionAdditionGroupContext,0);
};

ExtensionAdditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionAddition(this);
	}
};

ExtensionAdditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionAddition(this);
	}
};




ASNParser.ExtensionAdditionContext = ExtensionAdditionContext;

ASNParser.prototype.extensionAddition = function() {

    var localctx = new ExtensionAdditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ASNParser.RULE_extensionAddition);
    try {
        this.state = 474;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.COMPONENTS_LITERAL:
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 472;
            this.componentType();
            break;
        case ASNParser.DOUBLE_L_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 473;
            this.extensionAdditionGroup();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionAdditionGroup;
    return this;
}

ExtensionAdditionGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionGroupContext.prototype.constructor = ExtensionAdditionGroupContext;

ExtensionAdditionGroupContext.prototype.DOUBLE_L_BRACKET = function() {
    return this.getToken(ASNParser.DOUBLE_L_BRACKET, 0);
};

ExtensionAdditionGroupContext.prototype.versionNumber = function() {
    return this.getTypedRuleContext(VersionNumberContext,0);
};

ExtensionAdditionGroupContext.prototype.componentTypeList = function() {
    return this.getTypedRuleContext(ComponentTypeListContext,0);
};

ExtensionAdditionGroupContext.prototype.DOUBLE_R_BRACKET = function() {
    return this.getToken(ASNParser.DOUBLE_R_BRACKET, 0);
};

ExtensionAdditionGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionAdditionGroup(this);
	}
};

ExtensionAdditionGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionAdditionGroup(this);
	}
};




ASNParser.ExtensionAdditionGroupContext = ExtensionAdditionGroupContext;

ASNParser.prototype.extensionAdditionGroup = function() {

    var localctx = new ExtensionAdditionGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ASNParser.RULE_extensionAdditionGroup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 476;
        this.match(ASNParser.DOUBLE_L_BRACKET);
        this.state = 477;
        this.versionNumber();
        this.state = 478;
        this.componentTypeList();
        this.state = 479;
        this.match(ASNParser.DOUBLE_R_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VersionNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_versionNumber;
    return this;
}

VersionNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionNumberContext.prototype.constructor = VersionNumberContext;

VersionNumberContext.prototype.NUMBER = function() {
    return this.getToken(ASNParser.NUMBER, 0);
};

VersionNumberContext.prototype.COLON = function() {
    return this.getToken(ASNParser.COLON, 0);
};

VersionNumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterVersionNumber(this);
	}
};

VersionNumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitVersionNumber(this);
	}
};




ASNParser.VersionNumberContext = VersionNumberContext;

ASNParser.prototype.versionNumber = function() {

    var localctx = new VersionNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ASNParser.RULE_versionNumber);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.NUMBER) {
            this.state = 481;
            this.match(ASNParser.NUMBER);
            this.state = 482;
            this.match(ASNParser.COLON);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SequenceOfTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_sequenceOfType;
    return this;
}

SequenceOfTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SequenceOfTypeContext.prototype.constructor = SequenceOfTypeContext;

SequenceOfTypeContext.prototype.SEQUENCE_LITERAL = function() {
    return this.getToken(ASNParser.SEQUENCE_LITERAL, 0);
};

SequenceOfTypeContext.prototype.OF_LITERAL = function() {
    return this.getToken(ASNParser.OF_LITERAL, 0);
};

SequenceOfTypeContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

SequenceOfTypeContext.prototype.namedType = function() {
    return this.getTypedRuleContext(NamedTypeContext,0);
};

SequenceOfTypeContext.prototype.L_PARAN = function() {
    return this.getToken(ASNParser.L_PARAN, 0);
};

SequenceOfTypeContext.prototype.R_PARAN = function() {
    return this.getToken(ASNParser.R_PARAN, 0);
};

SequenceOfTypeContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

SequenceOfTypeContext.prototype.sizeConstraint = function() {
    return this.getTypedRuleContext(SizeConstraintContext,0);
};

SequenceOfTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSequenceOfType(this);
	}
};

SequenceOfTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSequenceOfType(this);
	}
};




ASNParser.SequenceOfTypeContext = SequenceOfTypeContext;

ASNParser.prototype.sequenceOfType = function() {

    var localctx = new SequenceOfTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ASNParser.RULE_sequenceOfType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485;
        this.match(ASNParser.SEQUENCE_LITERAL);
        this.state = 493;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.L_PARAN) {
            this.state = 486;
            this.match(ASNParser.L_PARAN);
            this.state = 489;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ASNParser.L_PARAN:
                this.state = 487;
                this.constraint();
                break;
            case ASNParser.SIZE_LITERAL:
                this.state = 488;
                this.sizeConstraint();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 491;
            this.match(ASNParser.R_PARAN);
        }

        this.state = 495;
        this.match(ASNParser.OF_LITERAL);
        this.state = 498;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.state = 496;
            this.asnType();
            break;

        case 2:
            this.state = 497;
            this.namedType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SizeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_sizeConstraint;
    return this;
}

SizeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SizeConstraintContext.prototype.constructor = SizeConstraintContext;

SizeConstraintContext.prototype.SIZE_LITERAL = function() {
    return this.getToken(ASNParser.SIZE_LITERAL, 0);
};

SizeConstraintContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

SizeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSizeConstraint(this);
	}
};

SizeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSizeConstraint(this);
	}
};




ASNParser.SizeConstraintContext = SizeConstraintContext;

ASNParser.prototype.sizeConstraint = function() {

    var localctx = new SizeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ASNParser.RULE_sizeConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this.match(ASNParser.SIZE_LITERAL);
        this.state = 501;
        this.constraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterizedAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_parameterizedAssignment;
    return this;
}

ParameterizedAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterizedAssignmentContext.prototype.constructor = ParameterizedAssignmentContext;

ParameterizedAssignmentContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ParameterizedAssignmentContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASNParser.ASSIGN_OP, 0);
};

ParameterizedAssignmentContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ParameterizedAssignmentContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ParameterizedAssignmentContext.prototype.valueSet = function() {
    return this.getTypedRuleContext(ValueSetContext,0);
};

ParameterizedAssignmentContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ParameterizedAssignmentContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

ParameterizedAssignmentContext.prototype.objectClass = function() {
    return this.getTypedRuleContext(ObjectClassContext,0);
};

ParameterizedAssignmentContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

ParameterizedAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterParameterizedAssignment(this);
	}
};

ParameterizedAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitParameterizedAssignment(this);
	}
};




ASNParser.ParameterizedAssignmentContext = ParameterizedAssignmentContext;

ASNParser.prototype.parameterizedAssignment = function() {

    var localctx = new ParameterizedAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ASNParser.RULE_parameterizedAssignment);
    try {
        this.state = 517;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.L_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 503;
            this.parameterList();

            this.state = 504;
            this.match(ASNParser.ASSIGN_OP);
            this.state = 508;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
            switch(la_) {
            case 1:
                this.state = 505;
                this.asnType();
                break;

            case 2:
                this.state = 506;
                this.value();
                break;

            case 3:
                this.state = 507;
                this.valueSet();
                break;

            }
            break;
        case ASNParser.TYPE_IDENTIFIER_LITERAL:
        case ASNParser.ABSTRACT_SYNTAX_LITERAL:
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 510;
            this.definedObjectClass();
            this.state = 511;
            this.match(ASNParser.ASSIGN_OP);
            this.state = 515;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
            switch(la_) {
            case 1:
                this.state = 512;
                this.object();
                break;

            case 2:
                this.state = 513;
                this.objectClass();
                break;

            case 3:
                this.state = 514;
                this.objectSet();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

ParameterListContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

ParameterListContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

ParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitParameterList(this);
	}
};




ASNParser.ParameterListContext = ParameterListContext;

ASNParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ASNParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this.match(ASNParser.L_BRACE);
        this.state = 520;
        this.parameter();
        this.state = 525;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.COMMA) {
            this.state = 521;
            this.match(ASNParser.COMMA);
            this.state = 522;
            this.parameter();
            this.state = 527;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 528;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

ParameterContext.prototype.paramGovernor = function() {
    return this.getTypedRuleContext(ParamGovernorContext,0);
};

ParameterContext.prototype.COLON = function() {
    return this.getToken(ASNParser.COLON, 0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitParameter(this);
	}
};




ASNParser.ParameterContext = ParameterContext;

ASNParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ASNParser.RULE_parameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 533;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 530;
            this.paramGovernor();
            this.state = 531;
            this.match(ASNParser.COLON);

        }
        this.state = 535;
        this.match(ASNParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParamGovernorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_paramGovernor;
    return this;
}

ParamGovernorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamGovernorContext.prototype.constructor = ParamGovernorContext;

ParamGovernorContext.prototype.governor = function() {
    return this.getTypedRuleContext(GovernorContext,0);
};

ParamGovernorContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

ParamGovernorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterParamGovernor(this);
	}
};

ParamGovernorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitParamGovernor(this);
	}
};




ASNParser.ParamGovernorContext = ParamGovernorContext;

ASNParser.prototype.paramGovernor = function() {

    var localctx = new ParamGovernorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ASNParser.RULE_paramGovernor);
    try {
        this.state = 539;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 537;
            this.governor();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 538;
            this.match(ASNParser.IDENTIFIER);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GovernorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_governor;
    return this;
}

GovernorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GovernorContext.prototype.constructor = GovernorContext;

GovernorContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

GovernorContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

GovernorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterGovernor(this);
	}
};

GovernorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitGovernor(this);
	}
};




ASNParser.GovernorContext = GovernorContext;

ASNParser.prototype.governor = function() {

    var localctx = new GovernorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ASNParser.RULE_governor);
    try {
        this.state = 543;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 541;
            this.asnType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 542;
            this.definedObjectClass();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectClassAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectClassAssignment;
    return this;
}

ObjectClassAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectClassAssignmentContext.prototype.constructor = ObjectClassAssignmentContext;

ObjectClassAssignmentContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASNParser.ASSIGN_OP, 0);
};

ObjectClassAssignmentContext.prototype.objectClass = function() {
    return this.getTypedRuleContext(ObjectClassContext,0);
};

ObjectClassAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectClassAssignment(this);
	}
};

ObjectClassAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectClassAssignment(this);
	}
};




ASNParser.ObjectClassAssignmentContext = ObjectClassAssignmentContext;

ASNParser.prototype.objectClassAssignment = function() {

    var localctx = new ObjectClassAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ASNParser.RULE_objectClassAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        this.match(ASNParser.ASSIGN_OP);
        this.state = 546;
        this.objectClass();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectClassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectClass;
    return this;
}

ObjectClassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectClassContext.prototype.constructor = ObjectClassContext;

ObjectClassContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ObjectClassContext.prototype.objectClassDefn = function() {
    return this.getTypedRuleContext(ObjectClassDefnContext,0);
};

ObjectClassContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectClass(this);
	}
};

ObjectClassContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectClass(this);
	}
};




ASNParser.ObjectClassContext = ObjectClassContext;

ASNParser.prototype.objectClass = function() {

    var localctx = new ObjectClassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ASNParser.RULE_objectClass);
    try {
        this.state = 550;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.TYPE_IDENTIFIER_LITERAL:
        case ASNParser.ABSTRACT_SYNTAX_LITERAL:
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 548;
            this.definedObjectClass();
            break;
        case ASNParser.CLASS_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 549;
            this.objectClassDefn();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinedObjectClassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_definedObjectClass;
    return this;
}

DefinedObjectClassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinedObjectClassContext.prototype.constructor = DefinedObjectClassContext;

DefinedObjectClassContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.IDENTIFIER);
    } else {
        return this.getToken(ASNParser.IDENTIFIER, i);
    }
};


DefinedObjectClassContext.prototype.DOT = function() {
    return this.getToken(ASNParser.DOT, 0);
};

DefinedObjectClassContext.prototype.TYPE_IDENTIFIER_LITERAL = function() {
    return this.getToken(ASNParser.TYPE_IDENTIFIER_LITERAL, 0);
};

DefinedObjectClassContext.prototype.ABSTRACT_SYNTAX_LITERAL = function() {
    return this.getToken(ASNParser.ABSTRACT_SYNTAX_LITERAL, 0);
};

DefinedObjectClassContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterDefinedObjectClass(this);
	}
};

DefinedObjectClassContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitDefinedObjectClass(this);
	}
};




ASNParser.DefinedObjectClassContext = DefinedObjectClassContext;

ASNParser.prototype.definedObjectClass = function() {

    var localctx = new DefinedObjectClassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ASNParser.RULE_definedObjectClass);
    try {
        this.state = 559;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 554;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 552;
                this.match(ASNParser.IDENTIFIER);
                this.state = 553;
                this.match(ASNParser.DOT);

            }
            this.state = 556;
            this.match(ASNParser.IDENTIFIER);
            break;
        case ASNParser.TYPE_IDENTIFIER_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 557;
            this.match(ASNParser.TYPE_IDENTIFIER_LITERAL);
            break;
        case ASNParser.ABSTRACT_SYNTAX_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 558;
            this.match(ASNParser.ABSTRACT_SYNTAX_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsefulObjectClassReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_usefulObjectClassReference;
    return this;
}

UsefulObjectClassReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsefulObjectClassReferenceContext.prototype.constructor = UsefulObjectClassReferenceContext;

UsefulObjectClassReferenceContext.prototype.TYPE_IDENTIFIER_LITERAL = function() {
    return this.getToken(ASNParser.TYPE_IDENTIFIER_LITERAL, 0);
};

UsefulObjectClassReferenceContext.prototype.ABSTRACT_SYNTAX_LITERAL = function() {
    return this.getToken(ASNParser.ABSTRACT_SYNTAX_LITERAL, 0);
};

UsefulObjectClassReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterUsefulObjectClassReference(this);
	}
};

UsefulObjectClassReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitUsefulObjectClassReference(this);
	}
};




ASNParser.UsefulObjectClassReferenceContext = UsefulObjectClassReferenceContext;

ASNParser.prototype.usefulObjectClassReference = function() {

    var localctx = new UsefulObjectClassReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ASNParser.RULE_usefulObjectClassReference);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 561;
        _la = this._input.LA(1);
        if(!(_la===ASNParser.TYPE_IDENTIFIER_LITERAL || _la===ASNParser.ABSTRACT_SYNTAX_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExternalObjectClassReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_externalObjectClassReference;
    return this;
}

ExternalObjectClassReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternalObjectClassReferenceContext.prototype.constructor = ExternalObjectClassReferenceContext;

ExternalObjectClassReferenceContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.IDENTIFIER);
    } else {
        return this.getToken(ASNParser.IDENTIFIER, i);
    }
};


ExternalObjectClassReferenceContext.prototype.DOT = function() {
    return this.getToken(ASNParser.DOT, 0);
};

ExternalObjectClassReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExternalObjectClassReference(this);
	}
};

ExternalObjectClassReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExternalObjectClassReference(this);
	}
};




ASNParser.ExternalObjectClassReferenceContext = ExternalObjectClassReferenceContext;

ASNParser.prototype.externalObjectClassReference = function() {

    var localctx = new ExternalObjectClassReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ASNParser.RULE_externalObjectClassReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this.match(ASNParser.IDENTIFIER);
        this.state = 564;
        this.match(ASNParser.DOT);
        this.state = 565;
        this.match(ASNParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectClassDefnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectClassDefn;
    return this;
}

ObjectClassDefnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectClassDefnContext.prototype.constructor = ObjectClassDefnContext;

ObjectClassDefnContext.prototype.CLASS_LITERAL = function() {
    return this.getToken(ASNParser.CLASS_LITERAL, 0);
};

ObjectClassDefnContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

ObjectClassDefnContext.prototype.fieldSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldSpecContext);
    } else {
        return this.getTypedRuleContext(FieldSpecContext,i);
    }
};

ObjectClassDefnContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

ObjectClassDefnContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ObjectClassDefnContext.prototype.withSyntaxSpec = function() {
    return this.getTypedRuleContext(WithSyntaxSpecContext,0);
};

ObjectClassDefnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectClassDefn(this);
	}
};

ObjectClassDefnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectClassDefn(this);
	}
};




ASNParser.ObjectClassDefnContext = ObjectClassDefnContext;

ASNParser.prototype.objectClassDefn = function() {

    var localctx = new ObjectClassDefnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ASNParser.RULE_objectClassDefn);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 567;
        this.match(ASNParser.CLASS_LITERAL);
        this.state = 568;
        this.match(ASNParser.L_BRACE);
        this.state = 569;
        this.fieldSpec();
        this.state = 574;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.COMMA) {
            this.state = 570;
            this.match(ASNParser.COMMA);
            this.state = 571;
            this.fieldSpec();
            this.state = 576;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 577;
        this.match(ASNParser.R_BRACE);
        this.state = 579;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.WITH_LITERAL) {
            this.state = 578;
            this.withSyntaxSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithSyntaxSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_withSyntaxSpec;
    return this;
}

WithSyntaxSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithSyntaxSpecContext.prototype.constructor = WithSyntaxSpecContext;

WithSyntaxSpecContext.prototype.WITH_LITERAL = function() {
    return this.getToken(ASNParser.WITH_LITERAL, 0);
};

WithSyntaxSpecContext.prototype.SYNTAX_LITERAL = function() {
    return this.getToken(ASNParser.SYNTAX_LITERAL, 0);
};

WithSyntaxSpecContext.prototype.syntaxList = function() {
    return this.getTypedRuleContext(SyntaxListContext,0);
};

WithSyntaxSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterWithSyntaxSpec(this);
	}
};

WithSyntaxSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitWithSyntaxSpec(this);
	}
};




ASNParser.WithSyntaxSpecContext = WithSyntaxSpecContext;

ASNParser.prototype.withSyntaxSpec = function() {

    var localctx = new WithSyntaxSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ASNParser.RULE_withSyntaxSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 581;
        this.match(ASNParser.WITH_LITERAL);
        this.state = 582;
        this.match(ASNParser.SYNTAX_LITERAL);
        this.state = 583;
        this.syntaxList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SyntaxListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_syntaxList;
    return this;
}

SyntaxListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SyntaxListContext.prototype.constructor = SyntaxListContext;

SyntaxListContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

SyntaxListContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

SyntaxListContext.prototype.tokenOrGroupSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TokenOrGroupSpecContext);
    } else {
        return this.getTypedRuleContext(TokenOrGroupSpecContext,i);
    }
};

SyntaxListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSyntaxList(this);
	}
};

SyntaxListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSyntaxList(this);
	}
};




ASNParser.SyntaxListContext = SyntaxListContext;

ASNParser.prototype.syntaxList = function() {

    var localctx = new SyntaxListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ASNParser.RULE_syntaxList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 585;
        this.match(ASNParser.L_BRACE);
        this.state = 587; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 586;
            this.tokenOrGroupSpec();
            this.state = 589; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ASNParser.AMPERSAND || _la===ASNParser.COMMA || _la===ASNParser.L_BRACKET || _la===ASNParser.IDENTIFIER);
        this.state = 591;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TokenOrGroupSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_tokenOrGroupSpec;
    return this;
}

TokenOrGroupSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TokenOrGroupSpecContext.prototype.constructor = TokenOrGroupSpecContext;

TokenOrGroupSpecContext.prototype.requiredToken = function() {
    return this.getTypedRuleContext(RequiredTokenContext,0);
};

TokenOrGroupSpecContext.prototype.optionalGroup = function() {
    return this.getTypedRuleContext(OptionalGroupContext,0);
};

TokenOrGroupSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterTokenOrGroupSpec(this);
	}
};

TokenOrGroupSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitTokenOrGroupSpec(this);
	}
};




ASNParser.TokenOrGroupSpecContext = TokenOrGroupSpecContext;

ASNParser.prototype.tokenOrGroupSpec = function() {

    var localctx = new TokenOrGroupSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ASNParser.RULE_tokenOrGroupSpec);
    try {
        this.state = 595;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.AMPERSAND:
        case ASNParser.COMMA:
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 593;
            this.requiredToken();
            break;
        case ASNParser.L_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 594;
            this.optionalGroup();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptionalGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_optionalGroup;
    return this;
}

OptionalGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalGroupContext.prototype.constructor = OptionalGroupContext;

OptionalGroupContext.prototype.L_BRACKET = function() {
    return this.getToken(ASNParser.L_BRACKET, 0);
};

OptionalGroupContext.prototype.R_BRACKET = function() {
    return this.getToken(ASNParser.R_BRACKET, 0);
};

OptionalGroupContext.prototype.tokenOrGroupSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TokenOrGroupSpecContext);
    } else {
        return this.getTypedRuleContext(TokenOrGroupSpecContext,i);
    }
};

OptionalGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterOptionalGroup(this);
	}
};

OptionalGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitOptionalGroup(this);
	}
};




ASNParser.OptionalGroupContext = OptionalGroupContext;

ASNParser.prototype.optionalGroup = function() {

    var localctx = new OptionalGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ASNParser.RULE_optionalGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 597;
        this.match(ASNParser.L_BRACKET);
        this.state = 599; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 598;
            this.tokenOrGroupSpec();
            this.state = 601; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ASNParser.AMPERSAND || _la===ASNParser.COMMA || _la===ASNParser.L_BRACKET || _la===ASNParser.IDENTIFIER);
        this.state = 603;
        this.match(ASNParser.R_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RequiredTokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_requiredToken;
    return this;
}

RequiredTokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiredTokenContext.prototype.constructor = RequiredTokenContext;

RequiredTokenContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

RequiredTokenContext.prototype.primitiveFieldName = function() {
    return this.getTypedRuleContext(PrimitiveFieldNameContext,0);
};

RequiredTokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterRequiredToken(this);
	}
};

RequiredTokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitRequiredToken(this);
	}
};




ASNParser.RequiredTokenContext = RequiredTokenContext;

ASNParser.prototype.requiredToken = function() {

    var localctx = new RequiredTokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ASNParser.RULE_requiredToken);
    try {
        this.state = 607;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.COMMA:
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 605;
            this.literal();
            break;
        case ASNParser.AMPERSAND:
            this.enterOuterAlt(localctx, 2);
            this.state = 606;
            this.primitiveFieldName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

LiteralContext.prototype.COMMA = function() {
    return this.getToken(ASNParser.COMMA, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitLiteral(this);
	}
};




ASNParser.LiteralContext = LiteralContext;

ASNParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ASNParser.RULE_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        _la = this._input.LA(1);
        if(!(_la===ASNParser.COMMA || _la===ASNParser.IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimitiveFieldNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_primitiveFieldName;
    return this;
}

PrimitiveFieldNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveFieldNameContext.prototype.constructor = PrimitiveFieldNameContext;

PrimitiveFieldNameContext.prototype.AMPERSAND = function() {
    return this.getToken(ASNParser.AMPERSAND, 0);
};

PrimitiveFieldNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

PrimitiveFieldNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterPrimitiveFieldName(this);
	}
};

PrimitiveFieldNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitPrimitiveFieldName(this);
	}
};




ASNParser.PrimitiveFieldNameContext = PrimitiveFieldNameContext;

ASNParser.prototype.primitiveFieldName = function() {

    var localctx = new PrimitiveFieldNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ASNParser.RULE_primitiveFieldName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 611;
        this.match(ASNParser.AMPERSAND);
        this.state = 612;
        this.match(ASNParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_fieldSpec;
    return this;
}

FieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldSpecContext.prototype.constructor = FieldSpecContext;

FieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASNParser.AMPERSAND, 0);
};

FieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

FieldSpecContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

FieldSpecContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};

FieldSpecContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

FieldSpecContext.prototype.typeOptionalitySpec = function() {
    return this.getTypedRuleContext(TypeOptionalitySpecContext,0);
};

FieldSpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASNParser.OPTIONAL_LITERAL, 0);
};

FieldSpecContext.prototype.valueSetOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueSetOptionalitySpecContext,0);
};

FieldSpecContext.prototype.UNIQUE_LITERAL = function() {
    return this.getToken(ASNParser.UNIQUE_LITERAL, 0);
};

FieldSpecContext.prototype.valueOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueOptionalitySpecContext,0);
};

FieldSpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASNParser.DEFAULT_LITERAL, 0);
};

FieldSpecContext.prototype.valueSet = function() {
    return this.getTypedRuleContext(ValueSetContext,0);
};

FieldSpecContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

FieldSpecContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

FieldSpecContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

FieldSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterFieldSpec(this);
	}
};

FieldSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitFieldSpec(this);
	}
};




ASNParser.FieldSpecContext = FieldSpecContext;

ASNParser.prototype.fieldSpec = function() {

    var localctx = new FieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ASNParser.RULE_fieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 614;
        this.match(ASNParser.AMPERSAND);
        this.state = 615;
        this.match(ASNParser.IDENTIFIER);
        this.state = 649;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.state = 617;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
                this.state = 616;
                this.typeOptionalitySpec();
            }

            break;

        case 2:
            this.state = 619;
            this.asnType();
            this.state = 629;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            switch(la_) {
            case 1:
                this.state = 621;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
                    this.state = 620;
                    this.valueSetOptionalitySpec();
                }

                break;

            case 2:
                this.state = 624;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASNParser.UNIQUE_LITERAL) {
                    this.state = 623;
                    this.match(ASNParser.UNIQUE_LITERAL);
                }

                this.state = 627;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
                    this.state = 626;
                    this.valueOptionalitySpec();
                }

                break;

            }
            break;

        case 3:
            this.state = 631;
            this.fieldName();
            this.state = 638;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case ASNParser.OPTIONAL_LITERAL:
            	this.state = 632;
            	this.match(ASNParser.OPTIONAL_LITERAL);
            	break;
            case ASNParser.DEFAULT_LITERAL:
            	this.state = 633;
            	this.match(ASNParser.DEFAULT_LITERAL);
            	this.state = 636;
            	this._errHandler.sync(this);
            	var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
            	switch(la_) {
            	case 1:
            	    this.state = 634;
            	    this.valueSet();
            	    break;

            	case 2:
            	    this.state = 635;
            	    this.value();
            	    break;

            	}
            	break;
            case ASNParser.R_BRACE:
            case ASNParser.COMMA:
            	break;
            default:
            	break;
            }
            break;

        case 4:
            this.state = 640;
            this.definedObjectClass();
            this.state = 647;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case ASNParser.OPTIONAL_LITERAL:
            	this.state = 641;
            	this.match(ASNParser.OPTIONAL_LITERAL);
            	break;
            case ASNParser.DEFAULT_LITERAL:
            	this.state = 642;
            	this.match(ASNParser.DEFAULT_LITERAL);
            	this.state = 645;
            	this._errHandler.sync(this);
            	switch(this._input.LA(1)) {
            	case ASNParser.L_BRACE:
            	    this.state = 643;
            	    this.objectSet();
            	    break;
            	case ASNParser.IDENTIFIER:
            	    this.state = 644;
            	    this.object();
            	    break;
            	default:
            	    throw new antlr4.error.NoViableAltException(this);
            	}
            	break;
            case ASNParser.R_BRACE:
            case ASNParser.COMMA:
            	break;
            default:
            	break;
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_typeFieldSpec;
    return this;
}

TypeFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeFieldSpecContext.prototype.constructor = TypeFieldSpecContext;

TypeFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASNParser.AMPERSAND, 0);
};

TypeFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

TypeFieldSpecContext.prototype.typeOptionalitySpec = function() {
    return this.getTypedRuleContext(TypeOptionalitySpecContext,0);
};

TypeFieldSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterTypeFieldSpec(this);
	}
};

TypeFieldSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitTypeFieldSpec(this);
	}
};




ASNParser.TypeFieldSpecContext = TypeFieldSpecContext;

ASNParser.prototype.typeFieldSpec = function() {

    var localctx = new TypeFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ASNParser.RULE_typeFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this.match(ASNParser.AMPERSAND);
        this.state = 652;
        this.match(ASNParser.IDENTIFIER);
        this.state = 654;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
            this.state = 653;
            this.typeOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_typeOptionalitySpec;
    return this;
}

TypeOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeOptionalitySpecContext.prototype.constructor = TypeOptionalitySpecContext;

TypeOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASNParser.OPTIONAL_LITERAL, 0);
};

TypeOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASNParser.DEFAULT_LITERAL, 0);
};

TypeOptionalitySpecContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

TypeOptionalitySpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterTypeOptionalitySpec(this);
	}
};

TypeOptionalitySpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitTypeOptionalitySpec(this);
	}
};




ASNParser.TypeOptionalitySpecContext = TypeOptionalitySpecContext;

ASNParser.prototype.typeOptionalitySpec = function() {

    var localctx = new TypeOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ASNParser.RULE_typeOptionalitySpec);
    try {
        this.state = 659;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 656;
            this.match(ASNParser.OPTIONAL_LITERAL);
            break;
        case ASNParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 657;
            this.match(ASNParser.DEFAULT_LITERAL);
            this.state = 658;
            this.asnType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FixedTypeValueFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_fixedTypeValueFieldSpec;
    return this;
}

FixedTypeValueFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FixedTypeValueFieldSpecContext.prototype.constructor = FixedTypeValueFieldSpecContext;

FixedTypeValueFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASNParser.AMPERSAND, 0);
};

FixedTypeValueFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

FixedTypeValueFieldSpecContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

FixedTypeValueFieldSpecContext.prototype.UNIQUE_LITERAL = function() {
    return this.getToken(ASNParser.UNIQUE_LITERAL, 0);
};

FixedTypeValueFieldSpecContext.prototype.valueOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueOptionalitySpecContext,0);
};

FixedTypeValueFieldSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterFixedTypeValueFieldSpec(this);
	}
};

FixedTypeValueFieldSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitFixedTypeValueFieldSpec(this);
	}
};




ASNParser.FixedTypeValueFieldSpecContext = FixedTypeValueFieldSpecContext;

ASNParser.prototype.fixedTypeValueFieldSpec = function() {

    var localctx = new FixedTypeValueFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ASNParser.RULE_fixedTypeValueFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this.match(ASNParser.AMPERSAND);
        this.state = 662;
        this.match(ASNParser.IDENTIFIER);
        this.state = 663;
        this.asnType();
        this.state = 665;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.UNIQUE_LITERAL) {
            this.state = 664;
            this.match(ASNParser.UNIQUE_LITERAL);
        }

        this.state = 668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
            this.state = 667;
            this.valueOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_valueOptionalitySpec;
    return this;
}

ValueOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueOptionalitySpecContext.prototype.constructor = ValueOptionalitySpecContext;

ValueOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASNParser.OPTIONAL_LITERAL, 0);
};

ValueOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASNParser.DEFAULT_LITERAL, 0);
};

ValueOptionalitySpecContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ValueOptionalitySpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterValueOptionalitySpec(this);
	}
};

ValueOptionalitySpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitValueOptionalitySpec(this);
	}
};




ASNParser.ValueOptionalitySpecContext = ValueOptionalitySpecContext;

ASNParser.prototype.valueOptionalitySpec = function() {

    var localctx = new ValueOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ASNParser.RULE_valueOptionalitySpec);
    try {
        this.state = 673;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 670;
            this.match(ASNParser.OPTIONAL_LITERAL);
            break;
        case ASNParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 671;
            this.match(ASNParser.DEFAULT_LITERAL);
            this.state = 672;
            this.value();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableTypeValueFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_variableTypeValueFieldSpec;
    return this;
}

VariableTypeValueFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableTypeValueFieldSpecContext.prototype.constructor = VariableTypeValueFieldSpecContext;

VariableTypeValueFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASNParser.AMPERSAND, 0);
};

VariableTypeValueFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

VariableTypeValueFieldSpecContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};

VariableTypeValueFieldSpecContext.prototype.valueOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueOptionalitySpecContext,0);
};

VariableTypeValueFieldSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterVariableTypeValueFieldSpec(this);
	}
};

VariableTypeValueFieldSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitVariableTypeValueFieldSpec(this);
	}
};




ASNParser.VariableTypeValueFieldSpecContext = VariableTypeValueFieldSpecContext;

ASNParser.prototype.variableTypeValueFieldSpec = function() {

    var localctx = new VariableTypeValueFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ASNParser.RULE_variableTypeValueFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 675;
        this.match(ASNParser.AMPERSAND);
        this.state = 676;
        this.match(ASNParser.IDENTIFIER);
        this.state = 677;
        this.fieldName();
        this.state = 679;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
            this.state = 678;
            this.valueOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FixedTypeValueSetFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_fixedTypeValueSetFieldSpec;
    return this;
}

FixedTypeValueSetFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FixedTypeValueSetFieldSpecContext.prototype.constructor = FixedTypeValueSetFieldSpecContext;

FixedTypeValueSetFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASNParser.AMPERSAND, 0);
};

FixedTypeValueSetFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

FixedTypeValueSetFieldSpecContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

FixedTypeValueSetFieldSpecContext.prototype.valueSetOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueSetOptionalitySpecContext,0);
};

FixedTypeValueSetFieldSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterFixedTypeValueSetFieldSpec(this);
	}
};

FixedTypeValueSetFieldSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitFixedTypeValueSetFieldSpec(this);
	}
};




ASNParser.FixedTypeValueSetFieldSpecContext = FixedTypeValueSetFieldSpecContext;

ASNParser.prototype.fixedTypeValueSetFieldSpec = function() {

    var localctx = new FixedTypeValueSetFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ASNParser.RULE_fixedTypeValueSetFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.match(ASNParser.AMPERSAND);
        this.state = 682;
        this.match(ASNParser.IDENTIFIER);
        this.state = 683;
        this.asnType();
        this.state = 685;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
            this.state = 684;
            this.valueSetOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueSetOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_valueSetOptionalitySpec;
    return this;
}

ValueSetOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueSetOptionalitySpecContext.prototype.constructor = ValueSetOptionalitySpecContext;

ValueSetOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASNParser.OPTIONAL_LITERAL, 0);
};

ValueSetOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASNParser.DEFAULT_LITERAL, 0);
};

ValueSetOptionalitySpecContext.prototype.valueSet = function() {
    return this.getTypedRuleContext(ValueSetContext,0);
};

ValueSetOptionalitySpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterValueSetOptionalitySpec(this);
	}
};

ValueSetOptionalitySpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitValueSetOptionalitySpec(this);
	}
};




ASNParser.ValueSetOptionalitySpecContext = ValueSetOptionalitySpecContext;

ASNParser.prototype.valueSetOptionalitySpec = function() {

    var localctx = new ValueSetOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ASNParser.RULE_valueSetOptionalitySpec);
    try {
        this.state = 690;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 687;
            this.match(ASNParser.OPTIONAL_LITERAL);
            break;
        case ASNParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 688;
            this.match(ASNParser.DEFAULT_LITERAL);
            this.state = 689;
            this.valueSet();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_object;
    return this;
}

ObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectContext.prototype.constructor = ObjectContext;

ObjectContext.prototype.definedObject = function() {
    return this.getTypedRuleContext(DefinedObjectContext,0);
};

ObjectContext.prototype.parameterizedObject = function() {
    return this.getTypedRuleContext(ParameterizedObjectContext,0);
};

ObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObject(this);
	}
};

ObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObject(this);
	}
};




ASNParser.ObjectContext = ObjectContext;

ASNParser.prototype.object = function() {

    var localctx = new ObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ASNParser.RULE_object);
    try {
        this.state = 694;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 692;
            this.definedObject();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 693;
            this.parameterizedObject();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterizedObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_parameterizedObject;
    return this;
}

ParameterizedObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterizedObjectContext.prototype.constructor = ParameterizedObjectContext;

ParameterizedObjectContext.prototype.definedObject = function() {
    return this.getTypedRuleContext(DefinedObjectContext,0);
};

ParameterizedObjectContext.prototype.actualParameterList = function() {
    return this.getTypedRuleContext(ActualParameterListContext,0);
};

ParameterizedObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterParameterizedObject(this);
	}
};

ParameterizedObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitParameterizedObject(this);
	}
};




ASNParser.ParameterizedObjectContext = ParameterizedObjectContext;

ASNParser.prototype.parameterizedObject = function() {

    var localctx = new ParameterizedObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ASNParser.RULE_parameterizedObject);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 696;
        this.definedObject();
        this.state = 697;
        this.actualParameterList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinedObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_definedObject;
    return this;
}

DefinedObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinedObjectContext.prototype.constructor = DefinedObjectContext;

DefinedObjectContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

DefinedObjectContext.prototype.DOT = function() {
    return this.getToken(ASNParser.DOT, 0);
};

DefinedObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterDefinedObject(this);
	}
};

DefinedObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitDefinedObject(this);
	}
};




ASNParser.DefinedObjectContext = DefinedObjectContext;

ASNParser.prototype.definedObject = function() {

    var localctx = new DefinedObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ASNParser.RULE_definedObject);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 699;
        this.match(ASNParser.IDENTIFIER);
        this.state = 701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.DOT) {
            this.state = 700;
            this.match(ASNParser.DOT);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectSet;
    return this;
}

ObjectSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetContext.prototype.constructor = ObjectSetContext;

ObjectSetContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

ObjectSetContext.prototype.objectSetSpec = function() {
    return this.getTypedRuleContext(ObjectSetSpecContext,0);
};

ObjectSetContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

ObjectSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectSet(this);
	}
};

ObjectSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectSet(this);
	}
};




ASNParser.ObjectSetContext = ObjectSetContext;

ASNParser.prototype.objectSet = function() {

    var localctx = new ObjectSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ASNParser.RULE_objectSet);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this.match(ASNParser.L_BRACE);
        this.state = 704;
        this.objectSetSpec();
        this.state = 705;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectSetSpec;
    return this;
}

ObjectSetSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetSpecContext.prototype.constructor = ObjectSetSpecContext;

ObjectSetSpecContext.prototype.rootElementSetSpec = function() {
    return this.getTypedRuleContext(RootElementSetSpecContext,0);
};

ObjectSetSpecContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ObjectSetSpecContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASNParser.ELLIPSIS, 0);
};

ObjectSetSpecContext.prototype.additionalElementSetSpec = function() {
    return this.getTypedRuleContext(AdditionalElementSetSpecContext,0);
};

ObjectSetSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectSetSpec(this);
	}
};

ObjectSetSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectSetSpec(this);
	}
};




ASNParser.ObjectSetSpecContext = ObjectSetSpecContext;

ASNParser.prototype.objectSetSpec = function() {

    var localctx = new ObjectSetSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ASNParser.RULE_objectSetSpec);
    var _la = 0; // Token type
    try {
        this.state = 721;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.TRUE_LITERAL:
        case ASNParser.FALSE_LITERAL:
        case ASNParser.TRUE_SMALL_LITERAL:
        case ASNParser.FALSE_SMALL_LITERAL:
        case ASNParser.L_BRACE:
        case ASNParser.MINUS:
        case ASNParser.ALL_LITERAL:
        case ASNParser.MIN_LITERAL:
        case ASNParser.SIZE_LITERAL:
        case ASNParser.PATTERN_LITERAL:
        case ASNParser.NUMBER:
        case ASNParser.BSTRING:
        case ASNParser.CSTRING:
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 707;
            this.rootElementSetSpec();
            this.state = 714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.COMMA) {
                this.state = 708;
                this.match(ASNParser.COMMA);
                this.state = 709;
                this.match(ASNParser.ELLIPSIS);
                this.state = 712;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASNParser.COMMA) {
                    this.state = 710;
                    this.match(ASNParser.COMMA);
                    this.state = 711;
                    this.additionalElementSetSpec();
                }

            }

            break;
        case ASNParser.ELLIPSIS:
            this.enterOuterAlt(localctx, 2);
            this.state = 716;
            this.match(ASNParser.ELLIPSIS);
            this.state = 719;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.COMMA) {
                this.state = 717;
                this.match(ASNParser.COMMA);
                this.state = 718;
                this.additionalElementSetSpec();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_fieldName;
    return this;
}

FieldNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldNameContext.prototype.constructor = FieldNameContext;

FieldNameContext.prototype.AMPERSAND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.AMPERSAND);
    } else {
        return this.getToken(ASNParser.AMPERSAND, i);
    }
};


FieldNameContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.IDENTIFIER);
    } else {
        return this.getToken(ASNParser.IDENTIFIER, i);
    }
};


FieldNameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.DOT);
    } else {
        return this.getToken(ASNParser.DOT, i);
    }
};


FieldNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterFieldName(this);
	}
};

FieldNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitFieldName(this);
	}
};




ASNParser.FieldNameContext = FieldNameContext;

ASNParser.prototype.fieldName = function() {

    var localctx = new FieldNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ASNParser.RULE_fieldName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 723;
        this.match(ASNParser.AMPERSAND);
        this.state = 724;
        this.match(ASNParser.IDENTIFIER);
        this.state = 731;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.AMPERSAND) {
            this.state = 726;
            this.match(ASNParser.AMPERSAND);
            this.state = 727;
            this.match(ASNParser.IDENTIFIER);
            this.state = 728;
            this.match(ASNParser.DOT);
            this.state = 733;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_valueSet;
    return this;
}

ValueSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueSetContext.prototype.constructor = ValueSetContext;

ValueSetContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

ValueSetContext.prototype.elementSetSpecs = function() {
    return this.getTypedRuleContext(ElementSetSpecsContext,0);
};

ValueSetContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

ValueSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterValueSet(this);
	}
};

ValueSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitValueSet(this);
	}
};




ASNParser.ValueSetContext = ValueSetContext;

ASNParser.prototype.valueSet = function() {

    var localctx = new ValueSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ASNParser.RULE_valueSet);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 734;
        this.match(ASNParser.L_BRACE);
        this.state = 735;
        this.elementSetSpecs();
        this.state = 736;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementSetSpecsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_elementSetSpecs;
    return this;
}

ElementSetSpecsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementSetSpecsContext.prototype.constructor = ElementSetSpecsContext;

ElementSetSpecsContext.prototype.rootElementSetSpec = function() {
    return this.getTypedRuleContext(RootElementSetSpecContext,0);
};

ElementSetSpecsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ElementSetSpecsContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASNParser.ELLIPSIS, 0);
};

ElementSetSpecsContext.prototype.additionalElementSetSpec = function() {
    return this.getTypedRuleContext(AdditionalElementSetSpecContext,0);
};

ElementSetSpecsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterElementSetSpecs(this);
	}
};

ElementSetSpecsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitElementSetSpecs(this);
	}
};




ASNParser.ElementSetSpecsContext = ElementSetSpecsContext;

ASNParser.prototype.elementSetSpecs = function() {

    var localctx = new ElementSetSpecsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ASNParser.RULE_elementSetSpecs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 738;
        this.rootElementSetSpec();
        this.state = 745;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.COMMA) {
            this.state = 739;
            this.match(ASNParser.COMMA);
            this.state = 740;
            this.match(ASNParser.ELLIPSIS);
            this.state = 743;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.COMMA) {
                this.state = 741;
                this.match(ASNParser.COMMA);
                this.state = 742;
                this.additionalElementSetSpec();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RootElementSetSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_rootElementSetSpec;
    return this;
}

RootElementSetSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootElementSetSpecContext.prototype.constructor = RootElementSetSpecContext;

RootElementSetSpecContext.prototype.elementSetSpec = function() {
    return this.getTypedRuleContext(ElementSetSpecContext,0);
};

RootElementSetSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterRootElementSetSpec(this);
	}
};

RootElementSetSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitRootElementSetSpec(this);
	}
};




ASNParser.RootElementSetSpecContext = RootElementSetSpecContext;

ASNParser.prototype.rootElementSetSpec = function() {

    var localctx = new RootElementSetSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ASNParser.RULE_rootElementSetSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this.elementSetSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdditionalElementSetSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_additionalElementSetSpec;
    return this;
}

AdditionalElementSetSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditionalElementSetSpecContext.prototype.constructor = AdditionalElementSetSpecContext;

AdditionalElementSetSpecContext.prototype.elementSetSpec = function() {
    return this.getTypedRuleContext(ElementSetSpecContext,0);
};

AdditionalElementSetSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterAdditionalElementSetSpec(this);
	}
};

AdditionalElementSetSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitAdditionalElementSetSpec(this);
	}
};




ASNParser.AdditionalElementSetSpecContext = AdditionalElementSetSpecContext;

ASNParser.prototype.additionalElementSetSpec = function() {

    var localctx = new AdditionalElementSetSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ASNParser.RULE_additionalElementSetSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 749;
        this.elementSetSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementSetSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_elementSetSpec;
    return this;
}

ElementSetSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementSetSpecContext.prototype.constructor = ElementSetSpecContext;

ElementSetSpecContext.prototype.unions = function() {
    return this.getTypedRuleContext(UnionsContext,0);
};

ElementSetSpecContext.prototype.ALL_LITERAL = function() {
    return this.getToken(ASNParser.ALL_LITERAL, 0);
};

ElementSetSpecContext.prototype.exclusions = function() {
    return this.getTypedRuleContext(ExclusionsContext,0);
};

ElementSetSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterElementSetSpec(this);
	}
};

ElementSetSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitElementSetSpec(this);
	}
};




ASNParser.ElementSetSpecContext = ElementSetSpecContext;

ASNParser.prototype.elementSetSpec = function() {

    var localctx = new ElementSetSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ASNParser.RULE_elementSetSpec);
    try {
        this.state = 754;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.TRUE_LITERAL:
        case ASNParser.FALSE_LITERAL:
        case ASNParser.TRUE_SMALL_LITERAL:
        case ASNParser.FALSE_SMALL_LITERAL:
        case ASNParser.L_BRACE:
        case ASNParser.MINUS:
        case ASNParser.MIN_LITERAL:
        case ASNParser.SIZE_LITERAL:
        case ASNParser.PATTERN_LITERAL:
        case ASNParser.NUMBER:
        case ASNParser.BSTRING:
        case ASNParser.CSTRING:
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 751;
            this.unions();
            break;
        case ASNParser.ALL_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 752;
            this.match(ASNParser.ALL_LITERAL);
            this.state = 753;
            this.exclusions();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_unions;
    return this;
}

UnionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionsContext.prototype.constructor = UnionsContext;

UnionsContext.prototype.intersections = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntersectionsContext);
    } else {
        return this.getTypedRuleContext(IntersectionsContext,i);
    }
};

UnionsContext.prototype.unionMark = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnionMarkContext);
    } else {
        return this.getTypedRuleContext(UnionMarkContext,i);
    }
};

UnionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterUnions(this);
	}
};

UnionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitUnions(this);
	}
};




ASNParser.UnionsContext = UnionsContext;

ASNParser.prototype.unions = function() {

    var localctx = new UnionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ASNParser.RULE_unions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 756;
        this.intersections();
        this.state = 762;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.PIPE || _la===ASNParser.UNION_LITERAL) {
            this.state = 757;
            this.unionMark();
            this.state = 758;
            this.intersections();
            this.state = 764;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExclusionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_exclusions;
    return this;
}

ExclusionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExclusionsContext.prototype.constructor = ExclusionsContext;

ExclusionsContext.prototype.EXCEPT_LITERAL = function() {
    return this.getToken(ASNParser.EXCEPT_LITERAL, 0);
};

ExclusionsContext.prototype.elements = function() {
    return this.getTypedRuleContext(ElementsContext,0);
};

ExclusionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExclusions(this);
	}
};

ExclusionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExclusions(this);
	}
};




ASNParser.ExclusionsContext = ExclusionsContext;

ASNParser.prototype.exclusions = function() {

    var localctx = new ExclusionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ASNParser.RULE_exclusions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 765;
        this.match(ASNParser.EXCEPT_LITERAL);
        this.state = 766;
        this.elements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntersectionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_intersections;
    return this;
}

IntersectionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntersectionsContext.prototype.constructor = IntersectionsContext;

IntersectionsContext.prototype.intersectionElements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntersectionElementsContext);
    } else {
        return this.getTypedRuleContext(IntersectionElementsContext,i);
    }
};

IntersectionsContext.prototype.intersectionMark = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntersectionMarkContext);
    } else {
        return this.getTypedRuleContext(IntersectionMarkContext,i);
    }
};

IntersectionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterIntersections(this);
	}
};

IntersectionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitIntersections(this);
	}
};




ASNParser.IntersectionsContext = IntersectionsContext;

ASNParser.prototype.intersections = function() {

    var localctx = new IntersectionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ASNParser.RULE_intersections);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 768;
        this.intersectionElements();
        this.state = 774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.POWER || _la===ASNParser.INTERSECTION_LITERAL) {
            this.state = 769;
            this.intersectionMark();
            this.state = 770;
            this.intersectionElements();
            this.state = 776;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnionMarkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_unionMark;
    return this;
}

UnionMarkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionMarkContext.prototype.constructor = UnionMarkContext;

UnionMarkContext.prototype.PIPE = function() {
    return this.getToken(ASNParser.PIPE, 0);
};

UnionMarkContext.prototype.UNION_LITERAL = function() {
    return this.getToken(ASNParser.UNION_LITERAL, 0);
};

UnionMarkContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterUnionMark(this);
	}
};

UnionMarkContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitUnionMark(this);
	}
};




ASNParser.UnionMarkContext = UnionMarkContext;

ASNParser.prototype.unionMark = function() {

    var localctx = new UnionMarkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ASNParser.RULE_unionMark);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 777;
        _la = this._input.LA(1);
        if(!(_la===ASNParser.PIPE || _la===ASNParser.UNION_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntersectionMarkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_intersectionMark;
    return this;
}

IntersectionMarkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntersectionMarkContext.prototype.constructor = IntersectionMarkContext;

IntersectionMarkContext.prototype.POWER = function() {
    return this.getToken(ASNParser.POWER, 0);
};

IntersectionMarkContext.prototype.INTERSECTION_LITERAL = function() {
    return this.getToken(ASNParser.INTERSECTION_LITERAL, 0);
};

IntersectionMarkContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterIntersectionMark(this);
	}
};

IntersectionMarkContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitIntersectionMark(this);
	}
};




ASNParser.IntersectionMarkContext = IntersectionMarkContext;

ASNParser.prototype.intersectionMark = function() {

    var localctx = new IntersectionMarkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ASNParser.RULE_intersectionMark);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        _la = this._input.LA(1);
        if(!(_la===ASNParser.POWER || _la===ASNParser.INTERSECTION_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_elements;
    return this;
}

ElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementsContext.prototype.constructor = ElementsContext;

ElementsContext.prototype.subtypeElements = function() {
    return this.getTypedRuleContext(SubtypeElementsContext,0);
};

ElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterElements(this);
	}
};

ElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitElements(this);
	}
};




ASNParser.ElementsContext = ElementsContext;

ASNParser.prototype.elements = function() {

    var localctx = new ElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ASNParser.RULE_elements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 781;
        this.subtypeElements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectSetElements;
    return this;
}

ObjectSetElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetElementsContext.prototype.constructor = ObjectSetElementsContext;

ObjectSetElementsContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

ObjectSetElementsContext.prototype.definedObject = function() {
    return this.getTypedRuleContext(DefinedObjectContext,0);
};

ObjectSetElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectSetElements(this);
	}
};

ObjectSetElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectSetElements(this);
	}
};




ASNParser.ObjectSetElementsContext = ObjectSetElementsContext;

ASNParser.prototype.objectSetElements = function() {

    var localctx = new ObjectSetElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ASNParser.RULE_objectSetElements);
    try {
        this.state = 785;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 783;
            this.object();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 784;
            this.definedObject();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntersectionElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_intersectionElements;
    return this;
}

IntersectionElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntersectionElementsContext.prototype.constructor = IntersectionElementsContext;

IntersectionElementsContext.prototype.elements = function() {
    return this.getTypedRuleContext(ElementsContext,0);
};

IntersectionElementsContext.prototype.exclusions = function() {
    return this.getTypedRuleContext(ExclusionsContext,0);
};

IntersectionElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterIntersectionElements(this);
	}
};

IntersectionElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitIntersectionElements(this);
	}
};




ASNParser.IntersectionElementsContext = IntersectionElementsContext;

ASNParser.prototype.intersectionElements = function() {

    var localctx = new IntersectionElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ASNParser.RULE_intersectionElements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 787;
        this.elements();
        this.state = 789;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.EXCEPT_LITERAL) {
            this.state = 788;
            this.exclusions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubtypeElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_subtypeElements;
    return this;
}

SubtypeElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubtypeElementsContext.prototype.constructor = SubtypeElementsContext;

SubtypeElementsContext.prototype.DOUBLE_DOT = function() {
    return this.getToken(ASNParser.DOUBLE_DOT, 0);
};

SubtypeElementsContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

SubtypeElementsContext.prototype.MIN_LITERAL = function() {
    return this.getToken(ASNParser.MIN_LITERAL, 0);
};

SubtypeElementsContext.prototype.MAX_LITERAL = function() {
    return this.getToken(ASNParser.MAX_LITERAL, 0);
};

SubtypeElementsContext.prototype.LESS_THAN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.LESS_THAN);
    } else {
        return this.getToken(ASNParser.LESS_THAN, i);
    }
};


SubtypeElementsContext.prototype.sizeConstraint = function() {
    return this.getTypedRuleContext(SizeConstraintContext,0);
};

SubtypeElementsContext.prototype.PATTERN_LITERAL = function() {
    return this.getToken(ASNParser.PATTERN_LITERAL, 0);
};

SubtypeElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSubtypeElements(this);
	}
};

SubtypeElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSubtypeElements(this);
	}
};




ASNParser.SubtypeElementsContext = SubtypeElementsContext;

ASNParser.prototype.subtypeElements = function() {

    var localctx = new SubtypeElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ASNParser.RULE_subtypeElements);
    var _la = 0; // Token type
    try {
        this.state = 810;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 793;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ASNParser.TRUE_LITERAL:
            case ASNParser.FALSE_LITERAL:
            case ASNParser.TRUE_SMALL_LITERAL:
            case ASNParser.FALSE_SMALL_LITERAL:
            case ASNParser.L_BRACE:
            case ASNParser.MINUS:
            case ASNParser.NUMBER:
            case ASNParser.BSTRING:
            case ASNParser.CSTRING:
            case ASNParser.IDENTIFIER:
                this.state = 791;
                this.value();
                break;
            case ASNParser.MIN_LITERAL:
                this.state = 792;
                this.match(ASNParser.MIN_LITERAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.LESS_THAN) {
                this.state = 795;
                this.match(ASNParser.LESS_THAN);
            }

            this.state = 798;
            this.match(ASNParser.DOUBLE_DOT);
            this.state = 800;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.LESS_THAN) {
                this.state = 799;
                this.match(ASNParser.LESS_THAN);
            }

            this.state = 804;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ASNParser.TRUE_LITERAL:
            case ASNParser.FALSE_LITERAL:
            case ASNParser.TRUE_SMALL_LITERAL:
            case ASNParser.FALSE_SMALL_LITERAL:
            case ASNParser.L_BRACE:
            case ASNParser.MINUS:
            case ASNParser.NUMBER:
            case ASNParser.BSTRING:
            case ASNParser.CSTRING:
            case ASNParser.IDENTIFIER:
                this.state = 802;
                this.value();
                break;
            case ASNParser.MAX_LITERAL:
                this.state = 803;
                this.match(ASNParser.MAX_LITERAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 806;
            this.sizeConstraint();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 807;
            this.match(ASNParser.PATTERN_LITERAL);
            this.state = 808;
            this.value();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 809;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableTypeValueSetFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_variableTypeValueSetFieldSpec;
    return this;
}

VariableTypeValueSetFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableTypeValueSetFieldSpecContext.prototype.constructor = VariableTypeValueSetFieldSpecContext;

VariableTypeValueSetFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASNParser.AMPERSAND, 0);
};

VariableTypeValueSetFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

VariableTypeValueSetFieldSpecContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};

VariableTypeValueSetFieldSpecContext.prototype.valueSetOptionalitySpec = function() {
    return this.getTypedRuleContext(ValueSetOptionalitySpecContext,0);
};

VariableTypeValueSetFieldSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterVariableTypeValueSetFieldSpec(this);
	}
};

VariableTypeValueSetFieldSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitVariableTypeValueSetFieldSpec(this);
	}
};




ASNParser.VariableTypeValueSetFieldSpecContext = VariableTypeValueSetFieldSpecContext;

ASNParser.prototype.variableTypeValueSetFieldSpec = function() {

    var localctx = new VariableTypeValueSetFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ASNParser.RULE_variableTypeValueSetFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        this.match(ASNParser.AMPERSAND);
        this.state = 813;
        this.match(ASNParser.IDENTIFIER);
        this.state = 814;
        this.fieldName();
        this.state = 816;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
            this.state = 815;
            this.valueSetOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectFieldSpec;
    return this;
}

ObjectFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectFieldSpecContext.prototype.constructor = ObjectFieldSpecContext;

ObjectFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASNParser.AMPERSAND, 0);
};

ObjectFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

ObjectFieldSpecContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ObjectFieldSpecContext.prototype.objectOptionalitySpec = function() {
    return this.getTypedRuleContext(ObjectOptionalitySpecContext,0);
};

ObjectFieldSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectFieldSpec(this);
	}
};

ObjectFieldSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectFieldSpec(this);
	}
};




ASNParser.ObjectFieldSpecContext = ObjectFieldSpecContext;

ASNParser.prototype.objectFieldSpec = function() {

    var localctx = new ObjectFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ASNParser.RULE_objectFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this.match(ASNParser.AMPERSAND);
        this.state = 819;
        this.match(ASNParser.IDENTIFIER);
        this.state = 820;
        this.definedObjectClass();
        this.state = 822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
            this.state = 821;
            this.objectOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectOptionalitySpec;
    return this;
}

ObjectOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectOptionalitySpecContext.prototype.constructor = ObjectOptionalitySpecContext;

ObjectOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASNParser.OPTIONAL_LITERAL, 0);
};

ObjectOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASNParser.DEFAULT_LITERAL, 0);
};

ObjectOptionalitySpecContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

ObjectOptionalitySpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectOptionalitySpec(this);
	}
};

ObjectOptionalitySpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectOptionalitySpec(this);
	}
};




ASNParser.ObjectOptionalitySpecContext = ObjectOptionalitySpecContext;

ASNParser.prototype.objectOptionalitySpec = function() {

    var localctx = new ObjectOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ASNParser.RULE_objectOptionalitySpec);
    try {
        this.state = 827;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 824;
            this.match(ASNParser.OPTIONAL_LITERAL);
            break;
        case ASNParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 825;
            this.match(ASNParser.DEFAULT_LITERAL);
            this.state = 826;
            this.object();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetFieldSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectSetFieldSpec;
    return this;
}

ObjectSetFieldSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetFieldSpecContext.prototype.constructor = ObjectSetFieldSpecContext;

ObjectSetFieldSpecContext.prototype.AMPERSAND = function() {
    return this.getToken(ASNParser.AMPERSAND, 0);
};

ObjectSetFieldSpecContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

ObjectSetFieldSpecContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ObjectSetFieldSpecContext.prototype.objectSetOptionalitySpec = function() {
    return this.getTypedRuleContext(ObjectSetOptionalitySpecContext,0);
};

ObjectSetFieldSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectSetFieldSpec(this);
	}
};

ObjectSetFieldSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectSetFieldSpec(this);
	}
};




ASNParser.ObjectSetFieldSpecContext = ObjectSetFieldSpecContext;

ASNParser.prototype.objectSetFieldSpec = function() {

    var localctx = new ObjectSetFieldSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ASNParser.RULE_objectSetFieldSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 829;
        this.match(ASNParser.AMPERSAND);
        this.state = 830;
        this.match(ASNParser.IDENTIFIER);
        this.state = 831;
        this.definedObjectClass();
        this.state = 833;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.OPTIONAL_LITERAL || _la===ASNParser.DEFAULT_LITERAL) {
            this.state = 832;
            this.objectSetOptionalitySpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectSetOptionalitySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectSetOptionalitySpec;
    return this;
}

ObjectSetOptionalitySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectSetOptionalitySpecContext.prototype.constructor = ObjectSetOptionalitySpecContext;

ObjectSetOptionalitySpecContext.prototype.OPTIONAL_LITERAL = function() {
    return this.getToken(ASNParser.OPTIONAL_LITERAL, 0);
};

ObjectSetOptionalitySpecContext.prototype.DEFAULT_LITERAL = function() {
    return this.getToken(ASNParser.DEFAULT_LITERAL, 0);
};

ObjectSetOptionalitySpecContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

ObjectSetOptionalitySpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectSetOptionalitySpec(this);
	}
};

ObjectSetOptionalitySpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectSetOptionalitySpec(this);
	}
};




ASNParser.ObjectSetOptionalitySpecContext = ObjectSetOptionalitySpecContext;

ASNParser.prototype.objectSetOptionalitySpec = function() {

    var localctx = new ObjectSetOptionalitySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ASNParser.RULE_objectSetOptionalitySpec);
    try {
        this.state = 838;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.OPTIONAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 835;
            this.match(ASNParser.OPTIONAL_LITERAL);
            break;
        case ASNParser.DEFAULT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 836;
            this.match(ASNParser.DEFAULT_LITERAL);
            this.state = 837;
            this.objectSet();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_typeAssignment;
    return this;
}

TypeAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssignmentContext.prototype.constructor = TypeAssignmentContext;

TypeAssignmentContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASNParser.ASSIGN_OP, 0);
};

TypeAssignmentContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

TypeAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterTypeAssignment(this);
	}
};

TypeAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitTypeAssignment(this);
	}
};




ASNParser.TypeAssignmentContext = TypeAssignmentContext;

ASNParser.prototype.typeAssignment = function() {

    var localctx = new TypeAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ASNParser.RULE_typeAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 840;
        this.match(ASNParser.ASSIGN_OP);
        this.state = 841;
        this.asnType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_valueAssignment;
    return this;
}

ValueAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueAssignmentContext.prototype.constructor = ValueAssignmentContext;

ValueAssignmentContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ValueAssignmentContext.prototype.ASSIGN_OP = function() {
    return this.getToken(ASNParser.ASSIGN_OP, 0);
};

ValueAssignmentContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ValueAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterValueAssignment(this);
	}
};

ValueAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitValueAssignment(this);
	}
};




ASNParser.ValueAssignmentContext = ValueAssignmentContext;

ASNParser.prototype.valueAssignment = function() {

    var localctx = new ValueAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ASNParser.RULE_valueAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 843;
        this.asnType();
        this.state = 844;
        this.match(ASNParser.ASSIGN_OP);
        this.state = 845;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AsnTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_asnType;
    return this;
}

AsnTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsnTypeContext.prototype.constructor = AsnTypeContext;

AsnTypeContext.prototype.builtinType = function() {
    return this.getTypedRuleContext(BuiltinTypeContext,0);
};

AsnTypeContext.prototype.referencedType = function() {
    return this.getTypedRuleContext(ReferencedTypeContext,0);
};

AsnTypeContext.prototype.constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstraintContext);
    } else {
        return this.getTypedRuleContext(ConstraintContext,i);
    }
};

AsnTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterAsnType(this);
	}
};

AsnTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitAsnType(this);
	}
};




ASNParser.AsnTypeContext = AsnTypeContext;

ASNParser.prototype.asnType = function() {

    var localctx = new AsnTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ASNParser.RULE_asnType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 849;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.state = 847;
            this.builtinType();
            break;

        case 2:
            this.state = 848;
            this.referencedType();
            break;

        }
        this.state = 854;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 851;
                this.constraint(); 
            }
            this.state = 856;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BuiltinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_builtinType;
    return this;
}

BuiltinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuiltinTypeContext.prototype.constructor = BuiltinTypeContext;

BuiltinTypeContext.prototype.octetStringType = function() {
    return this.getTypedRuleContext(OctetStringTypeContext,0);
};

BuiltinTypeContext.prototype.bitStringType = function() {
    return this.getTypedRuleContext(BitStringTypeContext,0);
};

BuiltinTypeContext.prototype.choiceType = function() {
    return this.getTypedRuleContext(ChoiceTypeContext,0);
};

BuiltinTypeContext.prototype.enumeratedType = function() {
    return this.getTypedRuleContext(EnumeratedTypeContext,0);
};

BuiltinTypeContext.prototype.integerType = function() {
    return this.getTypedRuleContext(IntegerTypeContext,0);
};

BuiltinTypeContext.prototype.sequenceType = function() {
    return this.getTypedRuleContext(SequenceTypeContext,0);
};

BuiltinTypeContext.prototype.sequenceOfType = function() {
    return this.getTypedRuleContext(SequenceOfTypeContext,0);
};

BuiltinTypeContext.prototype.setType = function() {
    return this.getTypedRuleContext(SetTypeContext,0);
};

BuiltinTypeContext.prototype.setOfType = function() {
    return this.getTypedRuleContext(SetOfTypeContext,0);
};

BuiltinTypeContext.prototype.objectidentifiertype = function() {
    return this.getTypedRuleContext(ObjectidentifiertypeContext,0);
};

BuiltinTypeContext.prototype.objectClassFieldType = function() {
    return this.getTypedRuleContext(ObjectClassFieldTypeContext,0);
};

BuiltinTypeContext.prototype.BOOLEAN_LITERAL = function() {
    return this.getToken(ASNParser.BOOLEAN_LITERAL, 0);
};

BuiltinTypeContext.prototype.NULL_LITERAL = function() {
    return this.getToken(ASNParser.NULL_LITERAL, 0);
};

BuiltinTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterBuiltinType(this);
	}
};

BuiltinTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitBuiltinType(this);
	}
};




ASNParser.BuiltinTypeContext = BuiltinTypeContext;

ASNParser.prototype.builtinType = function() {

    var localctx = new BuiltinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ASNParser.RULE_builtinType);
    try {
        this.state = 870;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 857;
            this.octetStringType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 858;
            this.bitStringType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 859;
            this.choiceType();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 860;
            this.enumeratedType();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 861;
            this.integerType();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 862;
            this.sequenceType();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 863;
            this.sequenceOfType();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 864;
            this.setType();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 865;
            this.setOfType();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 866;
            this.objectidentifiertype();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 867;
            this.objectClassFieldType();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 868;
            this.match(ASNParser.BOOLEAN_LITERAL);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 869;
            this.match(ASNParser.NULL_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectClassFieldTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectClassFieldType;
    return this;
}

ObjectClassFieldTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectClassFieldTypeContext.prototype.constructor = ObjectClassFieldTypeContext;

ObjectClassFieldTypeContext.prototype.definedObjectClass = function() {
    return this.getTypedRuleContext(DefinedObjectClassContext,0);
};

ObjectClassFieldTypeContext.prototype.DOT = function() {
    return this.getToken(ASNParser.DOT, 0);
};

ObjectClassFieldTypeContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};

ObjectClassFieldTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectClassFieldType(this);
	}
};

ObjectClassFieldTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectClassFieldType(this);
	}
};




ASNParser.ObjectClassFieldTypeContext = ObjectClassFieldTypeContext;

ASNParser.prototype.objectClassFieldType = function() {

    var localctx = new ObjectClassFieldTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ASNParser.RULE_objectClassFieldType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 872;
        this.definedObjectClass();
        this.state = 873;
        this.match(ASNParser.DOT);
        this.state = 874;
        this.fieldName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_setType;
    return this;
}

SetTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetTypeContext.prototype.constructor = SetTypeContext;

SetTypeContext.prototype.SET_LITERAL = function() {
    return this.getToken(ASNParser.SET_LITERAL, 0);
};

SetTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

SetTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

SetTypeContext.prototype.extensionAndException = function() {
    return this.getTypedRuleContext(ExtensionAndExceptionContext,0);
};

SetTypeContext.prototype.optionalExtensionMarker = function() {
    return this.getTypedRuleContext(OptionalExtensionMarkerContext,0);
};

SetTypeContext.prototype.componentTypeLists = function() {
    return this.getTypedRuleContext(ComponentTypeListsContext,0);
};

SetTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSetType(this);
	}
};

SetTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSetType(this);
	}
};




ASNParser.SetTypeContext = SetTypeContext;

ASNParser.prototype.setType = function() {

    var localctx = new SetTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ASNParser.RULE_setType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.match(ASNParser.SET_LITERAL);
        this.state = 877;
        this.match(ASNParser.L_BRACE);
        this.state = 882;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 878;
            this.extensionAndException();
            this.state = 879;
            this.optionalExtensionMarker();

        } else if(la_===2) {
            this.state = 881;
            this.componentTypeLists();

        }
        this.state = 884;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetOfTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_setOfType;
    return this;
}

SetOfTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetOfTypeContext.prototype.constructor = SetOfTypeContext;

SetOfTypeContext.prototype.SET_LITERAL = function() {
    return this.getToken(ASNParser.SET_LITERAL, 0);
};

SetOfTypeContext.prototype.OF_LITERAL = function() {
    return this.getToken(ASNParser.OF_LITERAL, 0);
};

SetOfTypeContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

SetOfTypeContext.prototype.namedType = function() {
    return this.getTypedRuleContext(NamedTypeContext,0);
};

SetOfTypeContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

SetOfTypeContext.prototype.sizeConstraint = function() {
    return this.getTypedRuleContext(SizeConstraintContext,0);
};

SetOfTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSetOfType(this);
	}
};

SetOfTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSetOfType(this);
	}
};




ASNParser.SetOfTypeContext = SetOfTypeContext;

ASNParser.prototype.setOfType = function() {

    var localctx = new SetOfTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ASNParser.RULE_setOfType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 886;
        this.match(ASNParser.SET_LITERAL);
        this.state = 889;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case ASNParser.L_PARAN:
        	this.state = 887;
        	this.constraint();
        	break;
        case ASNParser.SIZE_LITERAL:
        	this.state = 888;
        	this.sizeConstraint();
        	break;
        case ASNParser.OF_LITERAL:
        	break;
        default:
        	break;
        }
        this.state = 891;
        this.match(ASNParser.OF_LITERAL);
        this.state = 894;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.state = 892;
            this.asnType();
            break;

        case 2:
            this.state = 893;
            this.namedType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferencedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_referencedType;
    return this;
}

ReferencedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferencedTypeContext.prototype.constructor = ReferencedTypeContext;

ReferencedTypeContext.prototype.definedType = function() {
    return this.getTypedRuleContext(DefinedTypeContext,0);
};

ReferencedTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterReferencedType(this);
	}
};

ReferencedTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitReferencedType(this);
	}
};




ASNParser.ReferencedTypeContext = ReferencedTypeContext;

ASNParser.prototype.referencedType = function() {

    var localctx = new ReferencedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ASNParser.RULE_referencedType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896;
        this.definedType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_definedType;
    return this;
}

DefinedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinedTypeContext.prototype.constructor = DefinedTypeContext;

DefinedTypeContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.IDENTIFIER);
    } else {
        return this.getToken(ASNParser.IDENTIFIER, i);
    }
};


DefinedTypeContext.prototype.DOT = function() {
    return this.getToken(ASNParser.DOT, 0);
};

DefinedTypeContext.prototype.actualParameterList = function() {
    return this.getTypedRuleContext(ActualParameterListContext,0);
};

DefinedTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterDefinedType(this);
	}
};

DefinedTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitDefinedType(this);
	}
};




ASNParser.DefinedTypeContext = DefinedTypeContext;

ASNParser.prototype.definedType = function() {

    var localctx = new DefinedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ASNParser.RULE_definedType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 898;
        this.match(ASNParser.IDENTIFIER);
        this.state = 901;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.DOT) {
            this.state = 899;
            this.match(ASNParser.DOT);
            this.state = 900;
            this.match(ASNParser.IDENTIFIER);
        }

        this.state = 904;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
        if(la_===1) {
            this.state = 903;
            this.actualParameterList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_constraint;
    return this;
}

ConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintContext.prototype.constructor = ConstraintContext;

ConstraintContext.prototype.L_PARAN = function() {
    return this.getToken(ASNParser.L_PARAN, 0);
};

ConstraintContext.prototype.constraintSpec = function() {
    return this.getTypedRuleContext(ConstraintSpecContext,0);
};

ConstraintContext.prototype.R_PARAN = function() {
    return this.getToken(ASNParser.R_PARAN, 0);
};

ConstraintContext.prototype.exceptionSpec = function() {
    return this.getTypedRuleContext(ExceptionSpecContext,0);
};

ConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterConstraint(this);
	}
};

ConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitConstraint(this);
	}
};




ASNParser.ConstraintContext = ConstraintContext;

ASNParser.prototype.constraint = function() {

    var localctx = new ConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ASNParser.RULE_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 906;
        this.match(ASNParser.L_PARAN);
        this.state = 907;
        this.constraintSpec();
        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.EXCLAM) {
            this.state = 908;
            this.exceptionSpec();
        }

        this.state = 911;
        this.match(ASNParser.R_PARAN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_constraintSpec;
    return this;
}

ConstraintSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintSpecContext.prototype.constructor = ConstraintSpecContext;

ConstraintSpecContext.prototype.generalConstraint = function() {
    return this.getTypedRuleContext(GeneralConstraintContext,0);
};

ConstraintSpecContext.prototype.subtypeConstraint = function() {
    return this.getTypedRuleContext(SubtypeConstraintContext,0);
};

ConstraintSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterConstraintSpec(this);
	}
};

ConstraintSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitConstraintSpec(this);
	}
};




ASNParser.ConstraintSpecContext = ConstraintSpecContext;

ASNParser.prototype.constraintSpec = function() {

    var localctx = new ConstraintSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ASNParser.RULE_constraintSpec);
    try {
        this.state = 915;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 913;
            this.generalConstraint();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 914;
            this.subtypeConstraint();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserDefinedConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_userDefinedConstraint;
    return this;
}

UserDefinedConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserDefinedConstraintContext.prototype.constructor = UserDefinedConstraintContext;

UserDefinedConstraintContext.prototype.CONSTRAINED_LITERAL = function() {
    return this.getToken(ASNParser.CONSTRAINED_LITERAL, 0);
};

UserDefinedConstraintContext.prototype.BY_LITERAL = function() {
    return this.getToken(ASNParser.BY_LITERAL, 0);
};

UserDefinedConstraintContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

UserDefinedConstraintContext.prototype.userDefinedConstraintParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserDefinedConstraintParameterContext);
    } else {
        return this.getTypedRuleContext(UserDefinedConstraintParameterContext,i);
    }
};

UserDefinedConstraintContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

UserDefinedConstraintContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


UserDefinedConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterUserDefinedConstraint(this);
	}
};

UserDefinedConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitUserDefinedConstraint(this);
	}
};




ASNParser.UserDefinedConstraintContext = UserDefinedConstraintContext;

ASNParser.prototype.userDefinedConstraint = function() {

    var localctx = new UserDefinedConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ASNParser.RULE_userDefinedConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917;
        this.match(ASNParser.CONSTRAINED_LITERAL);
        this.state = 918;
        this.match(ASNParser.BY_LITERAL);
        this.state = 919;
        this.match(ASNParser.L_BRACE);
        this.state = 920;
        this.userDefinedConstraintParameter();
        this.state = 925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.COMMA) {
            this.state = 921;
            this.match(ASNParser.COMMA);
            this.state = 922;
            this.userDefinedConstraintParameter();
            this.state = 927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 928;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GeneralConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_generalConstraint;
    return this;
}

GeneralConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneralConstraintContext.prototype.constructor = GeneralConstraintContext;

GeneralConstraintContext.prototype.userDefinedConstraint = function() {
    return this.getTypedRuleContext(UserDefinedConstraintContext,0);
};

GeneralConstraintContext.prototype.tableConstraint = function() {
    return this.getTypedRuleContext(TableConstraintContext,0);
};

GeneralConstraintContext.prototype.contentsConstraint = function() {
    return this.getTypedRuleContext(ContentsConstraintContext,0);
};

GeneralConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterGeneralConstraint(this);
	}
};

GeneralConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitGeneralConstraint(this);
	}
};




ASNParser.GeneralConstraintContext = GeneralConstraintContext;

ASNParser.prototype.generalConstraint = function() {

    var localctx = new GeneralConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ASNParser.RULE_generalConstraint);
    try {
        this.state = 933;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.CONSTRAINED_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 930;
            this.userDefinedConstraint();
            break;
        case ASNParser.L_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 931;
            this.tableConstraint();
            break;
        case ASNParser.CONTAINING_LITERAL:
        case ASNParser.WITH_LITERAL:
        case ASNParser.ENCODED_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 932;
            this.contentsConstraint();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserDefinedConstraintParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_userDefinedConstraintParameter;
    return this;
}

UserDefinedConstraintParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserDefinedConstraintParameterContext.prototype.constructor = UserDefinedConstraintParameterContext;

UserDefinedConstraintParameterContext.prototype.governor = function() {
    return this.getTypedRuleContext(GovernorContext,0);
};

UserDefinedConstraintParameterContext.prototype.COLON = function() {
    return this.getToken(ASNParser.COLON, 0);
};

UserDefinedConstraintParameterContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

UserDefinedConstraintParameterContext.prototype.valueSet = function() {
    return this.getTypedRuleContext(ValueSetContext,0);
};

UserDefinedConstraintParameterContext.prototype.object = function() {
    return this.getTypedRuleContext(ObjectContext,0);
};

UserDefinedConstraintParameterContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

UserDefinedConstraintParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterUserDefinedConstraintParameter(this);
	}
};

UserDefinedConstraintParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitUserDefinedConstraintParameter(this);
	}
};




ASNParser.UserDefinedConstraintParameterContext = UserDefinedConstraintParameterContext;

ASNParser.prototype.userDefinedConstraintParameter = function() {

    var localctx = new UserDefinedConstraintParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ASNParser.RULE_userDefinedConstraintParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 935;
        this.governor();
        this.state = 941;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        if(la_===1) {
            this.state = 936;
            this.match(ASNParser.COLON);
            this.state = 937;
            this.value();

        } else if(la_===2) {
            this.state = 938;
            this.valueSet();

        } else if(la_===3) {
            this.state = 939;
            this.object();

        } else if(la_===4) {
            this.state = 940;
            this.objectSet();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_tableConstraint;
    return this;
}

TableConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableConstraintContext.prototype.constructor = TableConstraintContext;

TableConstraintContext.prototype.componentRelationConstraint = function() {
    return this.getTypedRuleContext(ComponentRelationConstraintContext,0);
};

TableConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterTableConstraint(this);
	}
};

TableConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitTableConstraint(this);
	}
};




ASNParser.TableConstraintContext = TableConstraintContext;

ASNParser.prototype.tableConstraint = function() {

    var localctx = new TableConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ASNParser.RULE_tableConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 943;
        this.componentRelationConstraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleTableConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_simpleTableConstraint;
    return this;
}

SimpleTableConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleTableConstraintContext.prototype.constructor = SimpleTableConstraintContext;

SimpleTableConstraintContext.prototype.objectSet = function() {
    return this.getTypedRuleContext(ObjectSetContext,0);
};

SimpleTableConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSimpleTableConstraint(this);
	}
};

SimpleTableConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSimpleTableConstraint(this);
	}
};




ASNParser.SimpleTableConstraintContext = SimpleTableConstraintContext;

ASNParser.prototype.simpleTableConstraint = function() {

    var localctx = new SimpleTableConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ASNParser.RULE_simpleTableConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 945;
        this.objectSet();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContentsConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_contentsConstraint;
    return this;
}

ContentsConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContentsConstraintContext.prototype.constructor = ContentsConstraintContext;

ContentsConstraintContext.prototype.CONTAINING_LITERAL = function() {
    return this.getToken(ASNParser.CONTAINING_LITERAL, 0);
};

ContentsConstraintContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ContentsConstraintContext.prototype.ENCODED_LITERAL = function() {
    return this.getToken(ASNParser.ENCODED_LITERAL, 0);
};

ContentsConstraintContext.prototype.BY_LITERAL = function() {
    return this.getToken(ASNParser.BY_LITERAL, 0);
};

ContentsConstraintContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ContentsConstraintContext.prototype.WITH_LITERAL = function() {
    return this.getToken(ASNParser.WITH_LITERAL, 0);
};

ContentsConstraintContext.prototype.COMPONENTS_LITERAL = function() {
    return this.getToken(ASNParser.COMPONENTS_LITERAL, 0);
};

ContentsConstraintContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

ContentsConstraintContext.prototype.componentPresenceLists = function() {
    return this.getTypedRuleContext(ComponentPresenceListsContext,0);
};

ContentsConstraintContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

ContentsConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterContentsConstraint(this);
	}
};

ContentsConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitContentsConstraint(this);
	}
};




ASNParser.ContentsConstraintContext = ContentsConstraintContext;

ASNParser.prototype.contentsConstraint = function() {

    var localctx = new ContentsConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ASNParser.RULE_contentsConstraint);
    try {
        this.state = 964;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 947;
            this.match(ASNParser.CONTAINING_LITERAL);
            this.state = 948;
            this.asnType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 949;
            this.match(ASNParser.ENCODED_LITERAL);
            this.state = 950;
            this.match(ASNParser.BY_LITERAL);
            this.state = 951;
            this.value();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 952;
            this.match(ASNParser.CONTAINING_LITERAL);
            this.state = 953;
            this.asnType();
            this.state = 954;
            this.match(ASNParser.ENCODED_LITERAL);
            this.state = 955;
            this.match(ASNParser.BY_LITERAL);
            this.state = 956;
            this.value();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 958;
            this.match(ASNParser.WITH_LITERAL);
            this.state = 959;
            this.match(ASNParser.COMPONENTS_LITERAL);
            this.state = 960;
            this.match(ASNParser.L_BRACE);
            this.state = 961;
            this.componentPresenceLists();
            this.state = 962;
            this.match(ASNParser.R_BRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentPresenceListsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_componentPresenceLists;
    return this;
}

ComponentPresenceListsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentPresenceListsContext.prototype.constructor = ComponentPresenceListsContext;

ComponentPresenceListsContext.prototype.componentPresenceList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentPresenceListContext);
    } else {
        return this.getTypedRuleContext(ComponentPresenceListContext,i);
    }
};

ComponentPresenceListsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ComponentPresenceListsContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASNParser.ELLIPSIS, 0);
};

ComponentPresenceListsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterComponentPresenceLists(this);
	}
};

ComponentPresenceListsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitComponentPresenceLists(this);
	}
};




ASNParser.ComponentPresenceListsContext = ComponentPresenceListsContext;

ASNParser.prototype.componentPresenceLists = function() {

    var localctx = new ComponentPresenceListsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ASNParser.RULE_componentPresenceLists);
    var _la = 0; // Token type
    try {
        this.state = 982;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.R_BRACE:
        case ASNParser.COMMA:
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.IDENTIFIER) {
                this.state = 966;
                this.componentPresenceList();
            }

            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.COMMA) {
                this.state = 969;
                this.match(ASNParser.COMMA);
                this.state = 970;
                this.match(ASNParser.ELLIPSIS);
                this.state = 973;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ASNParser.COMMA) {
                    this.state = 971;
                    this.match(ASNParser.COMMA);
                    this.state = 972;
                    this.componentPresenceList();
                }

            }

            break;
        case ASNParser.ELLIPSIS:
            this.enterOuterAlt(localctx, 2);
            this.state = 977;
            this.match(ASNParser.ELLIPSIS);
            this.state = 980;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.COMMA) {
                this.state = 978;
                this.match(ASNParser.COMMA);
                this.state = 979;
                this.componentPresenceList();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentPresenceListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_componentPresenceList;
    return this;
}

ComponentPresenceListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentPresenceListContext.prototype.constructor = ComponentPresenceListContext;

ComponentPresenceListContext.prototype.componentPresence = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentPresenceContext);
    } else {
        return this.getTypedRuleContext(ComponentPresenceContext,i);
    }
};

ComponentPresenceListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ComponentPresenceListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterComponentPresenceList(this);
	}
};

ComponentPresenceListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitComponentPresenceList(this);
	}
};




ASNParser.ComponentPresenceListContext = ComponentPresenceListContext;

ASNParser.prototype.componentPresenceList = function() {

    var localctx = new ComponentPresenceListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ASNParser.RULE_componentPresenceList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 984;
        this.componentPresence();
        this.state = 989;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,109,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 985;
                this.match(ASNParser.COMMA);
                this.state = 986;
                this.componentPresence(); 
            }
            this.state = 991;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,109,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentPresenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_componentPresence;
    return this;
}

ComponentPresenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentPresenceContext.prototype.constructor = ComponentPresenceContext;

ComponentPresenceContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

ComponentPresenceContext.prototype.ABSENT_LITERAL = function() {
    return this.getToken(ASNParser.ABSENT_LITERAL, 0);
};

ComponentPresenceContext.prototype.PRESENT_LITERAL = function() {
    return this.getToken(ASNParser.PRESENT_LITERAL, 0);
};

ComponentPresenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterComponentPresence(this);
	}
};

ComponentPresenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitComponentPresence(this);
	}
};




ASNParser.ComponentPresenceContext = ComponentPresenceContext;

ASNParser.prototype.componentPresence = function() {

    var localctx = new ComponentPresenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ASNParser.RULE_componentPresence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 992;
        this.match(ASNParser.IDENTIFIER);
        this.state = 993;
        _la = this._input.LA(1);
        if(!(_la===ASNParser.PRESENT_LITERAL || _la===ASNParser.ABSENT_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubtypeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_subtypeConstraint;
    return this;
}

SubtypeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubtypeConstraintContext.prototype.constructor = SubtypeConstraintContext;

SubtypeConstraintContext.prototype.elementSetSpecs = function() {
    return this.getTypedRuleContext(ElementSetSpecsContext,0);
};

SubtypeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSubtypeConstraint(this);
	}
};

SubtypeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSubtypeConstraint(this);
	}
};




ASNParser.SubtypeConstraintContext = SubtypeConstraintContext;

ASNParser.prototype.subtypeConstraint = function() {

    var localctx = new SubtypeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ASNParser.RULE_subtypeConstraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 995;
        this.elementSetSpecs();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.builtinValue = function() {
    return this.getTypedRuleContext(BuiltinValueContext,0);
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitValue(this);
	}
};




ASNParser.ValueContext = ValueContext;

ASNParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ASNParser.RULE_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.builtinValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BuiltinValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_builtinValue;
    return this;
}

BuiltinValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuiltinValueContext.prototype.constructor = BuiltinValueContext;

BuiltinValueContext.prototype.enumeratedValue = function() {
    return this.getTypedRuleContext(EnumeratedValueContext,0);
};

BuiltinValueContext.prototype.integerValue = function() {
    return this.getTypedRuleContext(IntegerValueContext,0);
};

BuiltinValueContext.prototype.choiceValue = function() {
    return this.getTypedRuleContext(ChoiceValueContext,0);
};

BuiltinValueContext.prototype.objectIdentifierValue = function() {
    return this.getTypedRuleContext(ObjectIdentifierValueContext,0);
};

BuiltinValueContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};

BuiltinValueContext.prototype.CSTRING = function() {
    return this.getToken(ASNParser.CSTRING, 0);
};

BuiltinValueContext.prototype.BSTRING = function() {
    return this.getToken(ASNParser.BSTRING, 0);
};

BuiltinValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterBuiltinValue(this);
	}
};

BuiltinValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitBuiltinValue(this);
	}
};




ASNParser.BuiltinValueContext = BuiltinValueContext;

ASNParser.prototype.builtinValue = function() {

    var localctx = new BuiltinValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ASNParser.RULE_builtinValue);
    try {
        this.state = 1006;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 999;
            this.enumeratedValue();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1000;
            this.integerValue();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1001;
            this.choiceValue();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1002;
            this.objectIdentifierValue();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1003;
            this.booleanValue();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1004;
            this.match(ASNParser.CSTRING);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1005;
            this.match(ASNParser.BSTRING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectIdentifierValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectIdentifierValue;
    return this;
}

ObjectIdentifierValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectIdentifierValueContext.prototype.constructor = ObjectIdentifierValueContext;

ObjectIdentifierValueContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

ObjectIdentifierValueContext.prototype.objIdComponentsList = function() {
    return this.getTypedRuleContext(ObjIdComponentsListContext,0);
};

ObjectIdentifierValueContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

ObjectIdentifierValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectIdentifierValue(this);
	}
};

ObjectIdentifierValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectIdentifierValue(this);
	}
};




ASNParser.ObjectIdentifierValueContext = ObjectIdentifierValueContext;

ASNParser.prototype.objectIdentifierValue = function() {

    var localctx = new ObjectIdentifierValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ASNParser.RULE_objectIdentifierValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1008;
        this.match(ASNParser.L_BRACE);
        this.state = 1009;
        this.objIdComponentsList();
        this.state = 1010;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjIdComponentsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objIdComponentsList;
    return this;
}

ObjIdComponentsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjIdComponentsListContext.prototype.constructor = ObjIdComponentsListContext;

ObjIdComponentsListContext.prototype.objIdComponents = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ObjIdComponentsContext);
    } else {
        return this.getTypedRuleContext(ObjIdComponentsContext,i);
    }
};

ObjIdComponentsListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjIdComponentsList(this);
	}
};

ObjIdComponentsListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjIdComponentsList(this);
	}
};




ASNParser.ObjIdComponentsListContext = ObjIdComponentsListContext;

ASNParser.prototype.objIdComponentsList = function() {

    var localctx = new ObjIdComponentsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ASNParser.RULE_objIdComponentsList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1012;
        this.objIdComponents();
        this.state = 1016;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.NUMBER || _la===ASNParser.IDENTIFIER) {
            this.state = 1013;
            this.objIdComponents();
            this.state = 1018;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjIdComponentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objIdComponents;
    return this;
}

ObjIdComponentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjIdComponentsContext.prototype.constructor = ObjIdComponentsContext;

ObjIdComponentsContext.prototype.NUMBER = function() {
    return this.getToken(ASNParser.NUMBER, 0);
};

ObjIdComponentsContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

ObjIdComponentsContext.prototype.L_PARAN = function() {
    return this.getToken(ASNParser.L_PARAN, 0);
};

ObjIdComponentsContext.prototype.R_PARAN = function() {
    return this.getToken(ASNParser.R_PARAN, 0);
};

ObjIdComponentsContext.prototype.definedValue = function() {
    return this.getTypedRuleContext(DefinedValueContext,0);
};

ObjIdComponentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjIdComponents(this);
	}
};

ObjIdComponentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjIdComponents(this);
	}
};




ASNParser.ObjIdComponentsContext = ObjIdComponentsContext;

ASNParser.prototype.objIdComponents = function() {

    var localctx = new ObjIdComponentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ASNParser.RULE_objIdComponents);
    var _la = 0; // Token type
    try {
        this.state = 1030;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1019;
            this.match(ASNParser.NUMBER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1020;
            this.match(ASNParser.IDENTIFIER);
            this.state = 1027;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.L_PARAN) {
                this.state = 1021;
                this.match(ASNParser.L_PARAN);
                this.state = 1024;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case ASNParser.NUMBER:
                    this.state = 1022;
                    this.match(ASNParser.NUMBER);
                    break;
                case ASNParser.IDENTIFIER:
                    this.state = 1023;
                    this.definedValue();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1026;
                this.match(ASNParser.R_PARAN);
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1029;
            this.definedValue();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntegerValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_integerValue;
    return this;
}

IntegerValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerValueContext.prototype.constructor = IntegerValueContext;

IntegerValueContext.prototype.signedNumber = function() {
    return this.getTypedRuleContext(SignedNumberContext,0);
};

IntegerValueContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

IntegerValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterIntegerValue(this);
	}
};

IntegerValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitIntegerValue(this);
	}
};




ASNParser.IntegerValueContext = IntegerValueContext;

ASNParser.prototype.integerValue = function() {

    var localctx = new IntegerValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ASNParser.RULE_integerValue);
    try {
        this.state = 1034;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.MINUS:
        case ASNParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1032;
            this.signedNumber();
            break;
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1033;
            this.match(ASNParser.IDENTIFIER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChoiceValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_choiceValue;
    return this;
}

ChoiceValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoiceValueContext.prototype.constructor = ChoiceValueContext;

ChoiceValueContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

ChoiceValueContext.prototype.COLON = function() {
    return this.getToken(ASNParser.COLON, 0);
};

ChoiceValueContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ChoiceValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterChoiceValue(this);
	}
};

ChoiceValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitChoiceValue(this);
	}
};




ASNParser.ChoiceValueContext = ChoiceValueContext;

ASNParser.prototype.choiceValue = function() {

    var localctx = new ChoiceValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ASNParser.RULE_choiceValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1036;
        this.match(ASNParser.IDENTIFIER);
        this.state = 1037;
        this.match(ASNParser.COLON);
        this.state = 1038;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumeratedValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_enumeratedValue;
    return this;
}

EnumeratedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratedValueContext.prototype.constructor = EnumeratedValueContext;

EnumeratedValueContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

EnumeratedValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterEnumeratedValue(this);
	}
};

EnumeratedValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitEnumeratedValue(this);
	}
};




ASNParser.EnumeratedValueContext = EnumeratedValueContext;

ASNParser.prototype.enumeratedValue = function() {

    var localctx = new EnumeratedValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ASNParser.RULE_enumeratedValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1040;
        this.match(ASNParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignedNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_signedNumber;
    return this;
}

SignedNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignedNumberContext.prototype.constructor = SignedNumberContext;

SignedNumberContext.prototype.NUMBER = function() {
    return this.getToken(ASNParser.NUMBER, 0);
};

SignedNumberContext.prototype.MINUS = function() {
    return this.getToken(ASNParser.MINUS, 0);
};

SignedNumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSignedNumber(this);
	}
};

SignedNumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSignedNumber(this);
	}
};




ASNParser.SignedNumberContext = SignedNumberContext;

ASNParser.prototype.signedNumber = function() {

    var localctx = new SignedNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ASNParser.RULE_signedNumber);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1043;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.MINUS) {
            this.state = 1042;
            this.match(ASNParser.MINUS);
        }

        this.state = 1045;
        this.match(ASNParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChoiceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_choiceType;
    return this;
}

ChoiceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoiceTypeContext.prototype.constructor = ChoiceTypeContext;

ChoiceTypeContext.prototype.CHOICE_LITERAL = function() {
    return this.getToken(ASNParser.CHOICE_LITERAL, 0);
};

ChoiceTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

ChoiceTypeContext.prototype.alternativeTypeLists = function() {
    return this.getTypedRuleContext(AlternativeTypeListsContext,0);
};

ChoiceTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

ChoiceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterChoiceType(this);
	}
};

ChoiceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitChoiceType(this);
	}
};




ASNParser.ChoiceTypeContext = ChoiceTypeContext;

ASNParser.prototype.choiceType = function() {

    var localctx = new ChoiceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ASNParser.RULE_choiceType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1047;
        this.match(ASNParser.CHOICE_LITERAL);
        this.state = 1048;
        this.match(ASNParser.L_BRACE);
        this.state = 1049;
        this.alternativeTypeLists();
        this.state = 1050;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlternativeTypeListsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_alternativeTypeLists;
    return this;
}

AlternativeTypeListsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlternativeTypeListsContext.prototype.constructor = AlternativeTypeListsContext;

AlternativeTypeListsContext.prototype.rootAlternativeTypeList = function() {
    return this.getTypedRuleContext(RootAlternativeTypeListContext,0);
};

AlternativeTypeListsContext.prototype.COMMA = function() {
    return this.getToken(ASNParser.COMMA, 0);
};

AlternativeTypeListsContext.prototype.extensionAndException = function() {
    return this.getTypedRuleContext(ExtensionAndExceptionContext,0);
};

AlternativeTypeListsContext.prototype.extensionAdditionAlternatives = function() {
    return this.getTypedRuleContext(ExtensionAdditionAlternativesContext,0);
};

AlternativeTypeListsContext.prototype.optionalExtensionMarker = function() {
    return this.getTypedRuleContext(OptionalExtensionMarkerContext,0);
};

AlternativeTypeListsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterAlternativeTypeLists(this);
	}
};

AlternativeTypeListsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitAlternativeTypeLists(this);
	}
};




ASNParser.AlternativeTypeListsContext = AlternativeTypeListsContext;

ASNParser.prototype.alternativeTypeLists = function() {

    var localctx = new AlternativeTypeListsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ASNParser.RULE_alternativeTypeLists);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1052;
        this.rootAlternativeTypeList();
        this.state = 1058;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.COMMA) {
            this.state = 1053;
            this.match(ASNParser.COMMA);
            this.state = 1054;
            this.extensionAndException();
            this.state = 1055;
            this.extensionAdditionAlternatives();
            this.state = 1056;
            this.optionalExtensionMarker();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionAlternativesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionAdditionAlternatives;
    return this;
}

ExtensionAdditionAlternativesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionAlternativesContext.prototype.constructor = ExtensionAdditionAlternativesContext;

ExtensionAdditionAlternativesContext.prototype.COMMA = function() {
    return this.getToken(ASNParser.COMMA, 0);
};

ExtensionAdditionAlternativesContext.prototype.extensionAdditionAlternativesList = function() {
    return this.getTypedRuleContext(ExtensionAdditionAlternativesListContext,0);
};

ExtensionAdditionAlternativesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionAdditionAlternatives(this);
	}
};

ExtensionAdditionAlternativesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionAdditionAlternatives(this);
	}
};




ASNParser.ExtensionAdditionAlternativesContext = ExtensionAdditionAlternativesContext;

ASNParser.prototype.extensionAdditionAlternatives = function() {

    var localctx = new ExtensionAdditionAlternativesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ASNParser.RULE_extensionAdditionAlternatives);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1062;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        if(la_===1) {
            this.state = 1060;
            this.match(ASNParser.COMMA);
            this.state = 1061;
            this.extensionAdditionAlternativesList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionAlternativesListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionAdditionAlternativesList;
    return this;
}

ExtensionAdditionAlternativesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionAlternativesListContext.prototype.constructor = ExtensionAdditionAlternativesListContext;

ExtensionAdditionAlternativesListContext.prototype.extensionAdditionAlternative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExtensionAdditionAlternativeContext);
    } else {
        return this.getTypedRuleContext(ExtensionAdditionAlternativeContext,i);
    }
};

ExtensionAdditionAlternativesListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ExtensionAdditionAlternativesListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionAdditionAlternativesList(this);
	}
};

ExtensionAdditionAlternativesListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionAdditionAlternativesList(this);
	}
};




ASNParser.ExtensionAdditionAlternativesListContext = ExtensionAdditionAlternativesListContext;

ASNParser.prototype.extensionAdditionAlternativesList = function() {

    var localctx = new ExtensionAdditionAlternativesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ASNParser.RULE_extensionAdditionAlternativesList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1064;
        this.extensionAdditionAlternative();
        this.state = 1069;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1065;
                this.match(ASNParser.COMMA);
                this.state = 1066;
                this.extensionAdditionAlternative(); 
            }
            this.state = 1071;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionAlternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionAdditionAlternative;
    return this;
}

ExtensionAdditionAlternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionAlternativeContext.prototype.constructor = ExtensionAdditionAlternativeContext;

ExtensionAdditionAlternativeContext.prototype.extensionAdditionAlternativesGroup = function() {
    return this.getTypedRuleContext(ExtensionAdditionAlternativesGroupContext,0);
};

ExtensionAdditionAlternativeContext.prototype.namedType = function() {
    return this.getTypedRuleContext(NamedTypeContext,0);
};

ExtensionAdditionAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionAdditionAlternative(this);
	}
};

ExtensionAdditionAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionAdditionAlternative(this);
	}
};




ASNParser.ExtensionAdditionAlternativeContext = ExtensionAdditionAlternativeContext;

ASNParser.prototype.extensionAdditionAlternative = function() {

    var localctx = new ExtensionAdditionAlternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ASNParser.RULE_extensionAdditionAlternative);
    try {
        this.state = 1074;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.DOUBLE_L_BRACKET:
            this.enterOuterAlt(localctx, 1);
            this.state = 1072;
            this.extensionAdditionAlternativesGroup();
            break;
        case ASNParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1073;
            this.namedType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExtensionAdditionAlternativesGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_extensionAdditionAlternativesGroup;
    return this;
}

ExtensionAdditionAlternativesGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtensionAdditionAlternativesGroupContext.prototype.constructor = ExtensionAdditionAlternativesGroupContext;

ExtensionAdditionAlternativesGroupContext.prototype.DOUBLE_L_BRACKET = function() {
    return this.getToken(ASNParser.DOUBLE_L_BRACKET, 0);
};

ExtensionAdditionAlternativesGroupContext.prototype.versionNumber = function() {
    return this.getTypedRuleContext(VersionNumberContext,0);
};

ExtensionAdditionAlternativesGroupContext.prototype.alternativeTypeList = function() {
    return this.getTypedRuleContext(AlternativeTypeListContext,0);
};

ExtensionAdditionAlternativesGroupContext.prototype.DOUBLE_R_BRACKET = function() {
    return this.getToken(ASNParser.DOUBLE_R_BRACKET, 0);
};

ExtensionAdditionAlternativesGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExtensionAdditionAlternativesGroup(this);
	}
};

ExtensionAdditionAlternativesGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExtensionAdditionAlternativesGroup(this);
	}
};




ASNParser.ExtensionAdditionAlternativesGroupContext = ExtensionAdditionAlternativesGroupContext;

ASNParser.prototype.extensionAdditionAlternativesGroup = function() {

    var localctx = new ExtensionAdditionAlternativesGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ASNParser.RULE_extensionAdditionAlternativesGroup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1076;
        this.match(ASNParser.DOUBLE_L_BRACKET);
        this.state = 1077;
        this.versionNumber();
        this.state = 1078;
        this.alternativeTypeList();
        this.state = 1079;
        this.match(ASNParser.DOUBLE_R_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RootAlternativeTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_rootAlternativeTypeList;
    return this;
}

RootAlternativeTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootAlternativeTypeListContext.prototype.constructor = RootAlternativeTypeListContext;

RootAlternativeTypeListContext.prototype.alternativeTypeList = function() {
    return this.getTypedRuleContext(AlternativeTypeListContext,0);
};

RootAlternativeTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterRootAlternativeTypeList(this);
	}
};

RootAlternativeTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitRootAlternativeTypeList(this);
	}
};




ASNParser.RootAlternativeTypeListContext = RootAlternativeTypeListContext;

ASNParser.prototype.rootAlternativeTypeList = function() {

    var localctx = new RootAlternativeTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, ASNParser.RULE_rootAlternativeTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1081;
        this.alternativeTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlternativeTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_alternativeTypeList;
    return this;
}

AlternativeTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlternativeTypeListContext.prototype.constructor = AlternativeTypeListContext;

AlternativeTypeListContext.prototype.namedType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedTypeContext);
    } else {
        return this.getTypedRuleContext(NamedTypeContext,i);
    }
};

AlternativeTypeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


AlternativeTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterAlternativeTypeList(this);
	}
};

AlternativeTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitAlternativeTypeList(this);
	}
};




ASNParser.AlternativeTypeListContext = AlternativeTypeListContext;

ASNParser.prototype.alternativeTypeList = function() {

    var localctx = new AlternativeTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ASNParser.RULE_alternativeTypeList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1083;
        this.namedType();
        this.state = 1088;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1084;
                this.match(ASNParser.COMMA);
                this.state = 1085;
                this.namedType(); 
            }
            this.state = 1090;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_namedType;
    return this;
}

NamedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedTypeContext.prototype.constructor = NamedTypeContext;

NamedTypeContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

NamedTypeContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

NamedTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterNamedType(this);
	}
};

NamedTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitNamedType(this);
	}
};




ASNParser.NamedTypeContext = NamedTypeContext;

ASNParser.prototype.namedType = function() {

    var localctx = new NamedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, ASNParser.RULE_namedType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1091;
        this.match(ASNParser.IDENTIFIER);
        this.state = 1092;
        this.asnType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumeratedTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_enumeratedType;
    return this;
}

EnumeratedTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratedTypeContext.prototype.constructor = EnumeratedTypeContext;

EnumeratedTypeContext.prototype.ENUMERATED_LITERAL = function() {
    return this.getToken(ASNParser.ENUMERATED_LITERAL, 0);
};

EnumeratedTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

EnumeratedTypeContext.prototype.enumerations = function() {
    return this.getTypedRuleContext(EnumerationsContext,0);
};

EnumeratedTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

EnumeratedTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterEnumeratedType(this);
	}
};

EnumeratedTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitEnumeratedType(this);
	}
};




ASNParser.EnumeratedTypeContext = EnumeratedTypeContext;

ASNParser.prototype.enumeratedType = function() {

    var localctx = new EnumeratedTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, ASNParser.RULE_enumeratedType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1094;
        this.match(ASNParser.ENUMERATED_LITERAL);
        this.state = 1095;
        this.match(ASNParser.L_BRACE);
        this.state = 1096;
        this.enumerations();
        this.state = 1097;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_enumerations;
    return this;
}

EnumerationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationsContext.prototype.constructor = EnumerationsContext;

EnumerationsContext.prototype.rootEnumeration = function() {
    return this.getTypedRuleContext(RootEnumerationContext,0);
};

EnumerationsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


EnumerationsContext.prototype.ELLIPSIS = function() {
    return this.getToken(ASNParser.ELLIPSIS, 0);
};

EnumerationsContext.prototype.exceptionSpec = function() {
    return this.getTypedRuleContext(ExceptionSpecContext,0);
};

EnumerationsContext.prototype.additionalEnumeration = function() {
    return this.getTypedRuleContext(AdditionalEnumerationContext,0);
};

EnumerationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterEnumerations(this);
	}
};

EnumerationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitEnumerations(this);
	}
};




ASNParser.EnumerationsContext = EnumerationsContext;

ASNParser.prototype.enumerations = function() {

    var localctx = new EnumerationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, ASNParser.RULE_enumerations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1099;
        this.rootEnumeration();
        this.state = 1109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.COMMA) {
            this.state = 1100;
            this.match(ASNParser.COMMA);
            this.state = 1101;
            this.match(ASNParser.ELLIPSIS);
            this.state = 1103;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.EXCLAM) {
                this.state = 1102;
                this.exceptionSpec();
            }

            this.state = 1107;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ASNParser.COMMA) {
                this.state = 1105;
                this.match(ASNParser.COMMA);
                this.state = 1106;
                this.additionalEnumeration();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RootEnumerationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_rootEnumeration;
    return this;
}

RootEnumerationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootEnumerationContext.prototype.constructor = RootEnumerationContext;

RootEnumerationContext.prototype.enumeration = function() {
    return this.getTypedRuleContext(EnumerationContext,0);
};

RootEnumerationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterRootEnumeration(this);
	}
};

RootEnumerationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitRootEnumeration(this);
	}
};




ASNParser.RootEnumerationContext = RootEnumerationContext;

ASNParser.prototype.rootEnumeration = function() {

    var localctx = new RootEnumerationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, ASNParser.RULE_rootEnumeration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1111;
        this.enumeration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_enumeration;
    return this;
}

EnumerationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationContext.prototype.constructor = EnumerationContext;

EnumerationContext.prototype.enumerationItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumerationItemContext);
    } else {
        return this.getTypedRuleContext(EnumerationItemContext,i);
    }
};

EnumerationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


EnumerationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterEnumeration(this);
	}
};

EnumerationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitEnumeration(this);
	}
};




ASNParser.EnumerationContext = EnumerationContext;

ASNParser.prototype.enumeration = function() {

    var localctx = new EnumerationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, ASNParser.RULE_enumeration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1113;
        this.enumerationItem();
        this.state = 1118;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1114;
                this.match(ASNParser.COMMA);
                this.state = 1115;
                this.enumerationItem(); 
            }
            this.state = 1120;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumerationItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_enumerationItem;
    return this;
}

EnumerationItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationItemContext.prototype.constructor = EnumerationItemContext;

EnumerationItemContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

EnumerationItemContext.prototype.namedNumber = function() {
    return this.getTypedRuleContext(NamedNumberContext,0);
};

EnumerationItemContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

EnumerationItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterEnumerationItem(this);
	}
};

EnumerationItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitEnumerationItem(this);
	}
};




ASNParser.EnumerationItemContext = EnumerationItemContext;

ASNParser.prototype.enumerationItem = function() {

    var localctx = new EnumerationItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, ASNParser.RULE_enumerationItem);
    try {
        this.state = 1124;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1121;
            this.match(ASNParser.IDENTIFIER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1122;
            this.namedNumber();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1123;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedNumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_namedNumber;
    return this;
}

NamedNumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedNumberContext.prototype.constructor = NamedNumberContext;

NamedNumberContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

NamedNumberContext.prototype.L_PARAN = function() {
    return this.getToken(ASNParser.L_PARAN, 0);
};

NamedNumberContext.prototype.R_PARAN = function() {
    return this.getToken(ASNParser.R_PARAN, 0);
};

NamedNumberContext.prototype.signedNumber = function() {
    return this.getTypedRuleContext(SignedNumberContext,0);
};

NamedNumberContext.prototype.definedValue = function() {
    return this.getTypedRuleContext(DefinedValueContext,0);
};

NamedNumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterNamedNumber(this);
	}
};

NamedNumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitNamedNumber(this);
	}
};




ASNParser.NamedNumberContext = NamedNumberContext;

ASNParser.prototype.namedNumber = function() {

    var localctx = new NamedNumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, ASNParser.RULE_namedNumber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1126;
        this.match(ASNParser.IDENTIFIER);
        this.state = 1127;
        this.match(ASNParser.L_PARAN);
        this.state = 1130;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.MINUS:
        case ASNParser.NUMBER:
            this.state = 1128;
            this.signedNumber();
            break;
        case ASNParser.IDENTIFIER:
            this.state = 1129;
            this.definedValue();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1132;
        this.match(ASNParser.R_PARAN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefinedValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_definedValue;
    return this;
}

DefinedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinedValueContext.prototype.constructor = DefinedValueContext;

DefinedValueContext.prototype.parameterizedValue = function() {
    return this.getTypedRuleContext(ParameterizedValueContext,0);
};

DefinedValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterDefinedValue(this);
	}
};

DefinedValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitDefinedValue(this);
	}
};




ASNParser.DefinedValueContext = DefinedValueContext;

ASNParser.prototype.definedValue = function() {

    var localctx = new DefinedValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, ASNParser.RULE_definedValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1134;
        this.parameterizedValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterizedValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_parameterizedValue;
    return this;
}

ParameterizedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterizedValueContext.prototype.constructor = ParameterizedValueContext;

ParameterizedValueContext.prototype.simpleDefinedValue = function() {
    return this.getTypedRuleContext(SimpleDefinedValueContext,0);
};

ParameterizedValueContext.prototype.actualParameterList = function() {
    return this.getTypedRuleContext(ActualParameterListContext,0);
};

ParameterizedValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterParameterizedValue(this);
	}
};

ParameterizedValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitParameterizedValue(this);
	}
};




ASNParser.ParameterizedValueContext = ParameterizedValueContext;

ASNParser.prototype.parameterizedValue = function() {

    var localctx = new ParameterizedValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, ASNParser.RULE_parameterizedValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1136;
        this.simpleDefinedValue();
        this.state = 1138;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.L_BRACE) {
            this.state = 1137;
            this.actualParameterList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleDefinedValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_simpleDefinedValue;
    return this;
}

SimpleDefinedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleDefinedValueContext.prototype.constructor = SimpleDefinedValueContext;

SimpleDefinedValueContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.IDENTIFIER);
    } else {
        return this.getToken(ASNParser.IDENTIFIER, i);
    }
};


SimpleDefinedValueContext.prototype.DOT = function() {
    return this.getToken(ASNParser.DOT, 0);
};

SimpleDefinedValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterSimpleDefinedValue(this);
	}
};

SimpleDefinedValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitSimpleDefinedValue(this);
	}
};




ASNParser.SimpleDefinedValueContext = SimpleDefinedValueContext;

ASNParser.prototype.simpleDefinedValue = function() {

    var localctx = new SimpleDefinedValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, ASNParser.RULE_simpleDefinedValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1140;
        this.match(ASNParser.IDENTIFIER);
        this.state = 1143;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.DOT) {
            this.state = 1141;
            this.match(ASNParser.DOT);
            this.state = 1142;
            this.match(ASNParser.IDENTIFIER);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActualParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_actualParameterList;
    return this;
}

ActualParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActualParameterListContext.prototype.constructor = ActualParameterListContext;

ActualParameterListContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

ActualParameterListContext.prototype.actualParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActualParameterContext);
    } else {
        return this.getTypedRuleContext(ActualParameterContext,i);
    }
};

ActualParameterListContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

ActualParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ActualParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterActualParameterList(this);
	}
};

ActualParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitActualParameterList(this);
	}
};




ASNParser.ActualParameterListContext = ActualParameterListContext;

ASNParser.prototype.actualParameterList = function() {

    var localctx = new ActualParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, ASNParser.RULE_actualParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1145;
        this.match(ASNParser.L_BRACE);
        this.state = 1146;
        this.actualParameter();
        this.state = 1151;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.COMMA) {
            this.state = 1147;
            this.match(ASNParser.COMMA);
            this.state = 1148;
            this.actualParameter();
            this.state = 1153;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1154;
        this.match(ASNParser.R_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ActualParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_actualParameter;
    return this;
}

ActualParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActualParameterContext.prototype.constructor = ActualParameterContext;

ActualParameterContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ActualParameterContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ActualParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterActualParameter(this);
	}
};

ActualParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitActualParameter(this);
	}
};




ASNParser.ActualParameterContext = ActualParameterContext;

ASNParser.prototype.actualParameter = function() {

    var localctx = new ActualParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, ASNParser.RULE_actualParameter);
    try {
        this.state = 1158;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1156;
            this.asnType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1157;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptionSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_exceptionSpec;
    return this;
}

ExceptionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionSpecContext.prototype.constructor = ExceptionSpecContext;

ExceptionSpecContext.prototype.EXCLAM = function() {
    return this.getToken(ASNParser.EXCLAM, 0);
};

ExceptionSpecContext.prototype.exceptionIdentification = function() {
    return this.getTypedRuleContext(ExceptionIdentificationContext,0);
};

ExceptionSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExceptionSpec(this);
	}
};

ExceptionSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExceptionSpec(this);
	}
};




ASNParser.ExceptionSpecContext = ExceptionSpecContext;

ASNParser.prototype.exceptionSpec = function() {

    var localctx = new ExceptionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, ASNParser.RULE_exceptionSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1160;
        this.match(ASNParser.EXCLAM);
        this.state = 1161;
        this.exceptionIdentification();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptionIdentificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_exceptionIdentification;
    return this;
}

ExceptionIdentificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionIdentificationContext.prototype.constructor = ExceptionIdentificationContext;

ExceptionIdentificationContext.prototype.signedNumber = function() {
    return this.getTypedRuleContext(SignedNumberContext,0);
};

ExceptionIdentificationContext.prototype.definedValue = function() {
    return this.getTypedRuleContext(DefinedValueContext,0);
};

ExceptionIdentificationContext.prototype.asnType = function() {
    return this.getTypedRuleContext(AsnTypeContext,0);
};

ExceptionIdentificationContext.prototype.COLON = function() {
    return this.getToken(ASNParser.COLON, 0);
};

ExceptionIdentificationContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

ExceptionIdentificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterExceptionIdentification(this);
	}
};

ExceptionIdentificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitExceptionIdentification(this);
	}
};




ASNParser.ExceptionIdentificationContext = ExceptionIdentificationContext;

ASNParser.prototype.exceptionIdentification = function() {

    var localctx = new ExceptionIdentificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, ASNParser.RULE_exceptionIdentification);
    try {
        this.state = 1169;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1163;
            this.signedNumber();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1164;
            this.definedValue();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1165;
            this.asnType();
            this.state = 1166;
            this.match(ASNParser.COLON);
            this.state = 1167;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdditionalEnumerationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_additionalEnumeration;
    return this;
}

AdditionalEnumerationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditionalEnumerationContext.prototype.constructor = AdditionalEnumerationContext;

AdditionalEnumerationContext.prototype.enumeration = function() {
    return this.getTypedRuleContext(EnumerationContext,0);
};

AdditionalEnumerationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterAdditionalEnumeration(this);
	}
};

AdditionalEnumerationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitAdditionalEnumeration(this);
	}
};




ASNParser.AdditionalEnumerationContext = AdditionalEnumerationContext;

ASNParser.prototype.additionalEnumeration = function() {

    var localctx = new AdditionalEnumerationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, ASNParser.RULE_additionalEnumeration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1171;
        this.enumeration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntegerTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_integerType;
    return this;
}

IntegerTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerTypeContext.prototype.constructor = IntegerTypeContext;

IntegerTypeContext.prototype.INTEGER_LITERAL = function() {
    return this.getToken(ASNParser.INTEGER_LITERAL, 0);
};

IntegerTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

IntegerTypeContext.prototype.namedNumberList = function() {
    return this.getTypedRuleContext(NamedNumberListContext,0);
};

IntegerTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

IntegerTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterIntegerType(this);
	}
};

IntegerTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitIntegerType(this);
	}
};




ASNParser.IntegerTypeContext = IntegerTypeContext;

ASNParser.prototype.integerType = function() {

    var localctx = new IntegerTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, ASNParser.RULE_integerType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1173;
        this.match(ASNParser.INTEGER_LITERAL);
        this.state = 1178;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        if(la_===1) {
            this.state = 1174;
            this.match(ASNParser.L_BRACE);
            this.state = 1175;
            this.namedNumberList();
            this.state = 1176;
            this.match(ASNParser.R_BRACE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedNumberListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_namedNumberList;
    return this;
}

NamedNumberListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedNumberListContext.prototype.constructor = NamedNumberListContext;

NamedNumberListContext.prototype.namedNumber = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedNumberContext);
    } else {
        return this.getTypedRuleContext(NamedNumberContext,i);
    }
};

NamedNumberListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


NamedNumberListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterNamedNumberList(this);
	}
};

NamedNumberListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitNamedNumberList(this);
	}
};




ASNParser.NamedNumberListContext = NamedNumberListContext;

ASNParser.prototype.namedNumberList = function() {

    var localctx = new NamedNumberListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, ASNParser.RULE_namedNumberList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1180;
        this.namedNumber();
        this.state = 1185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.COMMA) {
            this.state = 1181;
            this.match(ASNParser.COMMA);
            this.state = 1182;
            this.namedNumber();
            this.state = 1187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectidentifiertypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_objectidentifiertype;
    return this;
}

ObjectidentifiertypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectidentifiertypeContext.prototype.constructor = ObjectidentifiertypeContext;

ObjectidentifiertypeContext.prototype.OBJECT_LITERAL = function() {
    return this.getToken(ASNParser.OBJECT_LITERAL, 0);
};

ObjectidentifiertypeContext.prototype.IDENTIFIER_LITERAL = function() {
    return this.getToken(ASNParser.IDENTIFIER_LITERAL, 0);
};

ObjectidentifiertypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterObjectidentifiertype(this);
	}
};

ObjectidentifiertypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitObjectidentifiertype(this);
	}
};




ASNParser.ObjectidentifiertypeContext = ObjectidentifiertypeContext;

ASNParser.prototype.objectidentifiertype = function() {

    var localctx = new ObjectidentifiertypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, ASNParser.RULE_objectidentifiertype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1188;
        this.match(ASNParser.OBJECT_LITERAL);
        this.state = 1189;
        this.match(ASNParser.IDENTIFIER_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentRelationConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_componentRelationConstraint;
    return this;
}

ComponentRelationConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentRelationConstraintContext.prototype.constructor = ComponentRelationConstraintContext;

ComponentRelationConstraintContext.prototype.L_BRACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.L_BRACE);
    } else {
        return this.getToken(ASNParser.L_BRACE, i);
    }
};


ComponentRelationConstraintContext.prototype.R_BRACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.R_BRACE);
    } else {
        return this.getToken(ASNParser.R_BRACE, i);
    }
};


ComponentRelationConstraintContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.IDENTIFIER);
    } else {
        return this.getToken(ASNParser.IDENTIFIER, i);
    }
};


ComponentRelationConstraintContext.prototype.atNotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AtNotationContext);
    } else {
        return this.getTypedRuleContext(AtNotationContext,i);
    }
};

ComponentRelationConstraintContext.prototype.DOT = function() {
    return this.getToken(ASNParser.DOT, 0);
};

ComponentRelationConstraintContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


ComponentRelationConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterComponentRelationConstraint(this);
	}
};

ComponentRelationConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitComponentRelationConstraint(this);
	}
};




ASNParser.ComponentRelationConstraintContext = ComponentRelationConstraintContext;

ASNParser.prototype.componentRelationConstraint = function() {

    var localctx = new ComponentRelationConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, ASNParser.RULE_componentRelationConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1191;
        this.match(ASNParser.L_BRACE);

        this.state = 1192;
        this.match(ASNParser.IDENTIFIER);
        this.state = 1195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.DOT) {
            this.state = 1193;
            this.match(ASNParser.DOT);
            this.state = 1194;
            this.match(ASNParser.IDENTIFIER);
        }

        this.state = 1197;
        this.match(ASNParser.R_BRACE);
        this.state = 1209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.L_BRACE) {
            this.state = 1198;
            this.match(ASNParser.L_BRACE);
            this.state = 1199;
            this.atNotation();
            this.state = 1204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ASNParser.COMMA) {
                this.state = 1200;
                this.match(ASNParser.COMMA);
                this.state = 1201;
                this.atNotation();
                this.state = 1206;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1207;
            this.match(ASNParser.R_BRACE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AtNotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_atNotation;
    return this;
}

AtNotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtNotationContext.prototype.constructor = AtNotationContext;

AtNotationContext.prototype.componentIdList = function() {
    return this.getTypedRuleContext(ComponentIdListContext,0);
};

AtNotationContext.prototype.A_ROND = function() {
    return this.getToken(ASNParser.A_ROND, 0);
};

AtNotationContext.prototype.A_ROND_DOT = function() {
    return this.getToken(ASNParser.A_ROND_DOT, 0);
};

AtNotationContext.prototype.level = function() {
    return this.getTypedRuleContext(LevelContext,0);
};

AtNotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterAtNotation(this);
	}
};

AtNotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitAtNotation(this);
	}
};




ASNParser.AtNotationContext = AtNotationContext;

ASNParser.prototype.atNotation = function() {

    var localctx = new AtNotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, ASNParser.RULE_atNotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1214;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.A_ROND:
            this.state = 1211;
            this.match(ASNParser.A_ROND);
            break;
        case ASNParser.A_ROND_DOT:
            this.state = 1212;
            this.match(ASNParser.A_ROND_DOT);
            this.state = 1213;
            this.level();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1216;
        this.componentIdList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LevelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_level;
    return this;
}

LevelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LevelContext.prototype.constructor = LevelContext;

LevelContext.prototype.DOT = function() {
    return this.getToken(ASNParser.DOT, 0);
};

LevelContext.prototype.level = function() {
    return this.getTypedRuleContext(LevelContext,0);
};

LevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterLevel(this);
	}
};

LevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitLevel(this);
	}
};




ASNParser.LevelContext = LevelContext;

ASNParser.prototype.level = function() {

    var localctx = new LevelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, ASNParser.RULE_level);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1220;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ASNParser.DOT) {
            this.state = 1218;
            this.match(ASNParser.DOT);
            this.state = 1219;
            this.level();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComponentIdListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_componentIdList;
    return this;
}

ComponentIdListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentIdListContext.prototype.constructor = ComponentIdListContext;

ComponentIdListContext.prototype.IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.IDENTIFIER);
    } else {
        return this.getToken(ASNParser.IDENTIFIER, i);
    }
};


ComponentIdListContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.DOT);
    } else {
        return this.getToken(ASNParser.DOT, i);
    }
};


ComponentIdListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterComponentIdList(this);
	}
};

ComponentIdListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitComponentIdList(this);
	}
};




ASNParser.ComponentIdListContext = ComponentIdListContext;

ASNParser.prototype.componentIdList = function() {

    var localctx = new ComponentIdListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, ASNParser.RULE_componentIdList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1222;
        this.match(ASNParser.IDENTIFIER);
        this.state = 1227;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.DOT) {
            this.state = 1223;
            this.match(ASNParser.DOT);
            this.state = 1224;
            this.match(ASNParser.IDENTIFIER);
            this.state = 1229;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OctetStringTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_octetStringType;
    return this;
}

OctetStringTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OctetStringTypeContext.prototype.constructor = OctetStringTypeContext;

OctetStringTypeContext.prototype.OCTET_LITERAL = function() {
    return this.getToken(ASNParser.OCTET_LITERAL, 0);
};

OctetStringTypeContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ASNParser.STRING_LITERAL, 0);
};

OctetStringTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterOctetStringType(this);
	}
};

OctetStringTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitOctetStringType(this);
	}
};




ASNParser.OctetStringTypeContext = OctetStringTypeContext;

ASNParser.prototype.octetStringType = function() {

    var localctx = new OctetStringTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, ASNParser.RULE_octetStringType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1230;
        this.match(ASNParser.OCTET_LITERAL);
        this.state = 1231;
        this.match(ASNParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitStringTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_bitStringType;
    return this;
}

BitStringTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitStringTypeContext.prototype.constructor = BitStringTypeContext;

BitStringTypeContext.prototype.BIT_LITERAL = function() {
    return this.getToken(ASNParser.BIT_LITERAL, 0);
};

BitStringTypeContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ASNParser.STRING_LITERAL, 0);
};

BitStringTypeContext.prototype.L_BRACE = function() {
    return this.getToken(ASNParser.L_BRACE, 0);
};

BitStringTypeContext.prototype.namedBitList = function() {
    return this.getTypedRuleContext(NamedBitListContext,0);
};

BitStringTypeContext.prototype.R_BRACE = function() {
    return this.getToken(ASNParser.R_BRACE, 0);
};

BitStringTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterBitStringType(this);
	}
};

BitStringTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitBitStringType(this);
	}
};




ASNParser.BitStringTypeContext = BitStringTypeContext;

ASNParser.prototype.bitStringType = function() {

    var localctx = new BitStringTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, ASNParser.RULE_bitStringType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1233;
        this.match(ASNParser.BIT_LITERAL);
        this.state = 1234;
        this.match(ASNParser.STRING_LITERAL);
        this.state = 1240;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        if(la_===1) {
            this.state = 1236;
            this.match(ASNParser.L_BRACE);
            this.state = 1237;
            this.namedBitList();
            this.state = 1238;
            this.match(ASNParser.R_BRACE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedBitListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_namedBitList;
    return this;
}

NamedBitListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedBitListContext.prototype.constructor = NamedBitListContext;

NamedBitListContext.prototype.namedBit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedBitContext);
    } else {
        return this.getTypedRuleContext(NamedBitContext,i);
    }
};

NamedBitListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ASNParser.COMMA);
    } else {
        return this.getToken(ASNParser.COMMA, i);
    }
};


NamedBitListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterNamedBitList(this);
	}
};

NamedBitListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitNamedBitList(this);
	}
};




ASNParser.NamedBitListContext = NamedBitListContext;

ASNParser.prototype.namedBitList = function() {

    var localctx = new NamedBitListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, ASNParser.RULE_namedBitList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1242;
        this.namedBit();
        this.state = 1247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ASNParser.COMMA) {
            this.state = 1243;
            this.match(ASNParser.COMMA);
            this.state = 1244;
            this.namedBit();
            this.state = 1249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedBitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_namedBit;
    return this;
}

NamedBitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedBitContext.prototype.constructor = NamedBitContext;

NamedBitContext.prototype.IDENTIFIER = function() {
    return this.getToken(ASNParser.IDENTIFIER, 0);
};

NamedBitContext.prototype.L_PARAN = function() {
    return this.getToken(ASNParser.L_PARAN, 0);
};

NamedBitContext.prototype.R_PARAN = function() {
    return this.getToken(ASNParser.R_PARAN, 0);
};

NamedBitContext.prototype.NUMBER = function() {
    return this.getToken(ASNParser.NUMBER, 0);
};

NamedBitContext.prototype.definedValue = function() {
    return this.getTypedRuleContext(DefinedValueContext,0);
};

NamedBitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterNamedBit(this);
	}
};

NamedBitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitNamedBit(this);
	}
};




ASNParser.NamedBitContext = NamedBitContext;

ASNParser.prototype.namedBit = function() {

    var localctx = new NamedBitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, ASNParser.RULE_namedBit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1250;
        this.match(ASNParser.IDENTIFIER);
        this.state = 1251;
        this.match(ASNParser.L_PARAN);
        this.state = 1254;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ASNParser.NUMBER:
            this.state = 1252;
            this.match(ASNParser.NUMBER);
            break;
        case ASNParser.IDENTIFIER:
            this.state = 1253;
            this.definedValue();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1256;
        this.match(ASNParser.R_PARAN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ASNParser.RULE_booleanValue;
    return this;
}

BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.TRUE_LITERAL = function() {
    return this.getToken(ASNParser.TRUE_LITERAL, 0);
};

BooleanValueContext.prototype.FALSE_LITERAL = function() {
    return this.getToken(ASNParser.FALSE_LITERAL, 0);
};

BooleanValueContext.prototype.TRUE_SMALL_LITERAL = function() {
    return this.getToken(ASNParser.TRUE_SMALL_LITERAL, 0);
};

BooleanValueContext.prototype.FALSE_SMALL_LITERAL = function() {
    return this.getToken(ASNParser.FALSE_SMALL_LITERAL, 0);
};

BooleanValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.enterBooleanValue(this);
	}
};

BooleanValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ASNListener ) {
        listener.exitBooleanValue(this);
	}
};




ASNParser.BooleanValueContext = BooleanValueContext;

ASNParser.prototype.booleanValue = function() {

    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, ASNParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ASNParser.TRUE_LITERAL) | (1 << ASNParser.FALSE_LITERAL) | (1 << ASNParser.TRUE_SMALL_LITERAL) | (1 << ASNParser.FALSE_SMALL_LITERAL))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.ASNParser = ASNParser;
